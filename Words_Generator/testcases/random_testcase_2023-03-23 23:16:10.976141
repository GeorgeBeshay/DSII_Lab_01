@Test
public void random_testcase_0(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-632441719);
tree.insert(824493716);
tree.insert(580455417);
tree.insert(756788796);
tree.insert(642935069);
tree.insert(437766217);
tree.insert(-54556836);
tree.insert(694061427);
tree.insert(-606233067);
tree.insert(-896527595);
tree.insert(-167615579);
tree.insert(-410901529);
tree.insert(707775918);
tree.insert(-21424464);
tree.insert(135756322);
tree.insert(-945268346);
tree.insert(651900791);
tree.insert(886065829);
tree.insert(740414486);
tree.insert(-424038775);
tree.insert(740603845);
tree.insert(-86892331);
tree.insert(839892388);
tree.insert(460709287);
tree.insert(-448161419);
tree.insert(-750337378);
tree.insert(334054964);
tree.insert(507797529);
tree.insert(-870197144);
tree.insert(-32242140);
tree.insert(-935120885);
tree.insert(588903072);
tree.insert(-841589214);
tree.insert(322862101);
tree.insert(190366863);
tree.insert(-67620439);
tree.insert(-670002106);
tree.insert(-433037425);
tree.insert(551723423);
tree.insert(-748342371);
tree.insert(402670536);
tree.insert(204224789);
tree.insert(-695581441);
tree.insert(326115638);
tree.insert(271424258);
tree.insert(221138561);
tree.insert(573288702);
tree.insert(-457379177);
tree.insert(-740909563);
tree.insert(215375916);
tree.insert(-267956890);
tree.insert(168636150);
tree.insert(-683595766);
tree.insert(983519943);
tree.insert(-464734936);
tree.insert(591680784);
tree.insert(282221950);
tree.insert(685478420);
tree.insert(-165082309);
tree.insert(940145226);
tree.insert(-442286154);
tree.insert(100448086);
tree.insert(426285746);
tree.insert(155777808);
tree.insert(174490013);
tree.insert(-713563359);
tree.insert(839264191);
tree.insert(-911817776);
tree.insert(549271540);
tree.insert(663136487);
tree.insert(590724422);
tree.insert(-493555604);
tree.insert(521554369);
tree.insert(851887051);
tree.insert(87553311);
tree.insert(-806577877);
tree.insert(267519967);
tree.insert(390362236);
tree.insert(145725830);
tree.insert(890483563);
tree.insert(525520449);
tree.insert(320208642);
tree.insert(-777636795);
tree.insert(-111916415);
tree.insert(658823993);
tree.insert(-211911486);
tree.insert(886801180);
tree.insert(-808621239);
tree.insert(-504978315);
tree.insert(-521459287);
tree.insert(59288437);
tree.insert(-799331116);
tree.insert(-336995812);
tree.insert(697000466);
tree.insert(780487436);
tree.insert(-396193838);
tree.insert(-595140846);
tree.insert(825815295);
tree.insert(-715637383);
tree.insert(-652931755);
tree.insert(-682912892);
tree.insert(75435653);
tree.insert(586436792);
tree.insert(-4128861);
tree.insert(226689757);
tree.insert(261830304);
tree.insert(533384151);
tree.insert(-464185446);
tree.insert(104642592);
tree.insert(878542323);
tree.insert(820535345);
tree.insert(-690800084);
tree.insert(-240843771);
tree.insert(119406414);
tree.insert(-814860953);
tree.insert(253038062);
tree.insert(564946708);
tree.insert(847312740);
tree.insert(-494564853);
tree.insert(191871308);
tree.insert(-859392115);
tree.insert(300770484);
tree.insert(676439133);
tree.insert(-865073597);
tree.insert(-517080188);
tree.insert(702136776);
tree.insert(248450798);
tree.insert(122852520);
tree.insert(616418015);
tree.insert(71373548);
tree.insert(-521249488);
tree.insert(-56409654);
tree.insert(-447487114);
tree.insert(-423051178);
tree.insert(-277193047);
tree.insert(971101730);
tree.insert(279804858);
tree.insert(221269352);
tree.insert(-864332215);
tree.insert(572336153);
tree.insert(887788487);
tree.insert(585257646);
tree.insert(-602553355);
tree.insert(-157388225);
tree.insert(-604734749);
tree.insert(-737120412);
tree.insert(-881893867);
tree.insert(-393958706);
tree.insert(377980107);
tree.insert(412545531);
tree.insert(695762820);
tree.insert(-621466894);
tree.insert(-854245853);
tree.insert(-268824728);
tree.insert(153660815);
tree.insert(-769310417);
tree.insert(-417060027);
tree.insert(-847737263);
tree.insert(-399239841);
tree.insert(311334475);
tree.insert(158372018);
tree.insert(-75168770);
tree.insert(853172548);
tree.insert(460114727);
tree.insert(804937530);
tree.insert(723760529);
tree.insert(413630535);
tree.insert(188010662);
tree.insert(881769933);
tree.insert(-568487253);
tree.insert(875347951);
tree.insert(-41760579);
tree.insert(-74559011);
tree.insert(186215768);
tree.insert(817556148);
tree.insert(-565915015);
tree.insert(-459057313);
tree.insert(-170037554);
tree.insert(493255659);
tree.insert(641826913);
tree.insert(121616128);
tree.insert(813084282);
tree.insert(-640730098);
tree.insert(527353300);
tree.insert(336005676);
tree.insert(-268118330);
tree.insert(-717312275);
tree.insert(970806012);
tree.insert(-718049003);
tree.insert(-502952962);
tree.insert(-335951043);
tree.insert(539457760);
tree.insert(490538221);
tree.insert(892734415);
tree.insert(-77042638);
tree.insert(-699909639);
tree.insert(-949462557);
tree.insert(638618415);
tree.insert(-675388068);
tree.insert(339603456);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_1(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_2(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_3(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_4(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_5(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_6(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_7(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_8(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_9(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_10(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_11(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_12(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_13(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_14(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_15(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_16(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_17(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_18(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_19(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_20(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_21(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_22(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_23(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_24(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_25(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_26(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_27(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_28(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_29(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_30(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_31(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_32(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_33(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_34(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_35(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_36(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_37(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_38(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_39(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_40(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_41(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_42(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_43(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_44(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_45(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_46(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_47(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_48(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_49(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_50(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_51(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_52(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_53(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_54(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_55(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_56(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_57(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_58(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_59(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_60(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_61(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_62(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_63(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_64(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_65(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_66(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_67(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_68(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_69(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_70(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_71(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_72(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_73(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_74(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_75(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_76(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_77(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_78(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_79(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_80(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_81(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_82(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_83(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_84(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_85(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_86(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_87(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_88(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_89(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_90(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_91(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_92(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_93(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_94(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_95(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_96(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_97(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_98(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_99(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-949462557);
tree.insert(-945268346);
tree.insert(-935120885);
tree.insert(-911817776);
tree.insert(-896527595);
tree.insert(-881893867);
tree.insert(-870197144);
tree.insert(-865073597);
tree.insert(-864332215);
tree.insert(-859392115);
tree.insert(-854245853);
tree.insert(-847737263);
tree.insert(-841589214);
tree.insert(-814860953);
tree.insert(-808621239);
tree.insert(-806577877);
tree.insert(-799331116);
tree.insert(-777636795);
tree.insert(-769310417);
tree.insert(-750337378);
tree.insert(-748342371);
tree.insert(-740909563);
tree.insert(-737120412);
tree.insert(-718049003);
tree.insert(-717312275);
tree.insert(-715637383);
tree.insert(-713563359);
tree.insert(-699909639);
tree.insert(-695581441);
tree.insert(-690800084);
tree.insert(-683595766);
tree.insert(-682912892);
tree.insert(-675388068);
tree.insert(-670002106);
tree.insert(-652931755);
tree.insert(-640730098);
tree.insert(-632441719);
tree.insert(-621466894);
tree.insert(-606233067);
tree.insert(-604734749);
tree.insert(-602553355);
tree.insert(-595140846);
tree.insert(-568487253);
tree.insert(-565915015);
tree.insert(-521459287);
tree.insert(-521249488);
tree.insert(-517080188);
tree.insert(-504978315);
tree.insert(-502952962);
tree.insert(-494564853);
tree.insert(-493555604);
tree.insert(-464734936);
tree.insert(-464185446);
tree.insert(-459057313);
tree.insert(-457379177);
tree.insert(-448161419);
tree.insert(-447487114);
tree.insert(-442286154);
tree.insert(-433037425);
tree.insert(-424038775);
tree.insert(-423051178);
tree.insert(-417060027);
tree.insert(-410901529);
tree.insert(-399239841);
tree.insert(-396193838);
tree.insert(-393958706);
tree.insert(-336995812);
tree.insert(-335951043);
tree.insert(-277193047);
tree.insert(-268824728);
tree.insert(-268118330);
tree.insert(-267956890);
tree.insert(-240843771);
tree.insert(-211911486);
tree.insert(-170037554);
tree.insert(-167615579);
tree.insert(-165082309);
tree.insert(-157388225);
tree.insert(-111916415);
tree.insert(-86892331);
tree.insert(-77042638);
tree.insert(-75168770);
tree.insert(-74559011);
tree.insert(-67620439);
tree.insert(-56409654);
tree.insert(-54556836);
tree.insert(-41760579);
tree.insert(-32242140);
tree.insert(-21424464);
tree.insert(-4128861);
tree.insert(59288437);
tree.insert(71373548);
tree.insert(75435653);
tree.insert(87553311);
tree.insert(100448086);
tree.insert(104642592);
tree.insert(119406414);
tree.insert(121616128);
tree.insert(122852520);
tree.insert(135756322);
tree.insert(145725830);
tree.insert(153660815);
tree.insert(155777808);
tree.insert(158372018);
tree.insert(168636150);
tree.insert(174490013);
tree.insert(186215768);
tree.insert(188010662);
tree.insert(190366863);
tree.insert(191871308);
tree.insert(204224789);
tree.insert(215375916);
tree.insert(221138561);
tree.insert(221269352);
tree.insert(226689757);
tree.insert(248450798);
tree.insert(253038062);
tree.insert(261830304);
tree.insert(267519967);
tree.insert(271424258);
tree.insert(279804858);
tree.insert(282221950);
tree.insert(300770484);
tree.insert(311334475);
tree.insert(320208642);
tree.insert(322862101);
tree.insert(326115638);
tree.insert(334054964);
tree.insert(336005676);
tree.insert(339603456);
tree.insert(377980107);
tree.insert(390362236);
tree.insert(402670536);
tree.insert(412545531);
tree.insert(413630535);
tree.insert(426285746);
tree.insert(437766217);
tree.insert(460114727);
tree.insert(460709287);
tree.insert(490538221);
tree.insert(493255659);
tree.insert(507797529);
tree.insert(521554369);
tree.insert(525520449);
tree.insert(527353300);
tree.insert(533384151);
tree.insert(539457760);
tree.insert(549271540);
tree.insert(551723423);
tree.insert(564946708);
tree.insert(572336153);
tree.insert(573288702);
tree.insert(580455417);
tree.insert(585257646);
tree.insert(586436792);
tree.insert(588903072);
tree.insert(590724422);
tree.insert(591680784);
tree.insert(616418015);
tree.insert(638618415);
tree.insert(641826913);
tree.insert(642935069);
tree.insert(651900791);
tree.insert(658823993);
tree.insert(663136487);
tree.insert(676439133);
tree.insert(685478420);
tree.insert(694061427);
tree.insert(695762820);
tree.insert(697000466);
tree.insert(702136776);
tree.insert(707775918);
tree.insert(723760529);
tree.insert(740414486);
tree.insert(740603845);
tree.insert(756788796);
tree.insert(780487436);
tree.insert(804937530);
tree.insert(813084282);
tree.insert(817556148);
tree.insert(820535345);
tree.insert(824493716);
tree.insert(825815295);
tree.insert(839264191);
tree.insert(839892388);
tree.insert(847312740);
tree.insert(851887051);
tree.insert(853172548);
tree.insert(875347951);
tree.insert(878542323);
tree.insert(881769933);
tree.insert(886065829);
tree.insert(886801180);
tree.insert(887788487);
tree.insert(890483563);
tree.insert(892734415);
tree.insert(940145226);
tree.insert(970806012);
tree.insert(971101730);
tree.insert(983519943);
Integer[] data = {-949462557, -945268346, -935120885, -911817776, -896527595, -881893867, -870197144, -865073597, -864332215, -859392115, -854245853, -847737263, -841589214, -814860953, -808621239, -806577877, -799331116, -777636795, -769310417, -750337378, -748342371, -740909563, -737120412, -718049003, -717312275, -715637383, -713563359, -699909639, -695581441, -690800084, -683595766, -682912892, -675388068, -670002106, -652931755, -640730098, -632441719, -621466894, -606233067, -604734749, -602553355, -595140846, -568487253, -565915015, -521459287, -521249488, -517080188, -504978315, -502952962, -494564853, -493555604, -464734936, -464185446, -459057313, -457379177, -448161419, -447487114, -442286154, -433037425, -424038775, -423051178, -417060027, -410901529, -399239841, -396193838, -393958706, -336995812, -335951043, -277193047, -268824728, -268118330, -267956890, -240843771, -211911486, -170037554, -167615579, -165082309, -157388225, -111916415, -86892331, -77042638, -75168770, -74559011, -67620439, -56409654, -54556836, -41760579, -32242140, -21424464, -4128861, 59288437, 71373548, 75435653, 87553311, 100448086, 104642592, 119406414, 121616128, 122852520, 135756322, 145725830, 153660815, 155777808, 158372018, 168636150, 174490013, 186215768, 188010662, 190366863, 191871308, 204224789, 215375916, 221138561, 221269352, 226689757, 248450798, 253038062, 261830304, 267519967, 271424258, 279804858, 282221950, 300770484, 311334475, 320208642, 322862101, 326115638, 334054964, 336005676, 339603456, 377980107, 390362236, 402670536, 412545531, 413630535, 426285746, 437766217, 460114727, 460709287, 490538221, 493255659, 507797529, 521554369, 525520449, 527353300, 533384151, 539457760, 549271540, 551723423, 564946708, 572336153, 573288702, 580455417, 585257646, 586436792, 588903072, 590724422, 591680784, 616418015, 638618415, 641826913, 642935069, 651900791, 658823993, 663136487, 676439133, 685478420, 694061427, 695762820, 697000466, 702136776, 707775918, 723760529, 740414486, 740603845, 756788796, 780487436, 804937530, 813084282, 817556148, 820535345, 824493716, 825815295, 839264191, 839892388, 847312740, 851887051, 853172548, 875347951, 878542323, 881769933, 886065829, 886801180, 887788487, 890483563, 892734415, 940145226, 970806012, 971101730, 983519943,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}


