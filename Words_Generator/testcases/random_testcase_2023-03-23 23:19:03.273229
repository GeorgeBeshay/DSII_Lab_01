@Test
public void random_testcase_0(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-638948948);
tree.insert(-175094925);
tree.insert(-246921526);
tree.insert(-916556085);
tree.insert(167557463);
tree.insert(587491183);
tree.insert(313960253);
tree.insert(-214422915);
tree.insert(-162182800);
tree.insert(-774140267);
tree.insert(-337974303);
tree.insert(672606168);
tree.insert(717047242);
tree.insert(-80496439);
tree.insert(-502660011);
tree.insert(-217016517);
tree.insert(-741168528);
tree.insert(24873098);
tree.insert(82504934);
tree.insert(800170575);
tree.insert(15718732);
tree.insert(-886163280);
tree.insert(-12128444);
tree.insert(981260932);
tree.insert(-289015939);
tree.insert(-553302702);
tree.insert(-934060852);
tree.insert(955765273);
tree.insert(468510057);
tree.insert(-673051108);
tree.insert(44706185);
tree.insert(-334889031);
tree.insert(-441647211);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(884493660);
tree.insert(-735299759);
tree.insert(704431172);
tree.insert(366360158);
tree.insert(-776420217);
tree.insert(-916233467);
tree.insert(-162792708);
tree.insert(591220372);
tree.insert(276539560);
tree.insert(-659740573);
tree.insert(589000931);
tree.insert(-378678579);
tree.insert(965252449);
tree.insert(226889829);
tree.insert(168011411);
tree.insert(698859914);
tree.insert(548887638);
tree.insert(717194947);
tree.insert(130178190);
tree.insert(-772366016);
tree.insert(-159681818);
tree.insert(-586331629);
tree.insert(-655131167);
tree.insert(-75605599);
tree.insert(738497733);
tree.insert(-900752544);
tree.insert(-130549217);
tree.insert(580325843);
tree.insert(489393490);
tree.insert(-102615304);
tree.insert(674688865);
tree.insert(-460512975);
tree.insert(139768012);
tree.insert(301251367);
tree.insert(-816190525);
tree.insert(989825442);
tree.insert(-930422835);
tree.insert(340957603);
tree.insert(793600478);
tree.insert(236832031);
tree.insert(823728173);
tree.insert(-315734683);
tree.insert(697781485);
tree.insert(-936114680);
tree.insert(-818278408);
tree.insert(479476250);
tree.insert(-602067220);
tree.insert(-389387240);
tree.insert(-507140830);
tree.insert(-850650980);
tree.insert(-660552247);
tree.insert(560199285);
tree.insert(835837378);
tree.insert(-609259513);
tree.insert(739273592);
tree.insert(409212962);
tree.insert(649296541);
tree.insert(-871574175);
tree.insert(374194244);
tree.insert(586310135);
tree.insert(-268942820);
tree.insert(532648591);
tree.insert(787141179);
tree.insert(-917452553);
tree.insert(740979842);
tree.insert(-915068749);
tree.insert(-916145730);
tree.insert(993154300);
tree.insert(483453494);
tree.insert(616761349);
tree.insert(-810777795);
tree.insert(-899080746);
tree.insert(235387802);
tree.insert(-896043869);
tree.insert(962896438);
tree.insert(-556904649);
tree.insert(-292902288);
tree.insert(-606355944);
tree.insert(-156359453);
tree.insert(419885864);
tree.insert(807836244);
tree.insert(-940399452);
tree.insert(-832941162);
tree.insert(-658739418);
tree.insert(-129615380);
tree.insert(-415960399);
tree.insert(-266176555);
tree.insert(483686694);
tree.insert(-500076699);
tree.insert(711044796);
tree.insert(-577324773);
tree.insert(650831112);
tree.insert(877793431);
tree.insert(875119575);
tree.insert(748372480);
tree.insert(-333153306);
tree.insert(-994833500);
tree.insert(-279944823);
tree.insert(979751493);
tree.insert(231215877);
tree.insert(-999652504);
tree.insert(-140991682);
tree.insert(-517704771);
tree.insert(-577855959);
tree.insert(-101678528);
tree.insert(730742879);
tree.insert(882922919);
tree.insert(464820772);
tree.insert(-246729886);
tree.insert(-580906167);
tree.insert(-26141521);
tree.insert(-664303008);
tree.insert(-102663415);
tree.insert(526150184);
tree.insert(-982524003);
tree.insert(967115107);
tree.insert(462948822);
tree.insert(601413228);
tree.insert(-894065969);
tree.insert(-728447024);
tree.insert(450815678);
tree.insert(666137022);
tree.insert(29657748);
tree.insert(440624082);
tree.insert(410349558);
tree.insert(581097862);
tree.insert(677882124);
tree.insert(-294566968);
tree.insert(-649350945);
tree.insert(-18656768);
tree.insert(-148571473);
tree.insert(-56213288);
tree.insert(831855739);
tree.insert(654258200);
tree.insert(204647729);
tree.insert(525152134);
tree.insert(-864942210);
tree.insert(-312280898);
tree.insert(-872492945);
tree.insert(459402531);
tree.insert(147392430);
tree.insert(-369165869);
tree.insert(268571603);
tree.insert(983317197);
tree.insert(117684965);
tree.insert(-157938596);
tree.insert(-626217939);
tree.insert(-16103185);
tree.insert(957837780);
tree.insert(-847482365);
tree.insert(247969798);
tree.insert(368795073);
tree.insert(720257179);
tree.insert(-671002070);
tree.insert(-14922682);
tree.insert(-901759585);
tree.insert(624737388);
tree.insert(-404087667);
tree.insert(-583546163);
tree.insert(-812683263);
tree.insert(306714594);
tree.insert(-77182422);
tree.insert(502799465);
tree.insert(727602087);
tree.insert(166207419);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_1(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_2(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_3(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_4(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_5(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_6(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_7(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_8(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_9(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_10(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_11(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_12(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_13(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_14(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_15(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_16(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_17(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_18(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_19(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_20(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_21(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_22(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_23(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_24(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_25(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_26(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_27(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_28(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_29(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_30(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_31(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_32(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_33(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_34(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_35(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_36(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_37(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_38(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_39(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_40(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_41(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_42(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_43(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_44(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_45(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_46(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_47(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_48(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}

@Test
public void random_testcase_49(){
// Random testcase generated using python
RB_Tree<Integer> tree = new RB_Tree<Integer>();
tree.insert(-999652504);
tree.insert(-994833500);
tree.insert(-982524003);
tree.insert(-940399452);
tree.insert(-936114680);
tree.insert(-934060852);
tree.insert(-930422835);
tree.insert(-917452553);
tree.insert(-916556085);
tree.insert(-916233467);
tree.insert(-916145730);
tree.insert(-915068749);
tree.insert(-901759585);
tree.insert(-900752544);
tree.insert(-899080746);
tree.insert(-896043869);
tree.insert(-894065969);
tree.insert(-886163280);
tree.insert(-872492945);
tree.insert(-871574175);
tree.insert(-864942210);
tree.insert(-850650980);
tree.insert(-847482365);
tree.insert(-832941162);
tree.insert(-818278408);
tree.insert(-816190525);
tree.insert(-812683263);
tree.insert(-810777795);
tree.insert(-776420217);
tree.insert(-774140267);
tree.insert(-772366016);
tree.insert(-741168528);
tree.insert(-735299759);
tree.insert(-728447024);
tree.insert(-673051108);
tree.insert(-671002070);
tree.insert(-664303008);
tree.insert(-660552247);
tree.insert(-659740573);
tree.insert(-658739418);
tree.insert(-655131167);
tree.insert(-649350945);
tree.insert(-638948948);
tree.insert(-626217939);
tree.insert(-609259513);
tree.insert(-606355944);
tree.insert(-602067220);
tree.insert(-586331629);
tree.insert(-583546163);
tree.insert(-580906167);
tree.insert(-577855959);
tree.insert(-577324773);
tree.insert(-556904649);
tree.insert(-553302702);
tree.insert(-532519616);
tree.insert(-523371473);
tree.insert(-517704771);
tree.insert(-507140830);
tree.insert(-502660011);
tree.insert(-500076699);
tree.insert(-460512975);
tree.insert(-441647211);
tree.insert(-415960399);
tree.insert(-404087667);
tree.insert(-389387240);
tree.insert(-378678579);
tree.insert(-369165869);
tree.insert(-337974303);
tree.insert(-334889031);
tree.insert(-333153306);
tree.insert(-315734683);
tree.insert(-312280898);
tree.insert(-294566968);
tree.insert(-292902288);
tree.insert(-289015939);
tree.insert(-279944823);
tree.insert(-268942820);
tree.insert(-266176555);
tree.insert(-246921526);
tree.insert(-246729886);
tree.insert(-217016517);
tree.insert(-214422915);
tree.insert(-175094925);
tree.insert(-162792708);
tree.insert(-162182800);
tree.insert(-159681818);
tree.insert(-157938596);
tree.insert(-156359453);
tree.insert(-148571473);
tree.insert(-140991682);
tree.insert(-130549217);
tree.insert(-129615380);
tree.insert(-102663415);
tree.insert(-102615304);
tree.insert(-101678528);
tree.insert(-80496439);
tree.insert(-77182422);
tree.insert(-75605599);
tree.insert(-56213288);
tree.insert(-26141521);
tree.insert(-18656768);
tree.insert(-16103185);
tree.insert(-14922682);
tree.insert(-12128444);
tree.insert(15718732);
tree.insert(24873098);
tree.insert(29657748);
tree.insert(44706185);
tree.insert(82504934);
tree.insert(117684965);
tree.insert(130178190);
tree.insert(139768012);
tree.insert(147392430);
tree.insert(166207419);
tree.insert(167557463);
tree.insert(168011411);
tree.insert(204647729);
tree.insert(226889829);
tree.insert(231215877);
tree.insert(235387802);
tree.insert(236832031);
tree.insert(247969798);
tree.insert(268571603);
tree.insert(276539560);
tree.insert(301251367);
tree.insert(306714594);
tree.insert(313960253);
tree.insert(340957603);
tree.insert(366360158);
tree.insert(368795073);
tree.insert(374194244);
tree.insert(409212962);
tree.insert(410349558);
tree.insert(419885864);
tree.insert(440624082);
tree.insert(450815678);
tree.insert(459402531);
tree.insert(462948822);
tree.insert(464820772);
tree.insert(468510057);
tree.insert(479476250);
tree.insert(483453494);
tree.insert(483686694);
tree.insert(489393490);
tree.insert(502799465);
tree.insert(525152134);
tree.insert(526150184);
tree.insert(532648591);
tree.insert(548887638);
tree.insert(560199285);
tree.insert(580325843);
tree.insert(581097862);
tree.insert(586310135);
tree.insert(587491183);
tree.insert(589000931);
tree.insert(591220372);
tree.insert(601413228);
tree.insert(616761349);
tree.insert(624737388);
tree.insert(649296541);
tree.insert(650831112);
tree.insert(654258200);
tree.insert(666137022);
tree.insert(672606168);
tree.insert(674688865);
tree.insert(677882124);
tree.insert(697781485);
tree.insert(698859914);
tree.insert(704431172);
tree.insert(711044796);
tree.insert(717047242);
tree.insert(717194947);
tree.insert(720257179);
tree.insert(727602087);
tree.insert(730742879);
tree.insert(738497733);
tree.insert(739273592);
tree.insert(740979842);
tree.insert(748372480);
tree.insert(787141179);
tree.insert(793600478);
tree.insert(800170575);
tree.insert(807836244);
tree.insert(823728173);
tree.insert(831855739);
tree.insert(835837378);
tree.insert(875119575);
tree.insert(877793431);
tree.insert(882922919);
tree.insert(884493660);
tree.insert(955765273);
tree.insert(957837780);
tree.insert(962896438);
tree.insert(965252449);
tree.insert(967115107);
tree.insert(979751493);
tree.insert(981260932);
tree.insert(983317197);
tree.insert(989825442);
tree.insert(993154300);
Integer[] data = {-999652504, -994833500, -982524003, -940399452, -936114680, -934060852, -930422835, -917452553, -916556085, -916233467, -916145730, -915068749, -901759585, -900752544, -899080746, -896043869, -894065969, -886163280, -872492945, -871574175, -864942210, -850650980, -847482365, -832941162, -818278408, -816190525, -812683263, -810777795, -776420217, -774140267, -772366016, -741168528, -735299759, -728447024, -673051108, -671002070, -664303008, -660552247, -659740573, -658739418, -655131167, -649350945, -638948948, -626217939, -609259513, -606355944, -602067220, -586331629, -583546163, -580906167, -577855959, -577324773, -556904649, -553302702, -532519616, -523371473, -517704771, -507140830, -502660011, -500076699, -460512975, -441647211, -415960399, -404087667, -389387240, -378678579, -369165869, -337974303, -334889031, -333153306, -315734683, -312280898, -294566968, -292902288, -289015939, -279944823, -268942820, -266176555, -246921526, -246729886, -217016517, -214422915, -175094925, -162792708, -162182800, -159681818, -157938596, -156359453, -148571473, -140991682, -130549217, -129615380, -102663415, -102615304, -101678528, -80496439, -77182422, -75605599, -56213288, -26141521, -18656768, -16103185, -14922682, -12128444, 15718732, 24873098, 29657748, 44706185, 82504934, 117684965, 130178190, 139768012, 147392430, 166207419, 167557463, 168011411, 204647729, 226889829, 231215877, 235387802, 236832031, 247969798, 268571603, 276539560, 301251367, 306714594, 313960253, 340957603, 366360158, 368795073, 374194244, 409212962, 410349558, 419885864, 440624082, 450815678, 459402531, 462948822, 464820772, 468510057, 479476250, 483453494, 483686694, 489393490, 502799465, 525152134, 526150184, 532648591, 548887638, 560199285, 580325843, 581097862, 586310135, 587491183, 589000931, 591220372, 601413228, 616761349, 624737388, 649296541, 650831112, 654258200, 666137022, 672606168, 674688865, 677882124, 697781485, 698859914, 704431172, 711044796, 717047242, 717194947, 720257179, 727602087, 730742879, 738497733, 739273592, 740979842, 748372480, 787141179, 793600478, 800170575, 807836244, 823728173, 831855739, 835837378, 875119575, 877793431, 882922919, 884493660, 955765273, 957837780, 962896438, 965252449, 967115107, 979751493, 981260932, 983317197, 989825442, 993154300,  };
assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
assertTrue(tree.validateTree());
assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
assertEquals(tree.getSize(), 200);
}


