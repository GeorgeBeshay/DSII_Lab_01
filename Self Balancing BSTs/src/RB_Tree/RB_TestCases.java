package RB_Tree;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class RB_TestCases<T extends Comparable<T>> {

    public void insertFromList (List<T> data, RB_Tree<T> tree){
        for(T tempData : data)
            tree.insert(tempData);
    }

    @Test
    public void test_insertion_easy(){
        // Insertion Case => Easy case (Parent is black)
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {12, 10, 15};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(Arrays.asList(data), tree);
        Collections.sort(dataList);
        // -------------- Separator --------------
        assertEquals(tree.filter(tree.convert_to_list()), dataList);
        assertTrue(tree.validateTree());
    }

    @Test
    public void test_insertion_P_U_red(){
        // Insertion Case => Parent & Uncle are red
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {12, 10, 15, 5};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(Arrays.asList(data), tree);
        Collections.sort(dataList);
        // -------------- Separator --------------
        assertEquals(tree.filter(tree.convert_to_list()), dataList);
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(4, tree.getHeight());
    }

    @Test
    public void test_insertion_Par_R_Un_B_LL(){
        // Insertion Case => Parent R, Uncle B (Null) LL
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {12, 10, 5};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(Arrays.asList(data), tree);
        Collections.sort(dataList);
        // -------------- Separator --------------
        assertEquals(tree.filter(tree.convert_to_list()), dataList);
        assertTrue(tree.validateTree());
        assertEquals(2, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 10);
    }

    @Test
    public void test_insertion_Par_R_Un_B_RR(){
        // Insertion Case => Parent R, Uncle B (Null) RR
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {12, 15, 20};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(Arrays.asList(data), tree);
        Collections.sort(dataList);
        // -------------- Separator --------------
        assertEquals(tree.filter(tree.convert_to_list()), dataList);
        assertTrue(tree.validateTree());
        assertEquals(2, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 15);
    }

    @Test
    public void test_insertion_Par_R_Un_B_LR(){
        // Insertion Case => Parent R, Uncle B (Null) LR
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {17, 12, 15};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(Arrays.asList(data), tree);
        Collections.sort(dataList);
        // -------------- Separator --------------
        assertEquals(tree.filter(tree.convert_to_list()), dataList);
        assertTrue(tree.validateTree());
        assertEquals(2, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 15);
    }

    @Test
    public void test_insertion_Par_R_Un_B_RL(){
        // Insertion Case => Parent R, Uncle B (Null) RL
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 20, 15};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(Arrays.asList(data), tree);
        Collections.sort(dataList);
        // -------------- Separator --------------
        assertEquals(tree.filter(tree.convert_to_list()), dataList);
        assertTrue(tree.validateTree());
        assertEquals(2, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 15);
    }

    @Test
    public void test_deletion_easy(){
        // Deletion Case => Child is R or parent is R.
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(5);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(2, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 10);
    }

    @Test
    public void test_deletion_hard_case1_1(){
        // Deletion Case => U, V, S and its children are all black, parent is B
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 0};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(0); // to reach the required structure.
        tree.delete(5);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(2, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 10);
        assertEquals(tree.getSize(), 2);
    }

    @Test
    public void test_deletion_hard_case1_2(){
        // Deletion Case => U, V, S and its children are all black, parent is R
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 2, 7, 0};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(0); // to reach the required structure.
        tree.delete(2);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(4, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 10);
        assertEquals(tree.getSize(), 4);
    }

    @Test
    public void test_deletion_hard_case2_RR(){
        // Deletion Case => U, V, S are black and S's R child is red => Left rotation around the sibling
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 20};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(5);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 15);
        assertEquals(tree.getSize(), 3);
    }

    @Test
    public void test_deletion_hard_case2_LL(){
        // Deletion Case => U, V, S are black and S's R child is red => Right rotation around the sibling
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 0};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(15);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 5);
        assertEquals(tree.getSize(), 3);
    }

    @Test
    public void test_deletion_hard_case2_RL(){
        /*
         * Deletion Case => U, V, S are black and S's R child is red => Left rotation around
         * the child, right rotation around the sibling.
         */
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 12};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(5);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 12);
        assertEquals(tree.getSize(), 3);
    }

    @Test
    public void test_deletion_hard_case2_LR(){
        /*
         * Deletion Case => U, V, S are black and S's R child is red => right rotation around
         * the child, left rotation around the sibling.
         */
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 7};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(15);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(3, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 7);
        assertEquals(tree.getSize(), 3);
    }

    @Test
    public void test_deletion_hard_case2_RR_2(){
        /*
         * Deletion Case => U, V, S are black and S's R child is red => right rotation around
         * the sibling, alpha and parent are red
         */
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {15, 10, 20, 5, 12, 13, 11};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(5);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(5, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 15);
        assertEquals(tree.getSize(), 6);
    }

    @Test
    public void test_deletion_hard_case3(){
        /*
         * U, V are black, S is red.
         */
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        RB_TestCases<Integer> myClass = new RB_TestCases<Integer>();
        // -------------- Separator --------------
        Integer[] data = {10, 5, 15, 12, 20, 25};
        List<Integer> dataList = Arrays.asList(data);
        // -------------- Separator --------------
        myClass.insertFromList(dataList, tree);
        tree.delete(5);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertEquals(3, tree.getBlackHeight());
        assertEquals(4, tree.getHeight());
        assertEquals(tree.getRoot().getData(), 15);
        assertEquals(tree.getSize(), 5);
    }

    @Test
    public void test_batchInsert(){
        /*
         * Batch insert from a file containing 10k words randomly generated.
         */
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        // -------------- Separator --------------
        tree.batchInsert("batchInsert_testcase_1");
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= tree.getBlackHeight() * 2);
        assertEquals(tree.getSize(), 10000);
    }

    @Test
    public void test_batchInsert_batchDelete(){
        /*
         * Batch insert from a file containing 10k words randomly generated.
         */
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        // -------------- Separator --------------
        assertEquals(tree.batchInsert("batchInsert_testcase_2"), 10000);
        assertEquals(tree.batchInsert("batchInsert_testcase_2"), 0);
        assertEquals(tree.batchDelete("batchDelete_testcase_2"), 1403 - 70);
        // -------------- Separator --------------
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= tree.getBlackHeight() * 2);
        assertEquals(tree.getSize(), 10000 - 1403 + 70);
    }

    // --------- Random Test Cases ---------

    @Test
    public void random_testcase_0(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-459437035);
        tree.insert(691101152);
        tree.insert(-239998820);
        tree.insert(-659621775);
        tree.insert(-688975965);
        tree.insert(304608587);
        tree.insert(988453456);
        tree.insert(274644963);
        tree.insert(-817543199);
        tree.insert(-743481691);
        tree.insert(-208469845);
        tree.insert(956300001);
        tree.insert(249429800);
        tree.insert(-505801317);
        tree.insert(767755385);
        tree.insert(460311748);
        tree.insert(82859233);
        tree.insert(343453660);
        tree.insert(-749588985);
        tree.insert(-397614979);
        tree.insert(369834385);
        tree.insert(-579308827);
        tree.insert(15830643);
        tree.insert(484558074);
        tree.insert(-922647170);
        tree.insert(-832776860);
        tree.insert(-152377292);
        tree.insert(-917520767);
        tree.insert(362434703);
        tree.insert(-604169060);
        tree.insert(-576809434);
        tree.insert(82153152);
        tree.insert(-136451172);
        tree.insert(651680241);
        tree.insert(-473796306);
        tree.insert(64833498);
        tree.insert(-963234716);
        tree.insert(-20461152);
        tree.insert(588879572);
        tree.insert(-771881361);
        tree.insert(-32247443);
        tree.insert(58068449);
        tree.insert(-155945370);
        tree.insert(458137980);
        tree.insert(-890646561);
        tree.insert(-461425920);
        tree.insert(-784456288);
        tree.insert(951110404);
        tree.insert(265785744);
        tree.insert(-905060597);
        tree.insert(823347561);
        tree.insert(580984205);
        tree.insert(373217354);
        tree.insert(-340449141);
        tree.insert(275787256);
        tree.insert(-714027108);
        tree.insert(-753630796);
        tree.insert(-252030465);
        tree.insert(187043314);
        tree.insert(754826129);
        tree.insert(-685155630);
        tree.insert(-808587885);
        tree.insert(-295080231);
        tree.insert(261487214);
        tree.insert(879469922);
        tree.insert(966393555);
        tree.insert(890734277);
        tree.insert(111811143);
        tree.insert(-270386139);
        tree.insert(862651866);
        tree.insert(679523780);
        tree.insert(-196039279);
        tree.insert(-383037404);
        tree.insert(555507586);
        tree.insert(-973463094);
        tree.insert(-280220703);
        tree.insert(-387594738);
        tree.insert(727139619);
        tree.insert(-571419388);
        tree.insert(495214984);
        tree.insert(352374249);
        tree.insert(-397757806);
        tree.insert(495539964);
        tree.insert(940425226);
        tree.insert(756414917);
        tree.insert(802057532);
        tree.insert(941968491);
        tree.insert(-469802669);
        tree.insert(302247909);
        tree.insert(-390095816);
        tree.insert(-593494949);
        tree.insert(395501357);
        tree.insert(-720889045);
        tree.insert(715892307);
        tree.insert(-302095552);
        tree.insert(892715900);
        tree.insert(-923299104);
        tree.insert(-997125415);
        tree.insert(-418538831);
        tree.insert(425167493);
        tree.insert(79683622);
        tree.insert(-480166618);
        tree.insert(768493001);
        tree.insert(-575459667);
        tree.insert(35511059);
        tree.insert(-647978473);
        tree.insert(-290339989);
        tree.insert(897419118);
        tree.insert(-211822616);
        tree.insert(-608830073);
        tree.insert(-805443405);
        tree.insert(-499018011);
        tree.insert(-733053507);
        tree.insert(182360256);
        tree.insert(901415746);
        tree.insert(711217343);
        tree.insert(-504710922);
        tree.insert(-806921775);
        tree.insert(143173042);
        tree.insert(-380098156);
        tree.insert(-617716212);
        tree.insert(164383875);
        tree.insert(852616564);
        tree.insert(406701176);
        tree.insert(-702243483);
        tree.insert(329030934);
        tree.insert(-201317919);
        tree.insert(865016931);
        tree.insert(551744605);
        tree.insert(-434853294);
        tree.insert(-417726018);
        tree.insert(611913240);
        tree.insert(-361038286);
        tree.insert(-460627583);
        tree.insert(-767520600);
        tree.insert(418688263);
        tree.insert(819888720);
        tree.insert(676488783);
        tree.insert(-151058876);
        tree.insert(816596101);
        tree.insert(-810677410);
        tree.insert(491053032);
        tree.insert(-863133548);
        tree.insert(-121774982);
        tree.insert(-210966534);
        tree.insert(264865982);
        tree.insert(128350946);
        tree.insert(120014743);
        tree.insert(350752834);
        tree.insert(850279061);
        tree.insert(372664144);
        tree.insert(-65252840);
        tree.insert(-477240501);
        tree.insert(558078994);
        tree.insert(683472179);
        tree.insert(928533817);
        tree.insert(795330549);
        tree.insert(-701782349);
        tree.insert(851154146);
        tree.insert(-68996278);
        tree.insert(-754311591);
        tree.insert(-509204108);
        tree.insert(917969518);
        tree.insert(704873480);
        tree.insert(817276977);
        tree.insert(-218726223);
        tree.insert(-878427990);
        tree.insert(75057476);
        tree.insert(646620358);
        tree.insert(817689016);
        tree.insert(709844871);
        tree.insert(-901393882);
        tree.insert(631102041);
        tree.insert(555432745);
        tree.insert(-838957799);
        tree.insert(948146942);
        tree.insert(-650213044);
        tree.insert(457636041);
        tree.insert(-24312237);
        tree.insert(-936416539);
        tree.insert(-568672768);
        tree.insert(996318921);
        tree.insert(-605657997);
        tree.insert(-5943211);
        tree.insert(852797274);
        tree.insert(-82180896);
        tree.insert(12378312);
        tree.insert(54754138);
        tree.insert(87395991);
        tree.insert(194378420);
        tree.insert(-226227382);
        tree.insert(-843027436);
        tree.insert(-783107666);
        tree.insert(-488821268);
        tree.insert(354089361);
        tree.insert(566750298);
        tree.insert(-950563664);
        tree.insert(976915334);
        tree.insert(-937900989);
        tree.insert(-881176543);
        Integer[] data = {-997125415, -973463094, -963234716, -950563664, -937900989, -936416539, -923299104, -922647170, -917520767, -905060597, -901393882, -890646561, -881176543, -878427990, -863133548, -843027436, -838957799, -832776860, -817543199, -810677410, -808587885, -806921775, -805443405, -784456288, -783107666, -771881361, -767520600, -754311591, -753630796, -749588985, -743481691, -733053507, -720889045, -714027108, -702243483, -701782349, -688975965, -685155630, -659621775, -650213044, -647978473, -617716212, -608830073, -605657997, -604169060, -593494949, -579308827, -576809434, -575459667, -571419388, -568672768, -509204108, -505801317, -504710922, -499018011, -488821268, -480166618, -477240501, -473796306, -469802669, -461425920, -460627583, -459437035, -434853294, -418538831, -417726018, -397757806, -397614979, -390095816, -387594738, -383037404, -380098156, -361038286, -340449141, -302095552, -295080231, -290339989, -280220703, -270386139, -252030465, -239998820, -226227382, -218726223, -211822616, -210966534, -208469845, -201317919, -196039279, -155945370, -152377292, -151058876, -136451172, -121774982, -82180896, -68996278, -65252840, -32247443, -24312237, -20461152, -5943211, 12378312, 15830643, 35511059, 54754138, 58068449, 64833498, 75057476, 79683622, 82153152, 82859233, 87395991, 111811143, 120014743, 128350946, 143173042, 164383875, 182360256, 187043314, 194378420, 249429800, 261487214, 264865982, 265785744, 274644963, 275787256, 302247909, 304608587, 329030934, 343453660, 350752834, 352374249, 354089361, 362434703, 369834385, 372664144, 373217354, 395501357, 406701176, 418688263, 425167493, 457636041, 458137980, 460311748, 484558074, 491053032, 495214984, 495539964, 551744605, 555432745, 555507586, 558078994, 566750298, 580984205, 588879572, 611913240, 631102041, 646620358, 651680241, 676488783, 679523780, 683472179, 691101152, 704873480, 709844871, 711217343, 715892307, 727139619, 754826129, 756414917, 767755385, 768493001, 795330549, 802057532, 816596101, 817276977, 817689016, 819888720, 823347561, 850279061, 851154146, 852616564, 852797274, 862651866, 865016931, 879469922, 890734277, 892715900, 897419118, 901415746, 917969518, 928533817, 940425226, 941968491, 948146942, 951110404, 956300001, 966393555, 976915334, 988453456, 996318921,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_1(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(983482537);
        tree.insert(512985490);
        tree.insert(12711361);
        tree.insert(462557515);
        tree.insert(640195519);
        tree.insert(-751731049);
        tree.insert(-175011123);
        tree.insert(112282051);
        tree.insert(279007704);
        tree.insert(195788965);
        tree.insert(379677836);
        tree.insert(47153545);
        tree.insert(40983410);
        tree.insert(557260206);
        tree.insert(-625376777);
        tree.insert(-434328330);
        tree.insert(638655625);
        tree.insert(583965578);
        tree.insert(-554342086);
        tree.insert(-574306439);
        tree.insert(-114264916);
        tree.insert(-912539309);
        tree.insert(787117706);
        tree.insert(863818752);
        tree.insert(409724139);
        tree.insert(-924755669);
        tree.insert(803449531);
        tree.insert(-76076402);
        tree.insert(-568229129);
        tree.insert(811149542);
        tree.insert(932413201);
        tree.insert(-279026756);
        tree.insert(285588829);
        tree.insert(-266381383);
        tree.insert(11192411);
        tree.insert(615026806);
        tree.insert(-698938940);
        tree.insert(-552473009);
        tree.insert(378029758);
        tree.insert(-383188823);
        tree.insert(295377167);
        tree.insert(-368872375);
        tree.insert(-282647579);
        tree.insert(-23672268);
        tree.insert(816325836);
        tree.insert(-942718365);
        tree.insert(-208730660);
        tree.insert(285285219);
        tree.insert(-928819442);
        tree.insert(346379706);
        tree.insert(186154976);
        tree.insert(721235064);
        tree.insert(579336302);
        tree.insert(-707506738);
        tree.insert(-751531001);
        tree.insert(348861524);
        tree.insert(950240388);
        tree.insert(187244222);
        tree.insert(20732735);
        tree.insert(456752490);
        tree.insert(80202118);
        tree.insert(-324961511);
        tree.insert(902510561);
        tree.insert(740092204);
        tree.insert(-891299954);
        tree.insert(942801877);
        tree.insert(722051813);
        tree.insert(-798701483);
        tree.insert(-998274188);
        tree.insert(329530927);
        tree.insert(-874749930);
        tree.insert(-757124689);
        tree.insert(804931241);
        tree.insert(-313390761);
        tree.insert(-502486051);
        tree.insert(-675302334);
        tree.insert(607494089);
        tree.insert(-763963801);
        tree.insert(-402001018);
        tree.insert(892329072);
        tree.insert(928513214);
        tree.insert(280872102);
        tree.insert(-342112574);
        tree.insert(-94376808);
        tree.insert(930359202);
        tree.insert(750567656);
        tree.insert(-221268240);
        tree.insert(-140451326);
        tree.insert(-544391138);
        tree.insert(-163423422);
        tree.insert(686738489);
        tree.insert(453930409);
        tree.insert(-758915911);
        tree.insert(252875085);
        tree.insert(-364197304);
        tree.insert(-522546032);
        tree.insert(265167788);
        tree.insert(-911835993);
        tree.insert(-706052266);
        tree.insert(868692951);
        tree.insert(782076024);
        tree.insert(437198560);
        tree.insert(8344235);
        tree.insert(-658106771);
        tree.insert(621920946);
        tree.insert(731631308);
        tree.insert(147278707);
        tree.insert(371632157);
        tree.insert(239668514);
        tree.insert(-535724664);
        tree.insert(-710363086);
        tree.insert(155152862);
        tree.insert(-164308106);
        tree.insert(659603973);
        tree.insert(-512949561);
        tree.insert(-73662721);
        tree.insert(-154154678);
        tree.insert(609196924);
        tree.insert(36891041);
        tree.insert(-124922442);
        tree.insert(81279666);
        tree.insert(550867716);
        tree.insert(877980625);
        tree.insert(10037617);
        tree.insert(-384956910);
        tree.insert(-202646942);
        tree.insert(406689463);
        tree.insert(384382296);
        tree.insert(999952957);
        tree.insert(208418066);
        tree.insert(-678224659);
        tree.insert(-134780528);
        tree.insert(-903967831);
        tree.insert(-294282830);
        tree.insert(-277434857);
        tree.insert(15370050);
        tree.insert(820925746);
        tree.insert(-598894478);
        tree.insert(703000313);
        tree.insert(72414496);
        tree.insert(895823676);
        tree.insert(-507671408);
        tree.insert(-124212806);
        tree.insert(531561395);
        tree.insert(-595046074);
        tree.insert(-768164783);
        tree.insert(-515069218);
        tree.insert(-769448625);
        tree.insert(613029687);
        tree.insert(-979862381);
        tree.insert(-484625464);
        tree.insert(-839646964);
        tree.insert(188607642);
        tree.insert(726280871);
        tree.insert(270579288);
        tree.insert(-421153901);
        tree.insert(-250201052);
        tree.insert(126655555);
        tree.insert(145719525);
        tree.insert(-401094643);
        tree.insert(953125785);
        tree.insert(207403054);
        tree.insert(-374178411);
        tree.insert(-795220594);
        tree.insert(-631438039);
        tree.insert(43333244);
        tree.insert(-581878544);
        tree.insert(-219939910);
        tree.insert(6410413);
        tree.insert(-980294820);
        tree.insert(-158061431);
        tree.insert(-552956035);
        tree.insert(17165250);
        tree.insert(-660631033);
        tree.insert(-711514174);
        tree.insert(171170524);
        tree.insert(532624351);
        tree.insert(-84372527);
        tree.insert(901288957);
        tree.insert(-431894891);
        tree.insert(681562058);
        tree.insert(-42292577);
        tree.insert(796733161);
        tree.insert(482929106);
        tree.insert(-462851297);
        tree.insert(828192799);
        tree.insert(-809100871);
        tree.insert(-313633501);
        tree.insert(-620071784);
        tree.insert(462407043);
        tree.insert(140826766);
        tree.insert(-357649103);
        tree.insert(-666733705);
        tree.insert(-164295069);
        tree.insert(518891819);
        tree.insert(-321656544);
        tree.insert(50511007);
        tree.insert(-439843323);
        tree.insert(601362613);
        tree.insert(-658851802);
        Integer[] data = {-998274188, -980294820, -979862381, -942718365, -928819442, -924755669, -912539309, -911835993, -903967831, -891299954, -874749930, -839646964, -809100871, -798701483, -795220594, -769448625, -768164783, -763963801, -758915911, -757124689, -751731049, -751531001, -711514174, -710363086, -707506738, -706052266, -698938940, -678224659, -675302334, -666733705, -660631033, -658851802, -658106771, -631438039, -625376777, -620071784, -598894478, -595046074, -581878544, -574306439, -568229129, -554342086, -552956035, -552473009, -544391138, -535724664, -522546032, -515069218, -512949561, -507671408, -502486051, -484625464, -462851297, -439843323, -434328330, -431894891, -421153901, -402001018, -401094643, -384956910, -383188823, -374178411, -368872375, -364197304, -357649103, -342112574, -324961511, -321656544, -313633501, -313390761, -294282830, -282647579, -279026756, -277434857, -266381383, -250201052, -221268240, -219939910, -208730660, -202646942, -175011123, -164308106, -164295069, -163423422, -158061431, -154154678, -140451326, -134780528, -124922442, -124212806, -114264916, -94376808, -84372527, -76076402, -73662721, -42292577, -23672268, 6410413, 8344235, 10037617, 11192411, 12711361, 15370050, 17165250, 20732735, 36891041, 40983410, 43333244, 47153545, 50511007, 72414496, 80202118, 81279666, 112282051, 126655555, 140826766, 145719525, 147278707, 155152862, 171170524, 186154976, 187244222, 188607642, 195788965, 207403054, 208418066, 239668514, 252875085, 265167788, 270579288, 279007704, 280872102, 285285219, 285588829, 295377167, 329530927, 346379706, 348861524, 371632157, 378029758, 379677836, 384382296, 406689463, 409724139, 437198560, 453930409, 456752490, 462407043, 462557515, 482929106, 512985490, 518891819, 531561395, 532624351, 550867716, 557260206, 579336302, 583965578, 601362613, 607494089, 609196924, 613029687, 615026806, 621920946, 638655625, 640195519, 659603973, 681562058, 686738489, 703000313, 721235064, 722051813, 726280871, 731631308, 740092204, 750567656, 782076024, 787117706, 796733161, 803449531, 804931241, 811149542, 816325836, 820925746, 828192799, 863818752, 868692951, 877980625, 892329072, 895823676, 901288957, 902510561, 928513214, 930359202, 932413201, 942801877, 950240388, 953125785, 983482537, 999952957,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_2(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-705087025);
        tree.insert(373771699);
        tree.insert(-392661429);
        tree.insert(-921007120);
        tree.insert(-844176292);
        tree.insert(605754957);
        tree.insert(-591314924);
        tree.insert(214071712);
        tree.insert(-898009750);
        tree.insert(806844178);
        tree.insert(272333993);
        tree.insert(499910688);
        tree.insert(499991098);
        tree.insert(-941363786);
        tree.insert(208767125);
        tree.insert(845987411);
        tree.insert(-622012118);
        tree.insert(512981116);
        tree.insert(696388982);
        tree.insert(605947699);
        tree.insert(961615922);
        tree.insert(-788846715);
        tree.insert(-493141435);
        tree.insert(-860683979);
        tree.insert(-127422820);
        tree.insert(782883303);
        tree.insert(825783033);
        tree.insert(272845727);
        tree.insert(909164452);
        tree.insert(-724622802);
        tree.insert(179547335);
        tree.insert(741040775);
        tree.insert(788559753);
        tree.insert(-332081590);
        tree.insert(577200458);
        tree.insert(754977588);
        tree.insert(-215344274);
        tree.insert(909532146);
        tree.insert(-574053781);
        tree.insert(488045319);
        tree.insert(-712369106);
        tree.insert(43936459);
        tree.insert(45104363);
        tree.insert(-877831114);
        tree.insert(-925527577);
        tree.insert(-896930320);
        tree.insert(-839976737);
        tree.insert(-556325549);
        tree.insert(-11835615);
        tree.insert(-599653738);
        tree.insert(-724825913);
        tree.insert(-59962211);
        tree.insert(-427500243);
        tree.insert(-436589354);
        tree.insert(933272791);
        tree.insert(-528251494);
        tree.insert(70028298);
        tree.insert(343916336);
        tree.insert(559255999);
        tree.insert(-107036390);
        tree.insert(-395619200);
        tree.insert(214984429);
        tree.insert(361245260);
        tree.insert(-844157529);
        tree.insert(653038931);
        tree.insert(866069692);
        tree.insert(-426681983);
        tree.insert(519888260);
        tree.insert(519576175);
        tree.insert(-242542690);
        tree.insert(174569808);
        tree.insert(704514291);
        tree.insert(-829831765);
        tree.insert(-106715885);
        tree.insert(-338727505);
        tree.insert(-330897752);
        tree.insert(987987425);
        tree.insert(-95519049);
        tree.insert(-455087100);
        tree.insert(-273204770);
        tree.insert(504629141);
        tree.insert(-601153057);
        tree.insert(556578856);
        tree.insert(12636850);
        tree.insert(-583447167);
        tree.insert(-43401960);
        tree.insert(-967070381);
        tree.insert(47529239);
        tree.insert(-441425437);
        tree.insert(170100799);
        tree.insert(-155062023);
        tree.insert(1767558);
        tree.insert(-987352548);
        tree.insert(-935167670);
        tree.insert(774786139);
        tree.insert(-521871359);
        tree.insert(-937418955);
        tree.insert(335273047);
        tree.insert(-365542159);
        tree.insert(-76998758);
        tree.insert(481696267);
        tree.insert(788800141);
        tree.insert(211472529);
        tree.insert(-346841701);
        tree.insert(-997026258);
        tree.insert(423490162);
        tree.insert(-126716314);
        tree.insert(196407717);
        tree.insert(-876065387);
        tree.insert(593319296);
        tree.insert(844504473);
        tree.insert(-21515379);
        tree.insert(-668190470);
        tree.insert(-562439675);
        tree.insert(373172174);
        tree.insert(854764709);
        tree.insert(707325504);
        tree.insert(417473506);
        tree.insert(18418053);
        tree.insert(58633723);
        tree.insert(-310320800);
        tree.insert(-961645033);
        tree.insert(-986347836);
        tree.insert(100593819);
        tree.insert(285730348);
        tree.insert(-313077682);
        tree.insert(174787198);
        tree.insert(-885537900);
        tree.insert(-65098407);
        tree.insert(-103931860);
        tree.insert(-463782918);
        tree.insert(-386566587);
        tree.insert(685878566);
        tree.insert(546879741);
        tree.insert(139910795);
        tree.insert(61246025);
        tree.insert(-448156246);
        tree.insert(894972384);
        tree.insert(228733159);
        tree.insert(-938594488);
        tree.insert(731058149);
        tree.insert(-469391804);
        tree.insert(672311519);
        tree.insert(95252890);
        tree.insert(-12734474);
        tree.insert(74289294);
        tree.insert(718588744);
        tree.insert(434260187);
        tree.insert(-949316979);
        tree.insert(-128950657);
        tree.insert(-322985227);
        tree.insert(349987382);
        tree.insert(264143897);
        tree.insert(-100263525);
        tree.insert(-389792561);
        tree.insert(-180979640);
        tree.insert(-855289594);
        tree.insert(-379000870);
        tree.insert(-428604561);
        tree.insert(-400470272);
        tree.insert(-130262629);
        tree.insert(-100773682);
        tree.insert(398835408);
        tree.insert(-557896619);
        tree.insert(-760994882);
        tree.insert(-753926215);
        tree.insert(542094011);
        tree.insert(715221837);
        tree.insert(230991958);
        tree.insert(785069166);
        tree.insert(-259997301);
        tree.insert(-413402620);
        tree.insert(676740131);
        tree.insert(22819469);
        tree.insert(220315902);
        tree.insert(-221865956);
        tree.insert(386972181);
        tree.insert(153160362);
        tree.insert(-720552202);
        tree.insert(675325382);
        tree.insert(80487671);
        tree.insert(930632440);
        tree.insert(315489730);
        tree.insert(-573027041);
        tree.insert(358116420);
        tree.insert(-953079976);
        tree.insert(812751953);
        tree.insert(815386648);
        tree.insert(770155526);
        tree.insert(711700290);
        tree.insert(83612971);
        tree.insert(-368294154);
        tree.insert(650936476);
        tree.insert(-890234950);
        tree.insert(615432543);
        tree.insert(33956109);
        tree.insert(151304354);
        tree.insert(732938432);
        tree.insert(625634907);
        tree.insert(-755232359);
        Integer[] data = {-997026258, -987352548, -986347836, -967070381, -961645033, -953079976, -949316979, -941363786, -938594488, -937418955, -935167670, -925527577, -921007120, -898009750, -896930320, -890234950, -885537900, -877831114, -876065387, -860683979, -855289594, -844176292, -844157529, -839976737, -829831765, -788846715, -760994882, -755232359, -753926215, -724825913, -724622802, -720552202, -712369106, -705087025, -668190470, -622012118, -601153057, -599653738, -591314924, -583447167, -574053781, -573027041, -562439675, -557896619, -556325549, -528251494, -521871359, -493141435, -469391804, -463782918, -455087100, -448156246, -441425437, -436589354, -428604561, -427500243, -426681983, -413402620, -400470272, -395619200, -392661429, -389792561, -386566587, -379000870, -368294154, -365542159, -346841701, -338727505, -332081590, -330897752, -322985227, -313077682, -310320800, -273204770, -259997301, -242542690, -221865956, -215344274, -180979640, -155062023, -130262629, -128950657, -127422820, -126716314, -107036390, -106715885, -103931860, -100773682, -100263525, -95519049, -76998758, -65098407, -59962211, -43401960, -21515379, -12734474, -11835615, 1767558, 12636850, 18418053, 22819469, 33956109, 43936459, 45104363, 47529239, 58633723, 61246025, 70028298, 74289294, 80487671, 83612971, 95252890, 100593819, 139910795, 151304354, 153160362, 170100799, 174569808, 174787198, 179547335, 196407717, 208767125, 211472529, 214071712, 214984429, 220315902, 228733159, 230991958, 264143897, 272333993, 272845727, 285730348, 315489730, 335273047, 343916336, 349987382, 358116420, 361245260, 373172174, 373771699, 386972181, 398835408, 417473506, 423490162, 434260187, 481696267, 488045319, 499910688, 499991098, 504629141, 512981116, 519576175, 519888260, 542094011, 546879741, 556578856, 559255999, 577200458, 593319296, 605754957, 605947699, 615432543, 625634907, 650936476, 653038931, 672311519, 675325382, 676740131, 685878566, 696388982, 704514291, 707325504, 711700290, 715221837, 718588744, 731058149, 732938432, 741040775, 754977588, 770155526, 774786139, 782883303, 785069166, 788559753, 788800141, 806844178, 812751953, 815386648, 825783033, 844504473, 845987411, 854764709, 866069692, 894972384, 909164452, 909532146, 930632440, 933272791, 961615922, 987987425,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_3(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(340844071);
        tree.insert(-944666176);
        tree.insert(-34818598);
        tree.insert(-759521512);
        tree.insert(-265621634);
        tree.insert(344054065);
        tree.insert(376827841);
        tree.insert(930343510);
        tree.insert(-250437330);
        tree.insert(-396065253);
        tree.insert(-18656077);
        tree.insert(-375865049);
        tree.insert(243061557);
        tree.insert(844599591);
        tree.insert(681172126);
        tree.insert(-159462790);
        tree.insert(-211136323);
        tree.insert(-501948301);
        tree.insert(-314163399);
        tree.insert(-130859504);
        tree.insert(835376558);
        tree.insert(-240608398);
        tree.insert(210854803);
        tree.insert(110970100);
        tree.insert(-373969562);
        tree.insert(-547813525);
        tree.insert(9864793);
        tree.insert(239963401);
        tree.insert(-462041964);
        tree.insert(148399560);
        tree.insert(-540393469);
        tree.insert(171887904);
        tree.insert(310400684);
        tree.insert(-526943912);
        tree.insert(258130902);
        tree.insert(-972695633);
        tree.insert(453958408);
        tree.insert(-510755920);
        tree.insert(20650501);
        tree.insert(-488264025);
        tree.insert(177955824);
        tree.insert(336117021);
        tree.insert(134810789);
        tree.insert(-185844264);
        tree.insert(-796698943);
        tree.insert(758522483);
        tree.insert(-607088556);
        tree.insert(-847232245);
        tree.insert(-681013092);
        tree.insert(-29480064);
        tree.insert(-773162864);
        tree.insert(366095325);
        tree.insert(107704281);
        tree.insert(104227800);
        tree.insert(896560236);
        tree.insert(-387132727);
        tree.insert(-909590227);
        tree.insert(459423765);
        tree.insert(661569153);
        tree.insert(780802310);
        tree.insert(732609979);
        tree.insert(17883721);
        tree.insert(-658621589);
        tree.insert(-85949823);
        tree.insert(-894789014);
        tree.insert(-477035421);
        tree.insert(-556708174);
        tree.insert(-858860234);
        tree.insert(-582914420);
        tree.insert(-234773538);
        tree.insert(769630155);
        tree.insert(174098252);
        tree.insert(700417483);
        tree.insert(-984691603);
        tree.insert(22353451);
        tree.insert(600950570);
        tree.insert(372952514);
        tree.insert(9861963);
        tree.insert(-608724390);
        tree.insert(-25849405);
        tree.insert(-703955793);
        tree.insert(4731027);
        tree.insert(910777141);
        tree.insert(942544715);
        tree.insert(-526936925);
        tree.insert(989723265);
        tree.insert(-127554037);
        tree.insert(-661709270);
        tree.insert(53239347);
        tree.insert(778279174);
        tree.insert(-478630283);
        tree.insert(-620607008);
        tree.insert(151168535);
        tree.insert(56808060);
        tree.insert(141988442);
        tree.insert(-246709450);
        tree.insert(-30474487);
        tree.insert(-909772443);
        tree.insert(-305915264);
        tree.insert(912680172);
        tree.insert(547468698);
        tree.insert(427506919);
        tree.insert(633939735);
        tree.insert(842157512);
        tree.insert(-397044734);
        tree.insert(-487782359);
        tree.insert(183817776);
        tree.insert(-525052917);
        tree.insert(257862040);
        tree.insert(4244919);
        tree.insert(-962251401);
        tree.insert(-871066643);
        tree.insert(-806747026);
        tree.insert(945640893);
        tree.insert(193903580);
        tree.insert(582550827);
        tree.insert(119376239);
        tree.insert(345604994);
        tree.insert(-176411086);
        tree.insert(-90848003);
        tree.insert(551714768);
        tree.insert(-209748023);
        tree.insert(-313370940);
        tree.insert(-629029337);
        tree.insert(-180679458);
        tree.insert(915313184);
        tree.insert(-217250314);
        tree.insert(205667892);
        tree.insert(-664075963);
        tree.insert(-384115373);
        tree.insert(-558450920);
        tree.insert(255012972);
        tree.insert(-354219555);
        tree.insert(245318345);
        tree.insert(-239440395);
        tree.insert(-333728260);
        tree.insert(-826189358);
        tree.insert(175740888);
        tree.insert(-69403097);
        tree.insert(-859756480);
        tree.insert(861108406);
        tree.insert(57597268);
        tree.insert(-198143518);
        tree.insert(-437573508);
        tree.insert(569382893);
        tree.insert(414648376);
        tree.insert(-571062940);
        tree.insert(-566537798);
        tree.insert(415368270);
        tree.insert(783798334);
        tree.insert(-403216379);
        tree.insert(378866231);
        tree.insert(969704139);
        tree.insert(179300777);
        tree.insert(979575420);
        tree.insert(-382872620);
        tree.insert(-803953128);
        tree.insert(-521751061);
        tree.insert(-599822897);
        tree.insert(960008740);
        tree.insert(150885599);
        tree.insert(-913389798);
        tree.insert(-688455206);
        tree.insert(78272457);
        tree.insert(-763573815);
        tree.insert(759200770);
        tree.insert(56980926);
        tree.insert(-301161581);
        tree.insert(-772741100);
        tree.insert(-991959532);
        tree.insert(-167653170);
        tree.insert(690508761);
        tree.insert(4477957);
        tree.insert(81393526);
        tree.insert(-345189168);
        tree.insert(-76970874);
        tree.insert(-971548105);
        tree.insert(952780431);
        tree.insert(316530239);
        tree.insert(-751719203);
        tree.insert(-50854733);
        tree.insert(413749354);
        tree.insert(-916628949);
        tree.insert(-611987217);
        tree.insert(276794031);
        tree.insert(119177162);
        tree.insert(228812112);
        tree.insert(-68723184);
        tree.insert(730908639);
        tree.insert(831916621);
        tree.insert(-274302114);
        tree.insert(519577657);
        tree.insert(985422944);
        tree.insert(-807871833);
        tree.insert(-40871244);
        tree.insert(31741989);
        tree.insert(743142056);
        tree.insert(567535699);
        tree.insert(464120308);
        tree.insert(905467950);
        Integer[] data = {-991959532, -984691603, -972695633, -971548105, -962251401, -944666176, -916628949, -913389798, -909772443, -909590227, -894789014, -871066643, -859756480, -858860234, -847232245, -826189358, -807871833, -806747026, -803953128, -796698943, -773162864, -772741100, -763573815, -759521512, -751719203, -703955793, -688455206, -681013092, -664075963, -661709270, -658621589, -629029337, -620607008, -611987217, -608724390, -607088556, -599822897, -582914420, -571062940, -566537798, -558450920, -556708174, -547813525, -540393469, -526943912, -526936925, -525052917, -521751061, -510755920, -501948301, -488264025, -487782359, -478630283, -477035421, -462041964, -437573508, -403216379, -397044734, -396065253, -387132727, -384115373, -382872620, -375865049, -373969562, -354219555, -345189168, -333728260, -314163399, -313370940, -305915264, -301161581, -274302114, -265621634, -250437330, -246709450, -240608398, -239440395, -234773538, -217250314, -211136323, -209748023, -198143518, -185844264, -180679458, -176411086, -167653170, -159462790, -130859504, -127554037, -90848003, -85949823, -76970874, -69403097, -68723184, -50854733, -40871244, -34818598, -30474487, -29480064, -25849405, -18656077, 4244919, 4477957, 4731027, 9861963, 9864793, 17883721, 20650501, 22353451, 31741989, 53239347, 56808060, 56980926, 57597268, 78272457, 81393526, 104227800, 107704281, 110970100, 119177162, 119376239, 134810789, 141988442, 148399560, 150885599, 151168535, 171887904, 174098252, 175740888, 177955824, 179300777, 183817776, 193903580, 205667892, 210854803, 228812112, 239963401, 243061557, 245318345, 255012972, 257862040, 258130902, 276794031, 310400684, 316530239, 336117021, 340844071, 344054065, 345604994, 366095325, 372952514, 376827841, 378866231, 413749354, 414648376, 415368270, 427506919, 453958408, 459423765, 464120308, 519577657, 547468698, 551714768, 567535699, 569382893, 582550827, 600950570, 633939735, 661569153, 681172126, 690508761, 700417483, 730908639, 732609979, 743142056, 758522483, 759200770, 769630155, 778279174, 780802310, 783798334, 831916621, 835376558, 842157512, 844599591, 861108406, 896560236, 905467950, 910777141, 912680172, 915313184, 930343510, 942544715, 945640893, 952780431, 960008740, 969704139, 979575420, 985422944, 989723265,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_4(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-138703626);
        tree.insert(24923656);
        tree.insert(-379794102);
        tree.insert(240793560);
        tree.insert(605221244);
        tree.insert(-17950283);
        tree.insert(948593671);
        tree.insert(488825534);
        tree.insert(635463118);
        tree.insert(971050472);
        tree.insert(-393063870);
        tree.insert(-41010658);
        tree.insert(626330135);
        tree.insert(973454708);
        tree.insert(898345699);
        tree.insert(-303265477);
        tree.insert(-750793685);
        tree.insert(-57265620);
        tree.insert(-917153685);
        tree.insert(-220122536);
        tree.insert(-597986777);
        tree.insert(-708468193);
        tree.insert(-547678811);
        tree.insert(-149244621);
        tree.insert(408892774);
        tree.insert(-182812274);
        tree.insert(294281856);
        tree.insert(577368161);
        tree.insert(-738882799);
        tree.insert(639211227);
        tree.insert(791322293);
        tree.insert(-387594636);
        tree.insert(125230258);
        tree.insert(-177249520);
        tree.insert(-525169691);
        tree.insert(805644156);
        tree.insert(-440129054);
        tree.insert(-369423172);
        tree.insert(-787200291);
        tree.insert(-859861018);
        tree.insert(-613656060);
        tree.insert(-566788704);
        tree.insert(777635929);
        tree.insert(487713843);
        tree.insert(51159784);
        tree.insert(434508382);
        tree.insert(424424308);
        tree.insert(660724080);
        tree.insert(853772883);
        tree.insert(-173232554);
        tree.insert(-535530905);
        tree.insert(812974650);
        tree.insert(-541191987);
        tree.insert(-178517721);
        tree.insert(-37213936);
        tree.insert(-330571772);
        tree.insert(883139973);
        tree.insert(-678047398);
        tree.insert(875043713);
        tree.insert(34176705);
        tree.insert(909407045);
        tree.insert(654975922);
        tree.insert(-357452771);
        tree.insert(-368406062);
        tree.insert(140823951);
        tree.insert(-184024314);
        tree.insert(-445241814);
        tree.insert(907273906);
        tree.insert(-778374563);
        tree.insert(-743442569);
        tree.insert(-547268222);
        tree.insert(778158751);
        tree.insert(-984871765);
        tree.insert(753662359);
        tree.insert(-138365795);
        tree.insert(105266199);
        tree.insert(531490450);
        tree.insert(-247856819);
        tree.insert(-390426858);
        tree.insert(34275589);
        tree.insert(-61733906);
        tree.insert(-369202347);
        tree.insert(508471231);
        tree.insert(873333993);
        tree.insert(780484022);
        tree.insert(233656528);
        tree.insert(827265409);
        tree.insert(323530667);
        tree.insert(583971098);
        tree.insert(579286379);
        tree.insert(-342167835);
        tree.insert(181402831);
        tree.insert(102019742);
        tree.insert(-17212819);
        tree.insert(122785777);
        tree.insert(-297588602);
        tree.insert(385440214);
        tree.insert(-385082109);
        tree.insert(-932768408);
        tree.insert(-66605437);
        tree.insert(-231168625);
        tree.insert(-840910257);
        tree.insert(941218638);
        tree.insert(-493019650);
        tree.insert(-803073159);
        tree.insert(-276310202);
        tree.insert(-39310229);
        tree.insert(960209862);
        tree.insert(-870953407);
        tree.insert(-855862463);
        tree.insert(-452934740);
        tree.insert(493757641);
        tree.insert(981630321);
        tree.insert(441110762);
        tree.insert(510639455);
        tree.insert(490157393);
        tree.insert(-792616695);
        tree.insert(-584968061);
        tree.insert(915663886);
        tree.insert(-815379779);
        tree.insert(-380354229);
        tree.insert(591389289);
        tree.insert(-981921169);
        tree.insert(-694297744);
        tree.insert(24305607);
        tree.insert(-661501426);
        tree.insert(37132370);
        tree.insert(832840398);
        tree.insert(347633232);
        tree.insert(321787074);
        tree.insert(-239029420);
        tree.insert(753680645);
        tree.insert(-914425752);
        tree.insert(244189499);
        tree.insert(-248778658);
        tree.insert(581342329);
        tree.insert(857269445);
        tree.insert(878880532);
        tree.insert(923264232);
        tree.insert(-605876676);
        tree.insert(305098266);
        tree.insert(-401050765);
        tree.insert(-255609450);
        tree.insert(580994252);
        tree.insert(853099733);
        tree.insert(168880508);
        tree.insert(471399731);
        tree.insert(863031514);
        tree.insert(-598706298);
        tree.insert(605439915);
        tree.insert(982564858);
        tree.insert(-982872417);
        tree.insert(708003275);
        tree.insert(-672634360);
        tree.insert(237106485);
        tree.insert(774876589);
        tree.insert(571171553);
        tree.insert(783884380);
        tree.insert(971393857);
        tree.insert(481103334);
        tree.insert(-60065156);
        tree.insert(-859040348);
        tree.insert(-490684226);
        tree.insert(252915032);
        tree.insert(868359617);
        tree.insert(396239089);
        tree.insert(-115529186);
        tree.insert(706462900);
        tree.insert(-465716834);
        tree.insert(858692047);
        tree.insert(-887695830);
        tree.insert(-240042725);
        tree.insert(842138471);
        tree.insert(744159403);
        tree.insert(-355730365);
        tree.insert(771508548);
        tree.insert(-289283901);
        tree.insert(956266380);
        tree.insert(-595002865);
        tree.insert(-252498012);
        tree.insert(-925094218);
        tree.insert(604997028);
        tree.insert(824090445);
        tree.insert(-286991794);
        tree.insert(630593139);
        tree.insert(847101269);
        tree.insert(822061224);
        tree.insert(-341629633);
        tree.insert(700900476);
        tree.insert(94900588);
        tree.insert(521171411);
        tree.insert(-852941558);
        tree.insert(-911385624);
        tree.insert(845780445);
        tree.insert(87670403);
        tree.insert(-284890477);
        tree.insert(217530776);
        tree.insert(-892076594);
        tree.insert(739648316);
        tree.insert(-305114479);
        Integer[] data = {-984871765, -982872417, -981921169, -932768408, -925094218, -917153685, -914425752, -911385624, -892076594, -887695830, -870953407, -859861018, -859040348, -855862463, -852941558, -840910257, -815379779, -803073159, -792616695, -787200291, -778374563, -750793685, -743442569, -738882799, -708468193, -694297744, -678047398, -672634360, -661501426, -613656060, -605876676, -598706298, -597986777, -595002865, -584968061, -566788704, -547678811, -547268222, -541191987, -535530905, -525169691, -493019650, -490684226, -465716834, -452934740, -445241814, -440129054, -401050765, -393063870, -390426858, -387594636, -385082109, -380354229, -379794102, -369423172, -369202347, -368406062, -357452771, -355730365, -342167835, -341629633, -330571772, -305114479, -303265477, -297588602, -289283901, -286991794, -284890477, -276310202, -255609450, -252498012, -248778658, -247856819, -240042725, -239029420, -231168625, -220122536, -184024314, -182812274, -178517721, -177249520, -173232554, -149244621, -138703626, -138365795, -115529186, -66605437, -61733906, -60065156, -57265620, -41010658, -39310229, -37213936, -17950283, -17212819, 24305607, 24923656, 34176705, 34275589, 37132370, 51159784, 87670403, 94900588, 102019742, 105266199, 122785777, 125230258, 140823951, 168880508, 181402831, 217530776, 233656528, 237106485, 240793560, 244189499, 252915032, 294281856, 305098266, 321787074, 323530667, 347633232, 385440214, 396239089, 408892774, 424424308, 434508382, 441110762, 471399731, 481103334, 487713843, 488825534, 490157393, 493757641, 508471231, 510639455, 521171411, 531490450, 571171553, 577368161, 579286379, 580994252, 581342329, 583971098, 591389289, 604997028, 605221244, 605439915, 626330135, 630593139, 635463118, 639211227, 654975922, 660724080, 700900476, 706462900, 708003275, 739648316, 744159403, 753662359, 753680645, 771508548, 774876589, 777635929, 778158751, 780484022, 783884380, 791322293, 805644156, 812974650, 822061224, 824090445, 827265409, 832840398, 842138471, 845780445, 847101269, 853099733, 853772883, 857269445, 858692047, 863031514, 868359617, 873333993, 875043713, 878880532, 883139973, 898345699, 907273906, 909407045, 915663886, 923264232, 941218638, 948593671, 956266380, 960209862, 971050472, 971393857, 973454708, 981630321, 982564858,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_5(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-89777408);
        tree.insert(-480268351);
        tree.insert(-34650248);
        tree.insert(402470474);
        tree.insert(-226080219);
        tree.insert(-137330876);
        tree.insert(-549853072);
        tree.insert(397376279);
        tree.insert(-180468688);
        tree.insert(-242621351);
        tree.insert(930554496);
        tree.insert(170463763);
        tree.insert(-92484599);
        tree.insert(479752962);
        tree.insert(178736687);
        tree.insert(638933040);
        tree.insert(170748436);
        tree.insert(635773894);
        tree.insert(-143061959);
        tree.insert(-109316430);
        tree.insert(-166598873);
        tree.insert(-470920670);
        tree.insert(-643778118);
        tree.insert(904493417);
        tree.insert(-771739184);
        tree.insert(652475044);
        tree.insert(-127012192);
        tree.insert(806689301);
        tree.insert(-25665978);
        tree.insert(814673884);
        tree.insert(382362359);
        tree.insert(757172749);
        tree.insert(-56035605);
        tree.insert(-995207443);
        tree.insert(955126386);
        tree.insert(415937859);
        tree.insert(886721854);
        tree.insert(735978177);
        tree.insert(-862624610);
        tree.insert(185097797);
        tree.insert(-115813456);
        tree.insert(-872049661);
        tree.insert(807839658);
        tree.insert(620726186);
        tree.insert(201859011);
        tree.insert(-246296889);
        tree.insert(775500929);
        tree.insert(-367548982);
        tree.insert(-263248339);
        tree.insert(-383460701);
        tree.insert(726854027);
        tree.insert(-382926202);
        tree.insert(-173597412);
        tree.insert(81466433);
        tree.insert(846651306);
        tree.insert(-284616251);
        tree.insert(617367227);
        tree.insert(301965555);
        tree.insert(422854899);
        tree.insert(-248167083);
        tree.insert(-210392390);
        tree.insert(-606275479);
        tree.insert(-890516738);
        tree.insert(578535056);
        tree.insert(-583843533);
        tree.insert(-792104307);
        tree.insert(-932991918);
        tree.insert(715997349);
        tree.insert(-265270689);
        tree.insert(41786015);
        tree.insert(-228923406);
        tree.insert(481179566);
        tree.insert(-53405034);
        tree.insert(-453785950);
        tree.insert(-138849934);
        tree.insert(269887479);
        tree.insert(-426567827);
        tree.insert(-825781);
        tree.insert(-206652637);
        tree.insert(182403783);
        tree.insert(-157718420);
        tree.insert(45173832);
        tree.insert(-773876759);
        tree.insert(-914509374);
        tree.insert(-631977176);
        tree.insert(817153576);
        tree.insert(87423138);
        tree.insert(-394347505);
        tree.insert(-248933951);
        tree.insert(-246198453);
        tree.insert(903666852);
        tree.insert(469871855);
        tree.insert(-910031158);
        tree.insert(-746975742);
        tree.insert(-620581453);
        tree.insert(-278584695);
        tree.insert(207110611);
        tree.insert(-123991950);
        tree.insert(-806925833);
        tree.insert(582479604);
        tree.insert(-676427149);
        tree.insert(81780771);
        tree.insert(-818819972);
        tree.insert(947758620);
        tree.insert(194541577);
        tree.insert(796771753);
        tree.insert(-764235541);
        tree.insert(-991494034);
        tree.insert(102290448);
        tree.insert(237342849);
        tree.insert(-89595648);
        tree.insert(724938849);
        tree.insert(177426359);
        tree.insert(-490346709);
        tree.insert(-765611623);
        tree.insert(618206454);
        tree.insert(-573871498);
        tree.insert(-964940406);
        tree.insert(-437813927);
        tree.insert(-908550086);
        tree.insert(688308819);
        tree.insert(175360271);
        tree.insert(-522961379);
        tree.insert(-449181700);
        tree.insert(-110077653);
        tree.insert(367236763);
        tree.insert(913232974);
        tree.insert(531612368);
        tree.insert(-321833377);
        tree.insert(523642468);
        tree.insert(-970719878);
        tree.insert(-872051929);
        tree.insert(943505885);
        tree.insert(582373074);
        tree.insert(210425742);
        tree.insert(-147746829);
        tree.insert(695353592);
        tree.insert(172017468);
        tree.insert(-615989887);
        tree.insert(-227129303);
        tree.insert(397179036);
        tree.insert(946815090);
        tree.insert(-255663470);
        tree.insert(-200250738);
        tree.insert(-723885823);
        tree.insert(13369092);
        tree.insert(-73603563);
        tree.insert(322657777);
        tree.insert(319003720);
        tree.insert(199530030);
        tree.insert(-872209389);
        tree.insert(665103787);
        tree.insert(896422839);
        tree.insert(-605775427);
        tree.insert(-981768874);
        tree.insert(-488084148);
        tree.insert(-784345421);
        tree.insert(-891207098);
        tree.insert(750774877);
        tree.insert(-354030245);
        tree.insert(-285972808);
        tree.insert(-879948475);
        tree.insert(-844596217);
        tree.insert(594350707);
        tree.insert(571441527);
        tree.insert(404064665);
        tree.insert(-198631368);
        tree.insert(-703380256);
        tree.insert(-659361918);
        tree.insert(886552730);
        tree.insert(-954127421);
        tree.insert(-842320633);
        tree.insert(-981054877);
        tree.insert(-917503523);
        tree.insert(-621640604);
        tree.insert(-750746423);
        tree.insert(412926243);
        tree.insert(-521312808);
        tree.insert(920919608);
        tree.insert(986363832);
        tree.insert(-170321339);
        tree.insert(411030918);
        tree.insert(-296117731);
        tree.insert(-557160935);
        tree.insert(-391793569);
        tree.insert(841498719);
        tree.insert(756252007);
        tree.insert(-221988689);
        tree.insert(-308172444);
        tree.insert(-481433182);
        tree.insert(-240531293);
        tree.insert(133044505);
        tree.insert(-695828018);
        tree.insert(478079809);
        tree.insert(897953009);
        tree.insert(231601809);
        tree.insert(-145419124);
        tree.insert(-743626138);
        tree.insert(-110601477);
        tree.insert(207867796);
        Integer[] data = {-995207443, -991494034, -981768874, -981054877, -970719878, -964940406, -954127421, -932991918, -917503523, -914509374, -910031158, -908550086, -891207098, -890516738, -879948475, -872209389, -872051929, -872049661, -862624610, -844596217, -842320633, -818819972, -806925833, -792104307, -784345421, -773876759, -771739184, -765611623, -764235541, -750746423, -746975742, -743626138, -723885823, -703380256, -695828018, -676427149, -659361918, -643778118, -631977176, -621640604, -620581453, -615989887, -606275479, -605775427, -583843533, -573871498, -557160935, -549853072, -522961379, -521312808, -490346709, -488084148, -481433182, -480268351, -470920670, -453785950, -449181700, -437813927, -426567827, -394347505, -391793569, -383460701, -382926202, -367548982, -354030245, -321833377, -308172444, -296117731, -285972808, -284616251, -278584695, -265270689, -263248339, -255663470, -248933951, -248167083, -246296889, -246198453, -242621351, -240531293, -228923406, -227129303, -226080219, -221988689, -210392390, -206652637, -200250738, -198631368, -180468688, -173597412, -170321339, -166598873, -157718420, -147746829, -145419124, -143061959, -138849934, -137330876, -127012192, -123991950, -115813456, -110601477, -110077653, -109316430, -92484599, -89777408, -89595648, -73603563, -56035605, -53405034, -34650248, -25665978, -825781, 13369092, 41786015, 45173832, 81466433, 81780771, 87423138, 102290448, 133044505, 170463763, 170748436, 172017468, 175360271, 177426359, 178736687, 182403783, 185097797, 194541577, 199530030, 201859011, 207110611, 207867796, 210425742, 231601809, 237342849, 269887479, 301965555, 319003720, 322657777, 367236763, 382362359, 397179036, 397376279, 402470474, 404064665, 411030918, 412926243, 415937859, 422854899, 469871855, 478079809, 479752962, 481179566, 523642468, 531612368, 571441527, 578535056, 582373074, 582479604, 594350707, 617367227, 618206454, 620726186, 635773894, 638933040, 652475044, 665103787, 688308819, 695353592, 715997349, 724938849, 726854027, 735978177, 750774877, 756252007, 757172749, 775500929, 796771753, 806689301, 807839658, 814673884, 817153576, 841498719, 846651306, 886552730, 886721854, 896422839, 897953009, 903666852, 904493417, 913232974, 920919608, 930554496, 943505885, 946815090, 947758620, 955126386, 986363832,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_6(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-666817530);
        tree.insert(-339176008);
        tree.insert(-232852119);
        tree.insert(607760964);
        tree.insert(-274508323);
        tree.insert(132537359);
        tree.insert(310643931);
        tree.insert(987231594);
        tree.insert(-357479537);
        tree.insert(-299765463);
        tree.insert(949565004);
        tree.insert(-380080131);
        tree.insert(-718119049);
        tree.insert(-513923497);
        tree.insert(487794721);
        tree.insert(-498186550);
        tree.insert(-222957222);
        tree.insert(-606331621);
        tree.insert(-707143994);
        tree.insert(-699184207);
        tree.insert(278957833);
        tree.insert(355251374);
        tree.insert(-302630168);
        tree.insert(174556807);
        tree.insert(972255715);
        tree.insert(546812227);
        tree.insert(224889900);
        tree.insert(963752378);
        tree.insert(-865879923);
        tree.insert(995379458);
        tree.insert(467151814);
        tree.insert(-84604712);
        tree.insert(447098030);
        tree.insert(-844678137);
        tree.insert(562599752);
        tree.insert(-642598623);
        tree.insert(562888874);
        tree.insert(120501452);
        tree.insert(-262879750);
        tree.insert(372766015);
        tree.insert(-94974389);
        tree.insert(-523818595);
        tree.insert(-408689068);
        tree.insert(-275689340);
        tree.insert(150145980);
        tree.insert(-193004030);
        tree.insert(-25700792);
        tree.insert(6329572);
        tree.insert(812063011);
        tree.insert(-299736745);
        tree.insert(-806666827);
        tree.insert(306944591);
        tree.insert(118109833);
        tree.insert(458539881);
        tree.insert(-347862105);
        tree.insert(-883907570);
        tree.insert(-792423028);
        tree.insert(-801547596);
        tree.insert(337197149);
        tree.insert(1614206);
        tree.insert(345801960);
        tree.insert(369694073);
        tree.insert(98246878);
        tree.insert(734763682);
        tree.insert(-51488211);
        tree.insert(-536391005);
        tree.insert(198130727);
        tree.insert(-538221713);
        tree.insert(132052484);
        tree.insert(159795169);
        tree.insert(874584905);
        tree.insert(31884061);
        tree.insert(-54843186);
        tree.insert(131617731);
        tree.insert(-592746359);
        tree.insert(847458287);
        tree.insert(804046875);
        tree.insert(-141694564);
        tree.insert(190438075);
        tree.insert(725635205);
        tree.insert(-121222753);
        tree.insert(-21400487);
        tree.insert(-825599243);
        tree.insert(157874885);
        tree.insert(-918762782);
        tree.insert(536317057);
        tree.insert(908182341);
        tree.insert(-437583948);
        tree.insert(-251843763);
        tree.insert(-628977494);
        tree.insert(-304255100);
        tree.insert(502480033);
        tree.insert(166842329);
        tree.insert(638598742);
        tree.insert(174721310);
        tree.insert(184862292);
        tree.insert(-565163674);
        tree.insert(-333513465);
        tree.insert(-337684565);
        tree.insert(-551786400);
        tree.insert(-816439857);
        tree.insert(-869445940);
        tree.insert(113301669);
        tree.insert(-499066341);
        tree.insert(-708798336);
        tree.insert(-717446444);
        tree.insert(11584491);
        tree.insert(697568225);
        tree.insert(262141463);
        tree.insert(-853154244);
        tree.insert(-472131105);
        tree.insert(980954819);
        tree.insert(978856910);
        tree.insert(572797953);
        tree.insert(454700404);
        tree.insert(-125814729);
        tree.insert(593752984);
        tree.insert(440253528);
        tree.insert(533417565);
        tree.insert(-743114766);
        tree.insert(755655763);
        tree.insert(-36699182);
        tree.insert(930414744);
        tree.insert(-267684432);
        tree.insert(163204771);
        tree.insert(-189087867);
        tree.insert(573416103);
        tree.insert(-719195455);
        tree.insert(-325600764);
        tree.insert(-37577200);
        tree.insert(630125478);
        tree.insert(-508990619);
        tree.insert(-226806);
        tree.insert(-727150878);
        tree.insert(-911401286);
        tree.insert(880940695);
        tree.insert(-601100419);
        tree.insert(178627363);
        tree.insert(-153180305);
        tree.insert(633983710);
        tree.insert(-845916845);
        tree.insert(-439189501);
        tree.insert(420453563);
        tree.insert(-168804497);
        tree.insert(-712440232);
        tree.insert(813143096);
        tree.insert(456159181);
        tree.insert(832012991);
        tree.insert(-790134932);
        tree.insert(24771522);
        tree.insert(-680214031);
        tree.insert(420336367);
        tree.insert(268378164);
        tree.insert(-132446408);
        tree.insert(-928903746);
        tree.insert(267441521);
        tree.insert(-63364403);
        tree.insert(-242523484);
        tree.insert(733816727);
        tree.insert(88254471);
        tree.insert(102282735);
        tree.insert(-6010007);
        tree.insert(-38478483);
        tree.insert(-785929744);
        tree.insert(168625130);
        tree.insert(-120462631);
        tree.insert(476834536);
        tree.insert(523341913);
        tree.insert(37183314);
        tree.insert(818984396);
        tree.insert(921294918);
        tree.insert(640254516);
        tree.insert(-8513887);
        tree.insert(-307208080);
        tree.insert(308196295);
        tree.insert(76804729);
        tree.insert(-881334214);
        tree.insert(41103452);
        tree.insert(697625241);
        tree.insert(254981465);
        tree.insert(574005611);
        tree.insert(205451820);
        tree.insert(-905210832);
        tree.insert(-589695137);
        tree.insert(301740915);
        tree.insert(-968006553);
        tree.insert(952112502);
        tree.insert(489697515);
        tree.insert(439630162);
        tree.insert(-81824837);
        tree.insert(407783422);
        tree.insert(-159270646);
        tree.insert(-802560604);
        tree.insert(392232389);
        tree.insert(-250289970);
        tree.insert(975312933);
        tree.insert(-18127693);
        tree.insert(817824755);
        tree.insert(202438739);
        tree.insert(952103971);
        Integer[] data = {-968006553, -928903746, -918762782, -911401286, -905210832, -883907570, -881334214, -869445940, -865879923, -853154244, -845916845, -844678137, -825599243, -816439857, -806666827, -802560604, -801547596, -792423028, -790134932, -785929744, -743114766, -727150878, -719195455, -718119049, -717446444, -712440232, -708798336, -707143994, -699184207, -680214031, -666817530, -642598623, -628977494, -606331621, -601100419, -592746359, -589695137, -565163674, -551786400, -538221713, -536391005, -523818595, -513923497, -508990619, -499066341, -498186550, -472131105, -439189501, -437583948, -408689068, -380080131, -357479537, -347862105, -339176008, -337684565, -333513465, -325600764, -307208080, -304255100, -302630168, -299765463, -299736745, -275689340, -274508323, -267684432, -262879750, -251843763, -250289970, -242523484, -232852119, -222957222, -193004030, -189087867, -168804497, -159270646, -153180305, -141694564, -132446408, -125814729, -121222753, -120462631, -94974389, -84604712, -81824837, -63364403, -54843186, -51488211, -38478483, -37577200, -36699182, -25700792, -21400487, -18127693, -8513887, -6010007, -226806, 1614206, 6329572, 11584491, 24771522, 31884061, 37183314, 41103452, 76804729, 88254471, 98246878, 102282735, 113301669, 118109833, 120501452, 131617731, 132052484, 132537359, 150145980, 157874885, 159795169, 163204771, 166842329, 168625130, 174556807, 174721310, 178627363, 184862292, 190438075, 198130727, 202438739, 205451820, 224889900, 254981465, 262141463, 267441521, 268378164, 278957833, 301740915, 306944591, 308196295, 310643931, 337197149, 345801960, 355251374, 369694073, 372766015, 392232389, 407783422, 420336367, 420453563, 439630162, 440253528, 447098030, 454700404, 456159181, 458539881, 467151814, 476834536, 487794721, 489697515, 502480033, 523341913, 533417565, 536317057, 546812227, 562599752, 562888874, 572797953, 573416103, 574005611, 593752984, 607760964, 630125478, 633983710, 638598742, 640254516, 697568225, 697625241, 725635205, 733816727, 734763682, 755655763, 804046875, 812063011, 813143096, 817824755, 818984396, 832012991, 847458287, 874584905, 880940695, 908182341, 921294918, 930414744, 949565004, 952103971, 952112502, 963752378, 972255715, 975312933, 978856910, 980954819, 987231594, 995379458,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_7(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(706681967);
        tree.insert(588956207);
        tree.insert(-291685047);
        tree.insert(461516956);
        tree.insert(-849043228);
        tree.insert(-267919366);
        tree.insert(282540093);
        tree.insert(719319281);
        tree.insert(68263997);
        tree.insert(317140483);
        tree.insert(197959022);
        tree.insert(-602916408);
        tree.insert(818922789);
        tree.insert(-409777452);
        tree.insert(114939186);
        tree.insert(339464570);
        tree.insert(620970945);
        tree.insert(-170711338);
        tree.insert(-457960291);
        tree.insert(331718215);
        tree.insert(-607621908);
        tree.insert(-489840305);
        tree.insert(-473131600);
        tree.insert(-197100432);
        tree.insert(167686028);
        tree.insert(602012513);
        tree.insert(467052702);
        tree.insert(259463015);
        tree.insert(570264538);
        tree.insert(934074014);
        tree.insert(-272633210);
        tree.insert(547810629);
        tree.insert(-661866583);
        tree.insert(-302355630);
        tree.insert(-939488664);
        tree.insert(68519496);
        tree.insert(262257938);
        tree.insert(-940960758);
        tree.insert(-486989883);
        tree.insert(89913665);
        tree.insert(981909290);
        tree.insert(-308208510);
        tree.insert(516671813);
        tree.insert(-257306789);
        tree.insert(39496859);
        tree.insert(-617608931);
        tree.insert(-950979169);
        tree.insert(605365745);
        tree.insert(-742769610);
        tree.insert(-481637258);
        tree.insert(-554808615);
        tree.insert(-638859480);
        tree.insert(-531715220);
        tree.insert(-174060279);
        tree.insert(-800396094);
        tree.insert(-540567230);
        tree.insert(-124380329);
        tree.insert(-927526689);
        tree.insert(-105903916);
        tree.insert(897732354);
        tree.insert(154892970);
        tree.insert(-617395063);
        tree.insert(-292578255);
        tree.insert(55065665);
        tree.insert(-143059066);
        tree.insert(643110819);
        tree.insert(-588428549);
        tree.insert(-455394995);
        tree.insert(-467638337);
        tree.insert(104682672);
        tree.insert(936602324);
        tree.insert(817255100);
        tree.insert(847224050);
        tree.insert(-836214445);
        tree.insert(643085866);
        tree.insert(785742531);
        tree.insert(953869222);
        tree.insert(-367548990);
        tree.insert(97277582);
        tree.insert(-700996492);
        tree.insert(-214953047);
        tree.insert(269970690);
        tree.insert(-285378850);
        tree.insert(886524546);
        tree.insert(884920099);
        tree.insert(827469653);
        tree.insert(211491571);
        tree.insert(157280731);
        tree.insert(-80258409);
        tree.insert(934854605);
        tree.insert(500553555);
        tree.insert(942773759);
        tree.insert(398503928);
        tree.insert(-54123799);
        tree.insert(-582163188);
        tree.insert(-4750211);
        tree.insert(704729354);
        tree.insert(-940976345);
        tree.insert(-37775650);
        tree.insert(216688461);
        tree.insert(-734361082);
        tree.insert(864492629);
        tree.insert(745168134);
        tree.insert(76059375);
        tree.insert(931469112);
        tree.insert(78937323);
        tree.insert(798727157);
        tree.insert(-792059361);
        tree.insert(543306700);
        tree.insert(-713645624);
        tree.insert(546183028);
        tree.insert(-479862449);
        tree.insert(-806996958);
        tree.insert(146258653);
        tree.insert(-675752191);
        tree.insert(365675355);
        tree.insert(487114170);
        tree.insert(-66778468);
        tree.insert(-93702592);
        tree.insert(471994674);
        tree.insert(-608770562);
        tree.insert(751307713);
        tree.insert(-555642670);
        tree.insert(457944417);
        tree.insert(219314456);
        tree.insert(-250422392);
        tree.insert(-420791585);
        tree.insert(287993187);
        tree.insert(78128517);
        tree.insert(755043556);
        tree.insert(685160630);
        tree.insert(-681717968);
        tree.insert(-121530239);
        tree.insert(-934648347);
        tree.insert(373824825);
        tree.insert(180100648);
        tree.insert(-165481853);
        tree.insert(171773684);
        tree.insert(136558728);
        tree.insert(-774552709);
        tree.insert(599055092);
        tree.insert(586336399);
        tree.insert(-414585635);
        tree.insert(452800469);
        tree.insert(-477445919);
        tree.insert(2678149);
        tree.insert(-572302213);
        tree.insert(-756869366);
        tree.insert(-937319821);
        tree.insert(-873638504);
        tree.insert(904514673);
        tree.insert(12527102);
        tree.insert(-964036794);
        tree.insert(-428301334);
        tree.insert(813699378);
        tree.insert(231470109);
        tree.insert(-909574709);
        tree.insert(979707469);
        tree.insert(595788516);
        tree.insert(182004574);
        tree.insert(-491124677);
        tree.insert(-897313084);
        tree.insert(-718851562);
        tree.insert(111231343);
        tree.insert(352959675);
        tree.insert(223967963);
        tree.insert(-570799532);
        tree.insert(666131781);
        tree.insert(369832454);
        tree.insert(405950464);
        tree.insert(-246812190);
        tree.insert(237506628);
        tree.insert(-513934434);
        tree.insert(-670020494);
        tree.insert(-667451186);
        tree.insert(-860863187);
        tree.insert(678741444);
        tree.insert(-812915464);
        tree.insert(-389223531);
        tree.insert(280389181);
        tree.insert(-780465633);
        tree.insert(389552701);
        tree.insert(-337953556);
        tree.insert(-594940378);
        tree.insert(717796317);
        tree.insert(227607340);
        tree.insert(722013299);
        tree.insert(-956584023);
        tree.insert(312405827);
        tree.insert(-31795468);
        tree.insert(-996379783);
        tree.insert(653677408);
        tree.insert(-860509047);
        tree.insert(-432070576);
        tree.insert(-701745885);
        tree.insert(168460982);
        tree.insert(442360397);
        tree.insert(-486395149);
        tree.insert(874277079);
        tree.insert(-423455000);
        Integer[] data = {-996379783, -964036794, -956584023, -950979169, -940976345, -940960758, -939488664, -937319821, -934648347, -927526689, -909574709, -897313084, -873638504, -860863187, -860509047, -849043228, -836214445, -812915464, -806996958, -800396094, -792059361, -780465633, -774552709, -756869366, -742769610, -734361082, -718851562, -713645624, -701745885, -700996492, -681717968, -675752191, -670020494, -667451186, -661866583, -638859480, -617608931, -617395063, -608770562, -607621908, -602916408, -594940378, -588428549, -582163188, -572302213, -570799532, -555642670, -554808615, -540567230, -531715220, -513934434, -491124677, -489840305, -486989883, -486395149, -481637258, -479862449, -477445919, -473131600, -467638337, -457960291, -455394995, -432070576, -428301334, -423455000, -420791585, -414585635, -409777452, -389223531, -367548990, -337953556, -308208510, -302355630, -292578255, -291685047, -285378850, -272633210, -267919366, -257306789, -250422392, -246812190, -214953047, -197100432, -174060279, -170711338, -165481853, -143059066, -124380329, -121530239, -105903916, -93702592, -80258409, -66778468, -54123799, -37775650, -31795468, -4750211, 2678149, 12527102, 39496859, 55065665, 68263997, 68519496, 76059375, 78128517, 78937323, 89913665, 97277582, 104682672, 111231343, 114939186, 136558728, 146258653, 154892970, 157280731, 167686028, 168460982, 171773684, 180100648, 182004574, 197959022, 211491571, 216688461, 219314456, 223967963, 227607340, 231470109, 237506628, 259463015, 262257938, 269970690, 280389181, 282540093, 287993187, 312405827, 317140483, 331718215, 339464570, 352959675, 365675355, 369832454, 373824825, 389552701, 398503928, 405950464, 442360397, 452800469, 457944417, 461516956, 467052702, 471994674, 487114170, 500553555, 516671813, 543306700, 546183028, 547810629, 570264538, 586336399, 588956207, 595788516, 599055092, 602012513, 605365745, 620970945, 643085866, 643110819, 653677408, 666131781, 678741444, 685160630, 704729354, 706681967, 717796317, 719319281, 722013299, 745168134, 751307713, 755043556, 785742531, 798727157, 813699378, 817255100, 818922789, 827469653, 847224050, 864492629, 874277079, 884920099, 886524546, 897732354, 904514673, 931469112, 934074014, 934854605, 936602324, 942773759, 953869222, 979707469, 981909290,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_8(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-551005757);
        tree.insert(-253844600);
        tree.insert(-706732345);
        tree.insert(-177471397);
        tree.insert(-643856648);
        tree.insert(-441239292);
        tree.insert(596494837);
        tree.insert(-787878638);
        tree.insert(793448023);
        tree.insert(494490120);
        tree.insert(209196216);
        tree.insert(-95393613);
        tree.insert(219727434);
        tree.insert(682268993);
        tree.insert(549109792);
        tree.insert(840530367);
        tree.insert(796560551);
        tree.insert(130806297);
        tree.insert(-548669661);
        tree.insert(-764713203);
        tree.insert(869569857);
        tree.insert(-829107950);
        tree.insert(-562457105);
        tree.insert(44701072);
        tree.insert(907942434);
        tree.insert(-477999891);
        tree.insert(791479591);
        tree.insert(647022563);
        tree.insert(320517079);
        tree.insert(-188320593);
        tree.insert(712215262);
        tree.insert(-543619972);
        tree.insert(962400463);
        tree.insert(427982894);
        tree.insert(-27378132);
        tree.insert(909634507);
        tree.insert(-497496560);
        tree.insert(-424937563);
        tree.insert(541377789);
        tree.insert(-223889372);
        tree.insert(115643275);
        tree.insert(902338581);
        tree.insert(962230652);
        tree.insert(613228861);
        tree.insert(3966036);
        tree.insert(-497742240);
        tree.insert(-434292729);
        tree.insert(-159009555);
        tree.insert(427247370);
        tree.insert(700174376);
        tree.insert(-194950566);
        tree.insert(351619031);
        tree.insert(632891390);
        tree.insert(184956497);
        tree.insert(730411291);
        tree.insert(-248967675);
        tree.insert(465936951);
        tree.insert(175003552);
        tree.insert(566882033);
        tree.insert(716909815);
        tree.insert(-445395621);
        tree.insert(728381321);
        tree.insert(-207389918);
        tree.insert(993525159);
        tree.insert(-278605620);
        tree.insert(640036419);
        tree.insert(-272135931);
        tree.insert(526320933);
        tree.insert(-723854267);
        tree.insert(-78193979);
        tree.insert(-862980099);
        tree.insert(-32010770);
        tree.insert(860892478);
        tree.insert(-199147149);
        tree.insert(-889131771);
        tree.insert(-109091848);
        tree.insert(-958722516);
        tree.insert(204409608);
        tree.insert(-655717527);
        tree.insert(-693192495);
        tree.insert(818027197);
        tree.insert(-550231364);
        tree.insert(109217305);
        tree.insert(300711934);
        tree.insert(-877614208);
        tree.insert(-153707027);
        tree.insert(-613273396);
        tree.insert(-471134024);
        tree.insert(-975536040);
        tree.insert(-998184796);
        tree.insert(-258074171);
        tree.insert(-617727828);
        tree.insert(-672877702);
        tree.insert(-996750786);
        tree.insert(-68639514);
        tree.insert(828023505);
        tree.insert(-676170810);
        tree.insert(-565053137);
        tree.insert(-127473951);
        tree.insert(-724653901);
        tree.insert(-645333080);
        tree.insert(-421355770);
        tree.insert(166610171);
        tree.insert(-760440820);
        tree.insert(147989903);
        tree.insert(643170104);
        tree.insert(429617536);
        tree.insert(-73171008);
        tree.insert(-440793221);
        tree.insert(184267808);
        tree.insert(-688159914);
        tree.insert(-1449202);
        tree.insert(-232588669);
        tree.insert(965992367);
        tree.insert(169635469);
        tree.insert(122718748);
        tree.insert(147483369);
        tree.insert(807928413);
        tree.insert(932774508);
        tree.insert(-130654416);
        tree.insert(-15177353);
        tree.insert(55687898);
        tree.insert(-965577922);
        tree.insert(992087377);
        tree.insert(41646112);
        tree.insert(-586064759);
        tree.insert(-276603735);
        tree.insert(920141278);
        tree.insert(-156206657);
        tree.insert(-260626381);
        tree.insert(-21019955);
        tree.insert(-7638894);
        tree.insert(503727776);
        tree.insert(-427177645);
        tree.insert(-607449984);
        tree.insert(642960269);
        tree.insert(-133828087);
        tree.insert(50252530);
        tree.insert(215535315);
        tree.insert(112218305);
        tree.insert(913931212);
        tree.insert(-949155685);
        tree.insert(-453696874);
        tree.insert(357695770);
        tree.insert(-805422445);
        tree.insert(-965659432);
        tree.insert(-276496333);
        tree.insert(-610990032);
        tree.insert(-465715823);
        tree.insert(-367214332);
        tree.insert(-413626531);
        tree.insert(169271491);
        tree.insert(463439894);
        tree.insert(-746768128);
        tree.insert(-285997150);
        tree.insert(751690886);
        tree.insert(149127643);
        tree.insert(-510520947);
        tree.insert(-848455949);
        tree.insert(737322443);
        tree.insert(769689896);
        tree.insert(-654516930);
        tree.insert(-261455646);
        tree.insert(-440967969);
        tree.insert(242868978);
        tree.insert(-744657144);
        tree.insert(-901327793);
        tree.insert(461931392);
        tree.insert(765450817);
        tree.insert(-277711171);
        tree.insert(636048627);
        tree.insert(967786118);
        tree.insert(-230937267);
        tree.insert(729109407);
        tree.insert(-548270443);
        tree.insert(-356528063);
        tree.insert(671842942);
        tree.insert(274020461);
        tree.insert(-394828630);
        tree.insert(756456826);
        tree.insert(434610969);
        tree.insert(-431966996);
        tree.insert(923242851);
        tree.insert(76949751);
        tree.insert(372414527);
        tree.insert(429132076);
        tree.insert(662198161);
        tree.insert(-595929253);
        tree.insert(208998807);
        tree.insert(-156926723);
        tree.insert(827910760);
        tree.insert(809962130);
        tree.insert(-318072313);
        tree.insert(-455909851);
        tree.insert(-536600165);
        tree.insert(616882079);
        tree.insert(9049972);
        tree.insert(-553498624);
        tree.insert(569787818);
        tree.insert(691512374);
        Integer[] data = {-998184796, -996750786, -975536040, -965659432, -965577922, -958722516, -949155685, -901327793, -889131771, -877614208, -862980099, -848455949, -829107950, -805422445, -787878638, -764713203, -760440820, -746768128, -744657144, -724653901, -723854267, -706732345, -693192495, -688159914, -676170810, -672877702, -655717527, -654516930, -645333080, -643856648, -617727828, -613273396, -610990032, -607449984, -595929253, -586064759, -565053137, -562457105, -553498624, -551005757, -550231364, -548669661, -548270443, -543619972, -536600165, -510520947, -497742240, -497496560, -477999891, -471134024, -465715823, -455909851, -453696874, -445395621, -441239292, -440967969, -440793221, -434292729, -431966996, -427177645, -424937563, -421355770, -413626531, -394828630, -367214332, -356528063, -318072313, -285997150, -278605620, -277711171, -276603735, -276496333, -272135931, -261455646, -260626381, -258074171, -253844600, -248967675, -232588669, -230937267, -223889372, -207389918, -199147149, -194950566, -188320593, -177471397, -159009555, -156926723, -156206657, -153707027, -133828087, -130654416, -127473951, -109091848, -95393613, -78193979, -73171008, -68639514, -32010770, -27378132, -21019955, -15177353, -7638894, -1449202, 3966036, 9049972, 41646112, 44701072, 50252530, 55687898, 76949751, 109217305, 112218305, 115643275, 122718748, 130806297, 147483369, 147989903, 149127643, 166610171, 169271491, 169635469, 175003552, 184267808, 184956497, 204409608, 208998807, 209196216, 215535315, 219727434, 242868978, 274020461, 300711934, 320517079, 351619031, 357695770, 372414527, 427247370, 427982894, 429132076, 429617536, 434610969, 461931392, 463439894, 465936951, 494490120, 503727776, 526320933, 541377789, 549109792, 566882033, 569787818, 596494837, 613228861, 616882079, 632891390, 636048627, 640036419, 642960269, 643170104, 647022563, 662198161, 671842942, 682268993, 691512374, 700174376, 712215262, 716909815, 728381321, 729109407, 730411291, 737322443, 751690886, 756456826, 765450817, 769689896, 791479591, 793448023, 796560551, 807928413, 809962130, 818027197, 827910760, 828023505, 840530367, 860892478, 869569857, 902338581, 907942434, 909634507, 913931212, 920141278, 923242851, 932774508, 962230652, 962400463, 965992367, 967786118, 992087377, 993525159,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_9(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(352630033);
        tree.insert(594735664);
        tree.insert(260189498);
        tree.insert(283321174);
        tree.insert(778105711);
        tree.insert(-239468708);
        tree.insert(593047209);
        tree.insert(168555658);
        tree.insert(-5772582);
        tree.insert(-280664856);
        tree.insert(908979452);
        tree.insert(259240889);
        tree.insert(-7602896);
        tree.insert(-937133110);
        tree.insert(731549363);
        tree.insert(-219400564);
        tree.insert(430608741);
        tree.insert(-923389256);
        tree.insert(949992797);
        tree.insert(-338496820);
        tree.insert(543175542);
        tree.insert(882948553);
        tree.insert(-414685066);
        tree.insert(-271647920);
        tree.insert(554890230);
        tree.insert(701495657);
        tree.insert(142044111);
        tree.insert(504909472);
        tree.insert(379141209);
        tree.insert(684805152);
        tree.insert(285459568);
        tree.insert(-867728476);
        tree.insert(399982939);
        tree.insert(-840747690);
        tree.insert(-414608486);
        tree.insert(251726377);
        tree.insert(-468309504);
        tree.insert(-931038160);
        tree.insert(250795740);
        tree.insert(-243449939);
        tree.insert(73004737);
        tree.insert(637371788);
        tree.insert(661966448);
        tree.insert(746144713);
        tree.insert(-806221003);
        tree.insert(394266733);
        tree.insert(251321718);
        tree.insert(-290871537);
        tree.insert(986834660);
        tree.insert(-813481726);
        tree.insert(-356303693);
        tree.insert(248170664);
        tree.insert(615943209);
        tree.insert(-569690459);
        tree.insert(-589754969);
        tree.insert(-158436779);
        tree.insert(507123663);
        tree.insert(-591376756);
        tree.insert(-300915683);
        tree.insert(-182894142);
        tree.insert(73956526);
        tree.insert(-652724865);
        tree.insert(540803793);
        tree.insert(796210358);
        tree.insert(-5929229);
        tree.insert(-82358569);
        tree.insert(248165803);
        tree.insert(239816287);
        tree.insert(581757212);
        tree.insert(-545900262);
        tree.insert(-223537103);
        tree.insert(-879004185);
        tree.insert(-615706551);
        tree.insert(788675280);
        tree.insert(964872091);
        tree.insert(597317145);
        tree.insert(-371386834);
        tree.insert(-407680850);
        tree.insert(383202332);
        tree.insert(-518364630);
        tree.insert(-904004514);
        tree.insert(822010511);
        tree.insert(-914243296);
        tree.insert(16711813);
        tree.insert(-957392089);
        tree.insert(-271615100);
        tree.insert(198922309);
        tree.insert(278812232);
        tree.insert(-850432932);
        tree.insert(-358179482);
        tree.insert(758613342);
        tree.insert(-34991763);
        tree.insert(-298163739);
        tree.insert(-909561916);
        tree.insert(-977242040);
        tree.insert(-725006663);
        tree.insert(776425247);
        tree.insert(-397711508);
        tree.insert(-72716019);
        tree.insert(-150758408);
        tree.insert(104945928);
        tree.insert(-799085091);
        tree.insert(-262650012);
        tree.insert(664454867);
        tree.insert(-939154851);
        tree.insert(633370458);
        tree.insert(-80063859);
        tree.insert(342015882);
        tree.insert(79393132);
        tree.insert(409781972);
        tree.insert(-25487907);
        tree.insert(555615222);
        tree.insert(-254503062);
        tree.insert(627349524);
        tree.insert(844433181);
        tree.insert(511857286);
        tree.insert(235302321);
        tree.insert(3821438);
        tree.insert(-401936540);
        tree.insert(466073215);
        tree.insert(156266797);
        tree.insert(-915997250);
        tree.insert(556837629);
        tree.insert(78131614);
        tree.insert(733938949);
        tree.insert(-561842633);
        tree.insert(81543175);
        tree.insert(337059979);
        tree.insert(258543498);
        tree.insert(-417397694);
        tree.insert(-659238433);
        tree.insert(78567832);
        tree.insert(845633829);
        tree.insert(194959481);
        tree.insert(543566590);
        tree.insert(231478265);
        tree.insert(-897766023);
        tree.insert(817051560);
        tree.insert(170334857);
        tree.insert(872492542);
        tree.insert(-408579376);
        tree.insert(-364987051);
        tree.insert(222908428);
        tree.insert(-882923996);
        tree.insert(-743492267);
        tree.insert(279911003);
        tree.insert(364576275);
        tree.insert(-349502487);
        tree.insert(-1932578);
        tree.insert(665790508);
        tree.insert(-220873080);
        tree.insert(-616892421);
        tree.insert(-976019351);
        tree.insert(475005731);
        tree.insert(-216861312);
        tree.insert(-200944534);
        tree.insert(595203119);
        tree.insert(993402146);
        tree.insert(606473879);
        tree.insert(-593770211);
        tree.insert(-956393766);
        tree.insert(-753375275);
        tree.insert(-819684967);
        tree.insert(-887953620);
        tree.insert(-44067728);
        tree.insert(592077288);
        tree.insert(960528775);
        tree.insert(-967228208);
        tree.insert(-479687609);
        tree.insert(760687869);
        tree.insert(-684600179);
        tree.insert(-7502384);
        tree.insert(666955934);
        tree.insert(607127731);
        tree.insert(644049820);
        tree.insert(295618848);
        tree.insert(852512221);
        tree.insert(801080564);
        tree.insert(-97648261);
        tree.insert(13697094);
        tree.insert(134463178);
        tree.insert(-31975838);
        tree.insert(829116059);
        tree.insert(-725226949);
        tree.insert(-830179230);
        tree.insert(548187854);
        tree.insert(838687951);
        tree.insert(897358897);
        tree.insert(87596582);
        tree.insert(710672356);
        tree.insert(691108625);
        tree.insert(-397457368);
        tree.insert(-906106877);
        tree.insert(-379757779);
        tree.insert(-423348687);
        tree.insert(619907506);
        tree.insert(869641181);
        tree.insert(581887712);
        tree.insert(-125204152);
        tree.insert(-69714583);
        Integer[] data = {-977242040, -976019351, -967228208, -957392089, -956393766, -939154851, -937133110, -931038160, -923389256, -915997250, -914243296, -909561916, -906106877, -904004514, -897766023, -887953620, -882923996, -879004185, -867728476, -850432932, -840747690, -830179230, -819684967, -813481726, -806221003, -799085091, -753375275, -743492267, -725226949, -725006663, -684600179, -659238433, -652724865, -616892421, -615706551, -593770211, -591376756, -589754969, -569690459, -561842633, -545900262, -518364630, -479687609, -468309504, -423348687, -417397694, -414685066, -414608486, -408579376, -407680850, -401936540, -397711508, -397457368, -379757779, -371386834, -364987051, -358179482, -356303693, -349502487, -338496820, -300915683, -298163739, -290871537, -280664856, -271647920, -271615100, -262650012, -254503062, -243449939, -239468708, -223537103, -220873080, -219400564, -216861312, -200944534, -182894142, -158436779, -150758408, -125204152, -97648261, -82358569, -80063859, -72716019, -69714583, -44067728, -34991763, -31975838, -25487907, -7602896, -7502384, -5929229, -5772582, -1932578, 3821438, 13697094, 16711813, 73004737, 73956526, 78131614, 78567832, 79393132, 81543175, 87596582, 104945928, 134463178, 142044111, 156266797, 168555658, 170334857, 194959481, 198922309, 222908428, 231478265, 235302321, 239816287, 248165803, 248170664, 250795740, 251321718, 251726377, 258543498, 259240889, 260189498, 278812232, 279911003, 283321174, 285459568, 295618848, 337059979, 342015882, 352630033, 364576275, 379141209, 383202332, 394266733, 399982939, 409781972, 430608741, 466073215, 475005731, 504909472, 507123663, 511857286, 540803793, 543175542, 543566590, 548187854, 554890230, 555615222, 556837629, 581757212, 581887712, 592077288, 593047209, 594735664, 595203119, 597317145, 606473879, 607127731, 615943209, 619907506, 627349524, 633370458, 637371788, 644049820, 661966448, 664454867, 665790508, 666955934, 684805152, 691108625, 701495657, 710672356, 731549363, 733938949, 746144713, 758613342, 760687869, 776425247, 778105711, 788675280, 796210358, 801080564, 817051560, 822010511, 829116059, 838687951, 844433181, 845633829, 852512221, 869641181, 872492542, 882948553, 897358897, 908979452, 949992797, 960528775, 964872091, 986834660, 993402146,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_10(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(758856784);
        tree.insert(93674977);
        tree.insert(377101306);
        tree.insert(-302891112);
        tree.insert(856951124);
        tree.insert(42662089);
        tree.insert(-738671099);
        tree.insert(-762763472);
        tree.insert(-14236920);
        tree.insert(398016338);
        tree.insert(611648995);
        tree.insert(658394906);
        tree.insert(159381620);
        tree.insert(484697538);
        tree.insert(-225759103);
        tree.insert(627629124);
        tree.insert(-987459562);
        tree.insert(-54904708);
        tree.insert(-557734929);
        tree.insert(7710656);
        tree.insert(629186024);
        tree.insert(539974900);
        tree.insert(-279976964);
        tree.insert(19196167);
        tree.insert(-439432323);
        tree.insert(919647135);
        tree.insert(-753055934);
        tree.insert(-105834817);
        tree.insert(-287967804);
        tree.insert(-175467598);
        tree.insert(911949425);
        tree.insert(754156003);
        tree.insert(151168639);
        tree.insert(-407237483);
        tree.insert(-940292837);
        tree.insert(-387891067);
        tree.insert(-40457163);
        tree.insert(635571665);
        tree.insert(-323596832);
        tree.insert(624265653);
        tree.insert(758046037);
        tree.insert(813909985);
        tree.insert(565638420);
        tree.insert(-756561934);
        tree.insert(-825584697);
        tree.insert(-114743734);
        tree.insert(783032307);
        tree.insert(272317370);
        tree.insert(-261321505);
        tree.insert(762339587);
        tree.insert(776950740);
        tree.insert(-828390433);
        tree.insert(661433259);
        tree.insert(-834938625);
        tree.insert(-565659197);
        tree.insert(479951007);
        tree.insert(773833443);
        tree.insert(927033858);
        tree.insert(-134909642);
        tree.insert(155347134);
        tree.insert(639378852);
        tree.insert(365887656);
        tree.insert(-224496928);
        tree.insert(271614599);
        tree.insert(-416501597);
        tree.insert(349822229);
        tree.insert(860806170);
        tree.insert(819750489);
        tree.insert(634892786);
        tree.insert(636858391);
        tree.insert(-139789896);
        tree.insert(517812305);
        tree.insert(240979964);
        tree.insert(-734546443);
        tree.insert(240512257);
        tree.insert(-428606660);
        tree.insert(842381563);
        tree.insert(288101113);
        tree.insert(856109765);
        tree.insert(-771934957);
        tree.insert(-766744775);
        tree.insert(800020402);
        tree.insert(-628608858);
        tree.insert(-694922392);
        tree.insert(114766131);
        tree.insert(646985801);
        tree.insert(732824373);
        tree.insert(-750612573);
        tree.insert(-412731957);
        tree.insert(647863310);
        tree.insert(-271386645);
        tree.insert(239578562);
        tree.insert(833253879);
        tree.insert(358048824);
        tree.insert(-608538348);
        tree.insert(30170818);
        tree.insert(-134034878);
        tree.insert(196047322);
        tree.insert(624818209);
        tree.insert(14155819);
        tree.insert(214373601);
        tree.insert(-491621591);
        tree.insert(-828234107);
        tree.insert(-953410004);
        tree.insert(-194563702);
        tree.insert(703707357);
        tree.insert(29339879);
        tree.insert(946128809);
        tree.insert(245699777);
        tree.insert(-431372516);
        tree.insert(-928572064);
        tree.insert(-725780235);
        tree.insert(-391435243);
        tree.insert(587792817);
        tree.insert(-625759088);
        tree.insert(263439375);
        tree.insert(132825270);
        tree.insert(493419380);
        tree.insert(885583925);
        tree.insert(-232839999);
        tree.insert(-915540846);
        tree.insert(-671552147);
        tree.insert(-536489113);
        tree.insert(-182914927);
        tree.insert(-401436400);
        tree.insert(165574265);
        tree.insert(220101092);
        tree.insert(-936391329);
        tree.insert(-601099128);
        tree.insert(-544280490);
        tree.insert(947261803);
        tree.insert(158406626);
        tree.insert(-351377426);
        tree.insert(332775080);
        tree.insert(-551021644);
        tree.insert(576271929);
        tree.insert(316073294);
        tree.insert(681679471);
        tree.insert(563251667);
        tree.insert(287030788);
        tree.insert(-81289195);
        tree.insert(-277273231);
        tree.insert(-588476718);
        tree.insert(770476892);
        tree.insert(420459011);
        tree.insert(-824252832);
        tree.insert(202966246);
        tree.insert(-241087210);
        tree.insert(606143481);
        tree.insert(-248720712);
        tree.insert(-198171190);
        tree.insert(858212733);
        tree.insert(-519718285);
        tree.insert(30236668);
        tree.insert(-719906794);
        tree.insert(699675820);
        tree.insert(300576660);
        tree.insert(282038288);
        tree.insert(478978554);
        tree.insert(-562439169);
        tree.insert(-172667229);
        tree.insert(-884644906);
        tree.insert(-548312809);
        tree.insert(-837702023);
        tree.insert(-738048253);
        tree.insert(61180870);
        tree.insert(-528584899);
        tree.insert(749852240);
        tree.insert(497482350);
        tree.insert(453636167);
        tree.insert(-63959731);
        tree.insert(-815938881);
        tree.insert(-50537494);
        tree.insert(993063664);
        tree.insert(214531158);
        tree.insert(116278389);
        tree.insert(-531613063);
        tree.insert(-409184551);
        tree.insert(-872199633);
        tree.insert(149076270);
        tree.insert(286826187);
        tree.insert(423586416);
        tree.insert(-214369592);
        tree.insert(413349939);
        tree.insert(243971742);
        tree.insert(-277657777);
        tree.insert(-683854184);
        tree.insert(-679672859);
        tree.insert(377873163);
        tree.insert(589957250);
        tree.insert(613581561);
        tree.insert(-249329406);
        tree.insert(243307879);
        tree.insert(691024173);
        tree.insert(-584119703);
        tree.insert(-234969732);
        tree.insert(182651107);
        tree.insert(464780662);
        tree.insert(775750551);
        tree.insert(713656313);
        Integer[] data = {-987459562, -953410004, -940292837, -936391329, -928572064, -915540846, -884644906, -872199633, -837702023, -834938625, -828390433, -828234107, -825584697, -824252832, -815938881, -771934957, -766744775, -762763472, -756561934, -753055934, -750612573, -738671099, -738048253, -734546443, -725780235, -719906794, -694922392, -683854184, -679672859, -671552147, -628608858, -625759088, -608538348, -601099128, -588476718, -584119703, -565659197, -562439169, -557734929, -551021644, -548312809, -544280490, -536489113, -531613063, -528584899, -519718285, -491621591, -439432323, -431372516, -428606660, -416501597, -412731957, -409184551, -407237483, -401436400, -391435243, -387891067, -351377426, -323596832, -302891112, -287967804, -279976964, -277657777, -277273231, -271386645, -261321505, -249329406, -248720712, -241087210, -234969732, -232839999, -225759103, -224496928, -214369592, -198171190, -194563702, -182914927, -175467598, -172667229, -139789896, -134909642, -134034878, -114743734, -105834817, -81289195, -63959731, -54904708, -50537494, -40457163, -14236920, 7710656, 14155819, 19196167, 29339879, 30170818, 30236668, 42662089, 61180870, 93674977, 114766131, 116278389, 132825270, 149076270, 151168639, 155347134, 158406626, 159381620, 165574265, 182651107, 196047322, 202966246, 214373601, 214531158, 220101092, 239578562, 240512257, 240979964, 243307879, 243971742, 245699777, 263439375, 271614599, 272317370, 282038288, 286826187, 287030788, 288101113, 300576660, 316073294, 332775080, 349822229, 358048824, 365887656, 377101306, 377873163, 398016338, 413349939, 420459011, 423586416, 453636167, 464780662, 478978554, 479951007, 484697538, 493419380, 497482350, 517812305, 539974900, 563251667, 565638420, 576271929, 587792817, 589957250, 606143481, 611648995, 613581561, 624265653, 624818209, 627629124, 629186024, 634892786, 635571665, 636858391, 639378852, 646985801, 647863310, 658394906, 661433259, 681679471, 691024173, 699675820, 703707357, 713656313, 732824373, 749852240, 754156003, 758046037, 758856784, 762339587, 770476892, 773833443, 775750551, 776950740, 783032307, 800020402, 813909985, 819750489, 833253879, 842381563, 856109765, 856951124, 858212733, 860806170, 885583925, 911949425, 919647135, 927033858, 946128809, 947261803, 993063664,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_11(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(657569444);
        tree.insert(287364482);
        tree.insert(-664655856);
        tree.insert(-2525728);
        tree.insert(-841088950);
        tree.insert(717294756);
        tree.insert(-475856084);
        tree.insert(-329371174);
        tree.insert(-627772671);
        tree.insert(268515130);
        tree.insert(690708823);
        tree.insert(214245762);
        tree.insert(489637656);
        tree.insert(20413101);
        tree.insert(645847911);
        tree.insert(-917699599);
        tree.insert(819869456);
        tree.insert(741435916);
        tree.insert(370499794);
        tree.insert(-791709642);
        tree.insert(292902040);
        tree.insert(-244987758);
        tree.insert(454044064);
        tree.insert(994783430);
        tree.insert(-382476262);
        tree.insert(-830160315);
        tree.insert(263017602);
        tree.insert(134495236);
        tree.insert(-724236307);
        tree.insert(499107426);
        tree.insert(68311396);
        tree.insert(639395344);
        tree.insert(605652858);
        tree.insert(498004103);
        tree.insert(530701175);
        tree.insert(-852045878);
        tree.insert(625590274);
        tree.insert(137070496);
        tree.insert(604586341);
        tree.insert(958718558);
        tree.insert(749071552);
        tree.insert(173055072);
        tree.insert(146003192);
        tree.insert(554067823);
        tree.insert(620159405);
        tree.insert(-458196018);
        tree.insert(460750473);
        tree.insert(-175575854);
        tree.insert(-276430857);
        tree.insert(-158016077);
        tree.insert(-241668387);
        tree.insert(383627000);
        tree.insert(-695694216);
        tree.insert(869193899);
        tree.insert(-241113949);
        tree.insert(668273096);
        tree.insert(-688182609);
        tree.insert(-908172416);
        tree.insert(435206789);
        tree.insert(557505697);
        tree.insert(-393569841);
        tree.insert(80898337);
        tree.insert(401265808);
        tree.insert(-244773414);
        tree.insert(686084371);
        tree.insert(575194142);
        tree.insert(810398663);
        tree.insert(237263829);
        tree.insert(194388213);
        tree.insert(-418439575);
        tree.insert(866983849);
        tree.insert(914757877);
        tree.insert(-513493405);
        tree.insert(411584217);
        tree.insert(-146652514);
        tree.insert(-515878425);
        tree.insert(740120495);
        tree.insert(207000082);
        tree.insert(52463903);
        tree.insert(670919733);
        tree.insert(878252986);
        tree.insert(-470826927);
        tree.insert(498674336);
        tree.insert(588579158);
        tree.insert(-981033255);
        tree.insert(-588675500);
        tree.insert(345515712);
        tree.insert(478314686);
        tree.insert(669183023);
        tree.insert(-952524953);
        tree.insert(774208967);
        tree.insert(800183041);
        tree.insert(456764299);
        tree.insert(170345674);
        tree.insert(-113874403);
        tree.insert(-68027085);
        tree.insert(431483371);
        tree.insert(635395052);
        tree.insert(592759806);
        tree.insert(-801408301);
        tree.insert(955945174);
        tree.insert(205044663);
        tree.insert(-991172228);
        tree.insert(213129840);
        tree.insert(-306863098);
        tree.insert(-870311296);
        tree.insert(-696180768);
        tree.insert(-917883783);
        tree.insert(921849847);
        tree.insert(748337313);
        tree.insert(-154207698);
        tree.insert(8281192);
        tree.insert(-636091178);
        tree.insert(-523636016);
        tree.insert(560017735);
        tree.insert(-210881357);
        tree.insert(-109914166);
        tree.insert(-485121791);
        tree.insert(-220342812);
        tree.insert(-918488215);
        tree.insert(-555071961);
        tree.insert(785805055);
        tree.insert(-831329594);
        tree.insert(-887263006);
        tree.insert(631634221);
        tree.insert(-983535771);
        tree.insert(-851514325);
        tree.insert(575913631);
        tree.insert(660093636);
        tree.insert(-703452523);
        tree.insert(933292376);
        tree.insert(-846640519);
        tree.insert(-692787682);
        tree.insert(-520119572);
        tree.insert(127490454);
        tree.insert(554088591);
        tree.insert(-49585534);
        tree.insert(-322131724);
        tree.insert(-602067030);
        tree.insert(689527798);
        tree.insert(-761053516);
        tree.insert(-949651126);
        tree.insert(586678148);
        tree.insert(434786469);
        tree.insert(877238607);
        tree.insert(-760842592);
        tree.insert(-478554726);
        tree.insert(712193481);
        tree.insert(-128066728);
        tree.insert(-491342926);
        tree.insert(-122463376);
        tree.insert(669664075);
        tree.insert(80438454);
        tree.insert(627133908);
        tree.insert(229946693);
        tree.insert(-402359547);
        tree.insert(811372396);
        tree.insert(760170954);
        tree.insert(-226855883);
        tree.insert(-811358175);
        tree.insert(137704213);
        tree.insert(-752952054);
        tree.insert(221406219);
        tree.insert(-293649365);
        tree.insert(137126027);
        tree.insert(-642602902);
        tree.insert(-208541155);
        tree.insert(18224861);
        tree.insert(-965246415);
        tree.insert(891035996);
        tree.insert(563445526);
        tree.insert(272074018);
        tree.insert(267596048);
        tree.insert(-270006384);
        tree.insert(997387704);
        tree.insert(-536334506);
        tree.insert(-629484660);
        tree.insert(-72336467);
        tree.insert(285793581);
        tree.insert(841244115);
        tree.insert(-143138554);
        tree.insert(751233770);
        tree.insert(-926263486);
        tree.insert(343403530);
        tree.insert(-949307956);
        tree.insert(828677923);
        tree.insert(3648715);
        tree.insert(480675684);
        tree.insert(529787014);
        tree.insert(-354278241);
        tree.insert(763320479);
        tree.insert(-410826783);
        tree.insert(-986737081);
        tree.insert(625852710);
        tree.insert(88070584);
        tree.insert(699519253);
        tree.insert(-288449163);
        tree.insert(872079997);
        tree.insert(-571646211);
        tree.insert(-293442488);
        Integer[] data = {-991172228, -986737081, -983535771, -981033255, -965246415, -952524953, -949651126, -949307956, -926263486, -918488215, -917883783, -917699599, -908172416, -887263006, -870311296, -852045878, -851514325, -846640519, -841088950, -831329594, -830160315, -811358175, -801408301, -791709642, -761053516, -760842592, -752952054, -724236307, -703452523, -696180768, -695694216, -692787682, -688182609, -664655856, -642602902, -636091178, -629484660, -627772671, -602067030, -588675500, -571646211, -555071961, -536334506, -523636016, -520119572, -515878425, -513493405, -491342926, -485121791, -478554726, -475856084, -470826927, -458196018, -418439575, -410826783, -402359547, -393569841, -382476262, -354278241, -329371174, -322131724, -306863098, -293649365, -293442488, -288449163, -276430857, -270006384, -244987758, -244773414, -241668387, -241113949, -226855883, -220342812, -210881357, -208541155, -175575854, -158016077, -154207698, -146652514, -143138554, -128066728, -122463376, -113874403, -109914166, -72336467, -68027085, -49585534, -2525728, 3648715, 8281192, 18224861, 20413101, 52463903, 68311396, 80438454, 80898337, 88070584, 127490454, 134495236, 137070496, 137126027, 137704213, 146003192, 170345674, 173055072, 194388213, 205044663, 207000082, 213129840, 214245762, 221406219, 229946693, 237263829, 263017602, 267596048, 268515130, 272074018, 285793581, 287364482, 292902040, 343403530, 345515712, 370499794, 383627000, 401265808, 411584217, 431483371, 434786469, 435206789, 454044064, 456764299, 460750473, 478314686, 480675684, 489637656, 498004103, 498674336, 499107426, 529787014, 530701175, 554067823, 554088591, 557505697, 560017735, 563445526, 575194142, 575913631, 586678148, 588579158, 592759806, 604586341, 605652858, 620159405, 625590274, 625852710, 627133908, 631634221, 635395052, 639395344, 645847911, 657569444, 660093636, 668273096, 669183023, 669664075, 670919733, 686084371, 689527798, 690708823, 699519253, 712193481, 717294756, 740120495, 741435916, 748337313, 749071552, 751233770, 760170954, 763320479, 774208967, 785805055, 800183041, 810398663, 811372396, 819869456, 828677923, 841244115, 866983849, 869193899, 872079997, 877238607, 878252986, 891035996, 914757877, 921849847, 933292376, 955945174, 958718558, 994783430, 997387704,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_12(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-684667799);
        tree.insert(45652547);
        tree.insert(340373856);
        tree.insert(-956476151);
        tree.insert(654999996);
        tree.insert(-664798727);
        tree.insert(565717094);
        tree.insert(-652756724);
        tree.insert(956349776);
        tree.insert(-796383401);
        tree.insert(-766106489);
        tree.insert(739257321);
        tree.insert(-756294293);
        tree.insert(-257320838);
        tree.insert(-523840695);
        tree.insert(801770754);
        tree.insert(-674930932);
        tree.insert(-445510220);
        tree.insert(-180388122);
        tree.insert(574274862);
        tree.insert(994061418);
        tree.insert(715682407);
        tree.insert(642723052);
        tree.insert(-126178527);
        tree.insert(-492859455);
        tree.insert(-402476986);
        tree.insert(-243649502);
        tree.insert(-66226503);
        tree.insert(979851955);
        tree.insert(-158614908);
        tree.insert(668297766);
        tree.insert(-365366859);
        tree.insert(-755000396);
        tree.insert(-73194069);
        tree.insert(-290311106);
        tree.insert(113798942);
        tree.insert(10342535);
        tree.insert(-915089664);
        tree.insert(-295332080);
        tree.insert(-789910370);
        tree.insert(534052995);
        tree.insert(280962685);
        tree.insert(-384146624);
        tree.insert(743475870);
        tree.insert(-273341555);
        tree.insert(-287998300);
        tree.insert(947230578);
        tree.insert(-392718173);
        tree.insert(987965260);
        tree.insert(-171389315);
        tree.insert(234415880);
        tree.insert(301419039);
        tree.insert(84930555);
        tree.insert(-680776982);
        tree.insert(375317991);
        tree.insert(674509703);
        tree.insert(-13226677);
        tree.insert(137663685);
        tree.insert(-397383402);
        tree.insert(864399438);
        tree.insert(-451214281);
        tree.insert(526402947);
        tree.insert(550076541);
        tree.insert(-976971198);
        tree.insert(-112967281);
        tree.insert(149438049);
        tree.insert(309852334);
        tree.insert(719308943);
        tree.insert(-419282490);
        tree.insert(-593293700);
        tree.insert(-959341523);
        tree.insert(795495713);
        tree.insert(-413939861);
        tree.insert(381663198);
        tree.insert(-148936961);
        tree.insert(-745497204);
        tree.insert(-115144733);
        tree.insert(-696791052);
        tree.insert(76717363);
        tree.insert(657457102);
        tree.insert(568986142);
        tree.insert(353223137);
        tree.insert(-660916425);
        tree.insert(566027007);
        tree.insert(-977437088);
        tree.insert(-953595085);
        tree.insert(806698667);
        tree.insert(-8966317);
        tree.insert(917475726);
        tree.insert(-160005486);
        tree.insert(-181199739);
        tree.insert(-551075685);
        tree.insert(-752837950);
        tree.insert(824497246);
        tree.insert(-586217570);
        tree.insert(982887207);
        tree.insert(929762570);
        tree.insert(-591403365);
        tree.insert(-259319318);
        tree.insert(-886247527);
        tree.insert(381357366);
        tree.insert(-857253470);
        tree.insert(426601667);
        tree.insert(655826524);
        tree.insert(649926619);
        tree.insert(12630244);
        tree.insert(429573490);
        tree.insert(547296581);
        tree.insert(-223790911);
        tree.insert(175743522);
        tree.insert(-417623050);
        tree.insert(-250693142);
        tree.insert(-249325611);
        tree.insert(937524945);
        tree.insert(764906609);
        tree.insert(-881031253);
        tree.insert(370251672);
        tree.insert(305993824);
        tree.insert(-707354048);
        tree.insert(-301356590);
        tree.insert(101450006);
        tree.insert(370463091);
        tree.insert(148706885);
        tree.insert(43866137);
        tree.insert(304337577);
        tree.insert(-979132651);
        tree.insert(-221771926);
        tree.insert(8635842);
        tree.insert(-611333584);
        tree.insert(-626841773);
        tree.insert(19204041);
        tree.insert(930983132);
        tree.insert(198557826);
        tree.insert(26774747);
        tree.insert(-433168041);
        tree.insert(-472283733);
        tree.insert(-580171718);
        tree.insert(-438302172);
        tree.insert(524595390);
        tree.insert(18081078);
        tree.insert(614577542);
        tree.insert(-361293782);
        tree.insert(341300406);
        tree.insert(72152809);
        tree.insert(394985509);
        tree.insert(620060412);
        tree.insert(403741005);
        tree.insert(-559147836);
        tree.insert(30135704);
        tree.insert(642929575);
        tree.insert(-952803053);
        tree.insert(-50733908);
        tree.insert(521964142);
        tree.insert(412095528);
        tree.insert(-900216855);
        tree.insert(-258112671);
        tree.insert(619899895);
        tree.insert(28497020);
        tree.insert(974548097);
        tree.insert(-884087815);
        tree.insert(-474560467);
        tree.insert(835957501);
        tree.insert(-137826919);
        tree.insert(576428460);
        tree.insert(599908762);
        tree.insert(-229957363);
        tree.insert(290525422);
        tree.insert(-960284793);
        tree.insert(615689637);
        tree.insert(-685350945);
        tree.insert(132004347);
        tree.insert(-125214817);
        tree.insert(41290110);
        tree.insert(215595700);
        tree.insert(-548359152);
        tree.insert(758584989);
        tree.insert(657933990);
        tree.insert(725765567);
        tree.insert(434998569);
        tree.insert(-920080663);
        tree.insert(389616531);
        tree.insert(-840228169);
        tree.insert(604849389);
        tree.insert(-73807229);
        tree.insert(823978179);
        tree.insert(58079436);
        tree.insert(-954610467);
        tree.insert(397453780);
        tree.insert(877477846);
        tree.insert(757936544);
        tree.insert(-142264104);
        tree.insert(-766893872);
        tree.insert(582594349);
        tree.insert(968976839);
        tree.insert(915384456);
        tree.insert(-224494852);
        tree.insert(-200305693);
        tree.insert(-22750329);
        tree.insert(-304091869);
        tree.insert(552070650);
        Integer[] data = {-979132651, -977437088, -976971198, -960284793, -959341523, -956476151, -954610467, -953595085, -952803053, -920080663, -915089664, -900216855, -886247527, -884087815, -881031253, -857253470, -840228169, -796383401, -789910370, -766893872, -766106489, -756294293, -755000396, -752837950, -745497204, -707354048, -696791052, -685350945, -684667799, -680776982, -674930932, -664798727, -660916425, -652756724, -626841773, -611333584, -593293700, -591403365, -586217570, -580171718, -559147836, -551075685, -548359152, -523840695, -492859455, -474560467, -472283733, -451214281, -445510220, -438302172, -433168041, -419282490, -417623050, -413939861, -402476986, -397383402, -392718173, -384146624, -365366859, -361293782, -304091869, -301356590, -295332080, -290311106, -287998300, -273341555, -259319318, -258112671, -257320838, -250693142, -249325611, -243649502, -229957363, -224494852, -223790911, -221771926, -200305693, -181199739, -180388122, -171389315, -160005486, -158614908, -148936961, -142264104, -137826919, -126178527, -125214817, -115144733, -112967281, -73807229, -73194069, -66226503, -50733908, -22750329, -13226677, -8966317, 8635842, 10342535, 12630244, 18081078, 19204041, 26774747, 28497020, 30135704, 41290110, 43866137, 45652547, 58079436, 72152809, 76717363, 84930555, 101450006, 113798942, 132004347, 137663685, 148706885, 149438049, 175743522, 198557826, 215595700, 234415880, 280962685, 290525422, 301419039, 304337577, 305993824, 309852334, 340373856, 341300406, 353223137, 370251672, 370463091, 375317991, 381357366, 381663198, 389616531, 394985509, 397453780, 403741005, 412095528, 426601667, 429573490, 434998569, 521964142, 524595390, 526402947, 534052995, 547296581, 550076541, 552070650, 565717094, 566027007, 568986142, 574274862, 576428460, 582594349, 599908762, 604849389, 614577542, 615689637, 619899895, 620060412, 642723052, 642929575, 649926619, 654999996, 655826524, 657457102, 657933990, 668297766, 674509703, 715682407, 719308943, 725765567, 739257321, 743475870, 757936544, 758584989, 764906609, 795495713, 801770754, 806698667, 823978179, 824497246, 835957501, 864399438, 877477846, 915384456, 917475726, 929762570, 930983132, 937524945, 947230578, 956349776, 968976839, 974548097, 979851955, 982887207, 987965260, 994061418,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_13(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-262138906);
        tree.insert(-826867856);
        tree.insert(-807884267);
        tree.insert(-274829198);
        tree.insert(765110306);
        tree.insert(-869777249);
        tree.insert(-671302231);
        tree.insert(700641921);
        tree.insert(574260948);
        tree.insert(-755337165);
        tree.insert(-534532227);
        tree.insert(947123463);
        tree.insert(521371339);
        tree.insert(-314686481);
        tree.insert(535701638);
        tree.insert(-464622885);
        tree.insert(-659389440);
        tree.insert(496373122);
        tree.insert(506740405);
        tree.insert(-407080826);
        tree.insert(-411939867);
        tree.insert(992936078);
        tree.insert(-507343090);
        tree.insert(222770034);
        tree.insert(-192630265);
        tree.insert(716490084);
        tree.insert(668153099);
        tree.insert(738852971);
        tree.insert(-285006228);
        tree.insert(-830519908);
        tree.insert(980264843);
        tree.insert(-490993014);
        tree.insert(320960012);
        tree.insert(595029165);
        tree.insert(-36027633);
        tree.insert(314483304);
        tree.insert(371394399);
        tree.insert(675733087);
        tree.insert(-413656119);
        tree.insert(-708060816);
        tree.insert(-837732623);
        tree.insert(830090074);
        tree.insert(-658081871);
        tree.insert(-103270593);
        tree.insert(998634113);
        tree.insert(-914071149);
        tree.insert(311259369);
        tree.insert(98552538);
        tree.insert(-378241045);
        tree.insert(-500413540);
        tree.insert(-215675907);
        tree.insert(644190612);
        tree.insert(-50791560);
        tree.insert(-596160786);
        tree.insert(434196836);
        tree.insert(-166207088);
        tree.insert(371368229);
        tree.insert(805588369);
        tree.insert(58266052);
        tree.insert(-440491563);
        tree.insert(-651346050);
        tree.insert(615473252);
        tree.insert(233149859);
        tree.insert(-57729243);
        tree.insert(160069915);
        tree.insert(-727235265);
        tree.insert(-626653961);
        tree.insert(880435062);
        tree.insert(657257250);
        tree.insert(743882906);
        tree.insert(974783754);
        tree.insert(35129005);
        tree.insert(75901705);
        tree.insert(-370655246);
        tree.insert(173184280);
        tree.insert(-651002240);
        tree.insert(240935535);
        tree.insert(895500958);
        tree.insert(22026745);
        tree.insert(-373163028);
        tree.insert(-727537791);
        tree.insert(-750646868);
        tree.insert(623757412);
        tree.insert(214758163);
        tree.insert(-758918315);
        tree.insert(437249175);
        tree.insert(575705306);
        tree.insert(-572796883);
        tree.insert(309696287);
        tree.insert(-106886744);
        tree.insert(-1550320);
        tree.insert(-958372776);
        tree.insert(705725014);
        tree.insert(-878001285);
        tree.insert(326955911);
        tree.insert(-154963441);
        tree.insert(-865447957);
        tree.insert(700269598);
        tree.insert(-432451775);
        tree.insert(577831105);
        tree.insert(905077721);
        tree.insert(785917876);
        tree.insert(930109617);
        tree.insert(-362501425);
        tree.insert(-174964254);
        tree.insert(-641773837);
        tree.insert(626240488);
        tree.insert(-31028319);
        tree.insert(191548753);
        tree.insert(-727936579);
        tree.insert(-406857393);
        tree.insert(-829830571);
        tree.insert(929134695);
        tree.insert(-915569723);
        tree.insert(-913940347);
        tree.insert(45920778);
        tree.insert(-511560919);
        tree.insert(-11318287);
        tree.insert(961352136);
        tree.insert(-259107389);
        tree.insert(911431307);
        tree.insert(848718154);
        tree.insert(-78387008);
        tree.insert(-987209900);
        tree.insert(-872205825);
        tree.insert(304045976);
        tree.insert(-34158326);
        tree.insert(176919052);
        tree.insert(-828963956);
        tree.insert(-248610086);
        tree.insert(289137403);
        tree.insert(612879053);
        tree.insert(775093434);
        tree.insert(725002003);
        tree.insert(665131896);
        tree.insert(328483861);
        tree.insert(-406021516);
        tree.insert(592664312);
        tree.insert(-779446677);
        tree.insert(-527282154);
        tree.insert(-437293127);
        tree.insert(999543960);
        tree.insert(419672562);
        tree.insert(554969525);
        tree.insert(888068947);
        tree.insert(20285086);
        tree.insert(997410509);
        tree.insert(643180264);
        tree.insert(-758136498);
        tree.insert(410959357);
        tree.insert(369498946);
        tree.insert(-749149741);
        tree.insert(-937650338);
        tree.insert(-6621635);
        tree.insert(454996246);
        tree.insert(128141770);
        tree.insert(795885292);
        tree.insert(-866462462);
        tree.insert(-415692089);
        tree.insert(316040561);
        tree.insert(743840932);
        tree.insert(-775565026);
        tree.insert(719487477);
        tree.insert(-867956790);
        tree.insert(-252492002);
        tree.insert(-725883162);
        tree.insert(580469807);
        tree.insert(41816488);
        tree.insert(-554583160);
        tree.insert(-112780460);
        tree.insert(73061807);
        tree.insert(821500763);
        tree.insert(969954986);
        tree.insert(230001429);
        tree.insert(-416706349);
        tree.insert(103660291);
        tree.insert(513445045);
        tree.insert(593659847);
        tree.insert(701652592);
        tree.insert(72398508);
        tree.insert(-639666543);
        tree.insert(-910779446);
        tree.insert(-565547372);
        tree.insert(734604009);
        tree.insert(-405818144);
        tree.insert(57927188);
        tree.insert(-968247296);
        tree.insert(-882503638);
        tree.insert(425181664);
        tree.insert(274925157);
        tree.insert(596209465);
        tree.insert(-905153072);
        tree.insert(-55831494);
        tree.insert(-879625869);
        tree.insert(544735531);
        tree.insert(450081908);
        tree.insert(187747881);
        tree.insert(-678017713);
        tree.insert(66400803);
        tree.insert(465705728);
        Integer[] data = {-987209900, -968247296, -958372776, -937650338, -915569723, -914071149, -913940347, -910779446, -905153072, -882503638, -879625869, -878001285, -872205825, -869777249, -867956790, -866462462, -865447957, -837732623, -830519908, -829830571, -828963956, -826867856, -807884267, -779446677, -775565026, -758918315, -758136498, -755337165, -750646868, -749149741, -727936579, -727537791, -727235265, -725883162, -708060816, -678017713, -671302231, -659389440, -658081871, -651346050, -651002240, -641773837, -639666543, -626653961, -596160786, -572796883, -565547372, -554583160, -534532227, -527282154, -511560919, -507343090, -500413540, -490993014, -464622885, -440491563, -437293127, -432451775, -416706349, -415692089, -413656119, -411939867, -407080826, -406857393, -406021516, -405818144, -378241045, -373163028, -370655246, -362501425, -314686481, -285006228, -274829198, -262138906, -259107389, -252492002, -248610086, -215675907, -192630265, -174964254, -166207088, -154963441, -112780460, -106886744, -103270593, -78387008, -57729243, -55831494, -50791560, -36027633, -34158326, -31028319, -11318287, -6621635, -1550320, 20285086, 22026745, 35129005, 41816488, 45920778, 57927188, 58266052, 66400803, 72398508, 73061807, 75901705, 98552538, 103660291, 128141770, 160069915, 173184280, 176919052, 187747881, 191548753, 214758163, 222770034, 230001429, 233149859, 240935535, 274925157, 289137403, 304045976, 309696287, 311259369, 314483304, 316040561, 320960012, 326955911, 328483861, 369498946, 371368229, 371394399, 410959357, 419672562, 425181664, 434196836, 437249175, 450081908, 454996246, 465705728, 496373122, 506740405, 513445045, 521371339, 535701638, 544735531, 554969525, 574260948, 575705306, 577831105, 580469807, 592664312, 593659847, 595029165, 596209465, 612879053, 615473252, 623757412, 626240488, 643180264, 644190612, 657257250, 665131896, 668153099, 675733087, 700269598, 700641921, 701652592, 705725014, 716490084, 719487477, 725002003, 734604009, 738852971, 743840932, 743882906, 765110306, 775093434, 785917876, 795885292, 805588369, 821500763, 830090074, 848718154, 880435062, 888068947, 895500958, 905077721, 911431307, 929134695, 930109617, 947123463, 961352136, 969954986, 974783754, 980264843, 992936078, 997410509, 998634113, 999543960,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_14(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(171076793);
        tree.insert(-724821239);
        tree.insert(-641018922);
        tree.insert(-569129938);
        tree.insert(257149941);
        tree.insert(-386154460);
        tree.insert(-338073621);
        tree.insert(-239462592);
        tree.insert(745540695);
        tree.insert(297774172);
        tree.insert(-931069890);
        tree.insert(-985321802);
        tree.insert(-765450701);
        tree.insert(-618690825);
        tree.insert(-232320072);
        tree.insert(438624646);
        tree.insert(-606322575);
        tree.insert(-823879191);
        tree.insert(323870960);
        tree.insert(7846556);
        tree.insert(-996988462);
        tree.insert(114397082);
        tree.insert(132437624);
        tree.insert(-436089696);
        tree.insert(371302234);
        tree.insert(-925867796);
        tree.insert(972061912);
        tree.insert(893074630);
        tree.insert(-285008166);
        tree.insert(572516421);
        tree.insert(-709341423);
        tree.insert(-354436879);
        tree.insert(336656003);
        tree.insert(202931909);
        tree.insert(578279971);
        tree.insert(-737991898);
        tree.insert(337529651);
        tree.insert(309811675);
        tree.insert(411544256);
        tree.insert(-188466979);
        tree.insert(386680075);
        tree.insert(-404229490);
        tree.insert(-567171844);
        tree.insert(-239117907);
        tree.insert(-106484619);
        tree.insert(-833837517);
        tree.insert(23695734);
        tree.insert(979253387);
        tree.insert(-79549136);
        tree.insert(-419112007);
        tree.insert(-685734993);
        tree.insert(667078009);
        tree.insert(880255562);
        tree.insert(-312062525);
        tree.insert(101287548);
        tree.insert(-540644885);
        tree.insert(-760341158);
        tree.insert(927602053);
        tree.insert(-109954480);
        tree.insert(726327739);
        tree.insert(-806780339);
        tree.insert(-806169884);
        tree.insert(573997520);
        tree.insert(553728160);
        tree.insert(-194338872);
        tree.insert(345075042);
        tree.insert(739441399);
        tree.insert(730323705);
        tree.insert(326140900);
        tree.insert(262624347);
        tree.insert(-171298227);
        tree.insert(-583314758);
        tree.insert(-525397153);
        tree.insert(-304695796);
        tree.insert(240580786);
        tree.insert(376784754);
        tree.insert(607410143);
        tree.insert(-732234001);
        tree.insert(-822038066);
        tree.insert(282543114);
        tree.insert(-320360068);
        tree.insert(-90128872);
        tree.insert(270165664);
        tree.insert(-796583057);
        tree.insert(-607115287);
        tree.insert(798057333);
        tree.insert(448654473);
        tree.insert(709260499);
        tree.insert(679559281);
        tree.insert(392171525);
        tree.insert(-883842177);
        tree.insert(619757361);
        tree.insert(503332047);
        tree.insert(893885602);
        tree.insert(541449773);
        tree.insert(682093190);
        tree.insert(-968903861);
        tree.insert(937398626);
        tree.insert(-630105826);
        tree.insert(-644066463);
        tree.insert(-889978935);
        tree.insert(-325963207);
        tree.insert(548189612);
        tree.insert(-43023471);
        tree.insert(532358819);
        tree.insert(876631068);
        tree.insert(129605152);
        tree.insert(-183725049);
        tree.insert(-547035758);
        tree.insert(652774973);
        tree.insert(125732871);
        tree.insert(624054592);
        tree.insert(55623522);
        tree.insert(329530845);
        tree.insert(-636507801);
        tree.insert(-869766062);
        tree.insert(88434582);
        tree.insert(701917268);
        tree.insert(600709846);
        tree.insert(-177156291);
        tree.insert(352654363);
        tree.insert(494980205);
        tree.insert(263239965);
        tree.insert(502856754);
        tree.insert(420116364);
        tree.insert(599755324);
        tree.insert(-219579816);
        tree.insert(59305879);
        tree.insert(154617194);
        tree.insert(638863571);
        tree.insert(-153881718);
        tree.insert(896290377);
        tree.insert(-304583216);
        tree.insert(-318255685);
        tree.insert(954619569);
        tree.insert(840573001);
        tree.insert(-981143411);
        tree.insert(-543630956);
        tree.insert(-997717340);
        tree.insert(-874700892);
        tree.insert(-463274192);
        tree.insert(-673114070);
        tree.insert(-823784179);
        tree.insert(451149907);
        tree.insert(-766511780);
        tree.insert(799147765);
        tree.insert(705439769);
        tree.insert(349150812);
        tree.insert(17067607);
        tree.insert(608715104);
        tree.insert(-529561888);
        tree.insert(-165118483);
        tree.insert(-327155322);
        tree.insert(91250186);
        tree.insert(899638595);
        tree.insert(648717729);
        tree.insert(795194627);
        tree.insert(-465780264);
        tree.insert(-563815273);
        tree.insert(-771492775);
        tree.insert(174065649);
        tree.insert(433679900);
        tree.insert(-621946162);
        tree.insert(36234315);
        tree.insert(408255518);
        tree.insert(619246607);
        tree.insert(416428658);
        tree.insert(-404364520);
        tree.insert(959733203);
        tree.insert(834008359);
        tree.insert(-780210777);
        tree.insert(-699175012);
        tree.insert(218171664);
        tree.insert(-395370089);
        tree.insert(-515731461);
        tree.insert(-461571092);
        tree.insert(-6710817);
        tree.insert(-228620154);
        tree.insert(307099827);
        tree.insert(-836316273);
        tree.insert(438790418);
        tree.insert(200085712);
        tree.insert(6938277);
        tree.insert(-252685423);
        tree.insert(770280568);
        tree.insert(880330802);
        tree.insert(294118163);
        tree.insert(-815211991);
        tree.insert(230879604);
        tree.insert(144244964);
        tree.insert(-187238456);
        tree.insert(601342880);
        tree.insert(-514493262);
        tree.insert(-936879359);
        tree.insert(-150916121);
        tree.insert(-485547412);
        tree.insert(-200127585);
        tree.insert(-681907517);
        tree.insert(-120969671);
        tree.insert(-43034804);
        Integer[] data = {-997717340, -996988462, -985321802, -981143411, -968903861, -936879359, -931069890, -925867796, -889978935, -883842177, -874700892, -869766062, -836316273, -833837517, -823879191, -823784179, -822038066, -815211991, -806780339, -806169884, -796583057, -780210777, -771492775, -766511780, -765450701, -760341158, -737991898, -732234001, -724821239, -709341423, -699175012, -685734993, -681907517, -673114070, -644066463, -641018922, -636507801, -630105826, -621946162, -618690825, -607115287, -606322575, -583314758, -569129938, -567171844, -563815273, -547035758, -543630956, -540644885, -529561888, -525397153, -515731461, -514493262, -485547412, -465780264, -463274192, -461571092, -436089696, -419112007, -404364520, -404229490, -395370089, -386154460, -354436879, -338073621, -327155322, -325963207, -320360068, -318255685, -312062525, -304695796, -304583216, -285008166, -252685423, -239462592, -239117907, -232320072, -228620154, -219579816, -200127585, -194338872, -188466979, -187238456, -183725049, -177156291, -171298227, -165118483, -153881718, -150916121, -120969671, -109954480, -106484619, -90128872, -79549136, -43034804, -43023471, -6710817, 6938277, 7846556, 17067607, 23695734, 36234315, 55623522, 59305879, 88434582, 91250186, 101287548, 114397082, 125732871, 129605152, 132437624, 144244964, 154617194, 171076793, 174065649, 200085712, 202931909, 218171664, 230879604, 240580786, 257149941, 262624347, 263239965, 270165664, 282543114, 294118163, 297774172, 307099827, 309811675, 323870960, 326140900, 329530845, 336656003, 337529651, 345075042, 349150812, 352654363, 371302234, 376784754, 386680075, 392171525, 408255518, 411544256, 416428658, 420116364, 433679900, 438624646, 438790418, 448654473, 451149907, 494980205, 502856754, 503332047, 532358819, 541449773, 548189612, 553728160, 572516421, 573997520, 578279971, 599755324, 600709846, 601342880, 607410143, 608715104, 619246607, 619757361, 624054592, 638863571, 648717729, 652774973, 667078009, 679559281, 682093190, 701917268, 705439769, 709260499, 726327739, 730323705, 739441399, 745540695, 770280568, 795194627, 798057333, 799147765, 834008359, 840573001, 876631068, 880255562, 880330802, 893074630, 893885602, 896290377, 899638595, 927602053, 937398626, 954619569, 959733203, 972061912, 979253387,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_15(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(351382256);
        tree.insert(-219223285);
        tree.insert(-669442228);
        tree.insert(455647056);
        tree.insert(-411430550);
        tree.insert(-304503476);
        tree.insert(-290359922);
        tree.insert(-895613229);
        tree.insert(958654167);
        tree.insert(338608241);
        tree.insert(593095356);
        tree.insert(-55958258);
        tree.insert(491621327);
        tree.insert(691740845);
        tree.insert(-812875596);
        tree.insert(751047178);
        tree.insert(995119397);
        tree.insert(-329900497);
        tree.insert(308852128);
        tree.insert(-543834122);
        tree.insert(282087671);
        tree.insert(-641926940);
        tree.insert(598768990);
        tree.insert(295490066);
        tree.insert(852650304);
        tree.insert(-948672413);
        tree.insert(294576231);
        tree.insert(941946998);
        tree.insert(-326724275);
        tree.insert(359597270);
        tree.insert(-811621463);
        tree.insert(792186437);
        tree.insert(-849605929);
        tree.insert(483644709);
        tree.insert(-532258700);
        tree.insert(-909027070);
        tree.insert(-200218177);
        tree.insert(927985228);
        tree.insert(-968593222);
        tree.insert(-117274987);
        tree.insert(-679873686);
        tree.insert(-810778678);
        tree.insert(-620190715);
        tree.insert(-693700510);
        tree.insert(-354303743);
        tree.insert(-746165161);
        tree.insert(-93810043);
        tree.insert(132532077);
        tree.insert(422057757);
        tree.insert(203642338);
        tree.insert(570953650);
        tree.insert(548489102);
        tree.insert(429349948);
        tree.insert(322340966);
        tree.insert(270902732);
        tree.insert(-420095550);
        tree.insert(-900681170);
        tree.insert(-165740656);
        tree.insert(-209732358);
        tree.insert(657262732);
        tree.insert(999029295);
        tree.insert(405461407);
        tree.insert(30796606);
        tree.insert(408966659);
        tree.insert(828841454);
        tree.insert(-45553096);
        tree.insert(791643255);
        tree.insert(-371701049);
        tree.insert(-360757688);
        tree.insert(-238186984);
        tree.insert(-837275087);
        tree.insert(193793026);
        tree.insert(944086816);
        tree.insert(638894738);
        tree.insert(-565829042);
        tree.insert(-992209096);
        tree.insert(918212784);
        tree.insert(161085617);
        tree.insert(707218569);
        tree.insert(152679844);
        tree.insert(688792798);
        tree.insert(578968560);
        tree.insert(-882194990);
        tree.insert(-552887201);
        tree.insert(10665149);
        tree.insert(-882035852);
        tree.insert(-320252189);
        tree.insert(449946330);
        tree.insert(-300366323);
        tree.insert(-65012200);
        tree.insert(593909201);
        tree.insert(507566567);
        tree.insert(907115369);
        tree.insert(609740541);
        tree.insert(506714151);
        tree.insert(-214766536);
        tree.insert(-338000997);
        tree.insert(-168578963);
        tree.insert(-298384203);
        tree.insert(804567284);
        tree.insert(-293734015);
        tree.insert(449807459);
        tree.insert(-350923180);
        tree.insert(370890240);
        tree.insert(161187751);
        tree.insert(-934756137);
        tree.insert(-619730487);
        tree.insert(928758434);
        tree.insert(973095847);
        tree.insert(-260803273);
        tree.insert(746893840);
        tree.insert(-267123495);
        tree.insert(-623004444);
        tree.insert(-215895682);
        tree.insert(892910207);
        tree.insert(-148917238);
        tree.insert(-994684121);
        tree.insert(143255313);
        tree.insert(-203205199);
        tree.insert(-253009277);
        tree.insert(-642856583);
        tree.insert(-142609689);
        tree.insert(-591939105);
        tree.insert(-596789749);
        tree.insert(-922213940);
        tree.insert(977934721);
        tree.insert(-700283857);
        tree.insert(949117585);
        tree.insert(-989038705);
        tree.insert(-524784357);
        tree.insert(123862150);
        tree.insert(576952541);
        tree.insert(-459969884);
        tree.insert(825294688);
        tree.insert(-909838037);
        tree.insert(-615466219);
        tree.insert(123412236);
        tree.insert(-185520847);
        tree.insert(-67580209);
        tree.insert(3730353);
        tree.insert(-407628453);
        tree.insert(876177615);
        tree.insert(73699426);
        tree.insert(692249053);
        tree.insert(150257571);
        tree.insert(-965587615);
        tree.insert(951301260);
        tree.insert(-564697450);
        tree.insert(-464964050);
        tree.insert(-110226690);
        tree.insert(-791601139);
        tree.insert(184962041);
        tree.insert(646973934);
        tree.insert(473038858);
        tree.insert(-554217075);
        tree.insert(189043039);
        tree.insert(-709552332);
        tree.insert(643164238);
        tree.insert(807457741);
        tree.insert(743332951);
        tree.insert(101283838);
        tree.insert(-519736045);
        tree.insert(400284821);
        tree.insert(-550545064);
        tree.insert(209712038);
        tree.insert(615153314);
        tree.insert(82067828);
        tree.insert(866480619);
        tree.insert(-750791154);
        tree.insert(-373568742);
        tree.insert(-864868053);
        tree.insert(852743370);
        tree.insert(-446806928);
        tree.insert(911978159);
        tree.insert(-254822094);
        tree.insert(619592297);
        tree.insert(623583188);
        tree.insert(-813204894);
        tree.insert(-641534275);
        tree.insert(-879901005);
        tree.insert(408867863);
        tree.insert(928655406);
        tree.insert(-263124308);
        tree.insert(938456979);
        tree.insert(773522925);
        tree.insert(360089032);
        tree.insert(-168719131);
        tree.insert(-168222534);
        tree.insert(-384196828);
        tree.insert(305877691);
        tree.insert(-697611524);
        tree.insert(-66253993);
        tree.insert(-538835567);
        tree.insert(-421687641);
        tree.insert(-465995321);
        tree.insert(-100910620);
        tree.insert(472061757);
        tree.insert(410356717);
        tree.insert(-731810084);
        tree.insert(646713684);
        Integer[] data = {-994684121, -992209096, -989038705, -968593222, -965587615, -948672413, -934756137, -922213940, -909838037, -909027070, -900681170, -895613229, -882194990, -882035852, -879901005, -864868053, -849605929, -837275087, -813204894, -812875596, -811621463, -810778678, -791601139, -750791154, -746165161, -731810084, -709552332, -700283857, -697611524, -693700510, -679873686, -669442228, -642856583, -641926940, -641534275, -623004444, -620190715, -619730487, -615466219, -596789749, -591939105, -565829042, -564697450, -554217075, -552887201, -550545064, -543834122, -538835567, -532258700, -524784357, -519736045, -465995321, -464964050, -459969884, -446806928, -421687641, -420095550, -411430550, -407628453, -384196828, -373568742, -371701049, -360757688, -354303743, -350923180, -338000997, -329900497, -326724275, -320252189, -304503476, -300366323, -298384203, -293734015, -290359922, -267123495, -263124308, -260803273, -254822094, -253009277, -238186984, -219223285, -215895682, -214766536, -209732358, -203205199, -200218177, -185520847, -168719131, -168578963, -168222534, -165740656, -148917238, -142609689, -117274987, -110226690, -100910620, -93810043, -67580209, -66253993, -65012200, -55958258, -45553096, 3730353, 10665149, 30796606, 73699426, 82067828, 101283838, 123412236, 123862150, 132532077, 143255313, 150257571, 152679844, 161085617, 161187751, 184962041, 189043039, 193793026, 203642338, 209712038, 270902732, 282087671, 294576231, 295490066, 305877691, 308852128, 322340966, 338608241, 351382256, 359597270, 360089032, 370890240, 400284821, 405461407, 408867863, 408966659, 410356717, 422057757, 429349948, 449807459, 449946330, 455647056, 472061757, 473038858, 483644709, 491621327, 506714151, 507566567, 548489102, 570953650, 576952541, 578968560, 593095356, 593909201, 598768990, 609740541, 615153314, 619592297, 623583188, 638894738, 643164238, 646713684, 646973934, 657262732, 688792798, 691740845, 692249053, 707218569, 743332951, 746893840, 751047178, 773522925, 791643255, 792186437, 804567284, 807457741, 825294688, 828841454, 852650304, 852743370, 866480619, 876177615, 892910207, 907115369, 911978159, 918212784, 927985228, 928655406, 928758434, 938456979, 941946998, 944086816, 949117585, 951301260, 958654167, 973095847, 977934721, 995119397, 999029295,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_16(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(106186700);
        tree.insert(706485170);
        tree.insert(67328561);
        tree.insert(-427316125);
        tree.insert(471868387);
        tree.insert(-780426864);
        tree.insert(714940248);
        tree.insert(-777497414);
        tree.insert(-800850359);
        tree.insert(-550464493);
        tree.insert(569494800);
        tree.insert(704861127);
        tree.insert(-763831085);
        tree.insert(108077789);
        tree.insert(-513344298);
        tree.insert(859903826);
        tree.insert(310338417);
        tree.insert(-510334657);
        tree.insert(-846921910);
        tree.insert(571366186);
        tree.insert(-430352900);
        tree.insert(468018220);
        tree.insert(990102558);
        tree.insert(-909224984);
        tree.insert(812631324);
        tree.insert(771556753);
        tree.insert(-509299562);
        tree.insert(-396398117);
        tree.insert(862775243);
        tree.insert(-13360348);
        tree.insert(50873917);
        tree.insert(800633081);
        tree.insert(-340303739);
        tree.insert(-959433991);
        tree.insert(747807800);
        tree.insert(-190042971);
        tree.insert(-29518754);
        tree.insert(-49700621);
        tree.insert(276260345);
        tree.insert(299271395);
        tree.insert(-211217336);
        tree.insert(972584494);
        tree.insert(-211773102);
        tree.insert(563764653);
        tree.insert(-131687442);
        tree.insert(104213164);
        tree.insert(150381177);
        tree.insert(549505887);
        tree.insert(-159472246);
        tree.insert(724836307);
        tree.insert(822974353);
        tree.insert(-365866385);
        tree.insert(-311983157);
        tree.insert(-720905202);
        tree.insert(-82427325);
        tree.insert(375709523);
        tree.insert(-659205797);
        tree.insert(247605972);
        tree.insert(-708223103);
        tree.insert(985716830);
        tree.insert(534187226);
        tree.insert(291667603);
        tree.insert(586030158);
        tree.insert(816245876);
        tree.insert(-183454493);
        tree.insert(205574170);
        tree.insert(-821732237);
        tree.insert(654399560);
        tree.insert(950869131);
        tree.insert(-424546688);
        tree.insert(459129946);
        tree.insert(534584596);
        tree.insert(729729626);
        tree.insert(-752266081);
        tree.insert(-788870882);
        tree.insert(-973445630);
        tree.insert(-158094656);
        tree.insert(533778567);
        tree.insert(-3773527);
        tree.insert(-488091710);
        tree.insert(259989008);
        tree.insert(608416283);
        tree.insert(-468662470);
        tree.insert(-598076728);
        tree.insert(-406883570);
        tree.insert(-443266246);
        tree.insert(-61988832);
        tree.insert(-23160973);
        tree.insert(126110522);
        tree.insert(-724200216);
        tree.insert(786806931);
        tree.insert(443530947);
        tree.insert(964080147);
        tree.insert(661980479);
        tree.insert(241606916);
        tree.insert(-158302176);
        tree.insert(-32975267);
        tree.insert(-935146455);
        tree.insert(-638876552);
        tree.insert(513902729);
        tree.insert(-379890794);
        tree.insert(-593377140);
        tree.insert(632084899);
        tree.insert(10609409);
        tree.insert(-408927180);
        tree.insert(914308193);
        tree.insert(-836250815);
        tree.insert(20743153);
        tree.insert(-475476898);
        tree.insert(-958164054);
        tree.insert(-879377352);
        tree.insert(-881478339);
        tree.insert(439574152);
        tree.insert(-736154574);
        tree.insert(596342071);
        tree.insert(-373993051);
        tree.insert(890041417);
        tree.insert(873087256);
        tree.insert(387796464);
        tree.insert(-813434957);
        tree.insert(316663140);
        tree.insert(-678929322);
        tree.insert(-916485856);
        tree.insert(-818777174);
        tree.insert(972877533);
        tree.insert(-308099282);
        tree.insert(333179830);
        tree.insert(792225241);
        tree.insert(-640173291);
        tree.insert(861123187);
        tree.insert(-494116687);
        tree.insert(-134897382);
        tree.insert(-714276161);
        tree.insert(-248558229);
        tree.insert(-604680238);
        tree.insert(-662057431);
        tree.insert(143844917);
        tree.insert(659513527);
        tree.insert(-678208782);
        tree.insert(477750391);
        tree.insert(660452885);
        tree.insert(636373580);
        tree.insert(-947775796);
        tree.insert(123814364);
        tree.insert(-47806826);
        tree.insert(83085778);
        tree.insert(705835751);
        tree.insert(-549459632);
        tree.insert(-651374551);
        tree.insert(844744681);
        tree.insert(475882048);
        tree.insert(261805018);
        tree.insert(-408119084);
        tree.insert(-67307261);
        tree.insert(-2348437);
        tree.insert(787474370);
        tree.insert(697142205);
        tree.insert(-478386014);
        tree.insert(-380194450);
        tree.insert(780370120);
        tree.insert(-16491030);
        tree.insert(-139404082);
        tree.insert(-983714580);
        tree.insert(-192491275);
        tree.insert(-66279013);
        tree.insert(644445088);
        tree.insert(-119237329);
        tree.insert(907246892);
        tree.insert(807768175);
        tree.insert(-190676359);
        tree.insert(439503985);
        tree.insert(661590175);
        tree.insert(-526144869);
        tree.insert(-246201136);
        tree.insert(172436288);
        tree.insert(-516560046);
        tree.insert(-971377410);
        tree.insert(-430173519);
        tree.insert(200408552);
        tree.insert(-63231561);
        tree.insert(706698723);
        tree.insert(495445597);
        tree.insert(622947950);
        tree.insert(15066643);
        tree.insert(-786712746);
        tree.insert(652671722);
        tree.insert(198115990);
        tree.insert(282234810);
        tree.insert(147088258);
        tree.insert(997296615);
        tree.insert(-538567693);
        tree.insert(581464924);
        tree.insert(-982835621);
        tree.insert(361370206);
        tree.insert(-502352902);
        tree.insert(-34782294);
        tree.insert(90584010);
        tree.insert(487377867);
        tree.insert(614220231);
        tree.insert(-548059164);
        Integer[] data = {-983714580, -982835621, -973445630, -971377410, -959433991, -958164054, -947775796, -935146455, -916485856, -909224984, -881478339, -879377352, -846921910, -836250815, -821732237, -818777174, -813434957, -800850359, -788870882, -786712746, -780426864, -777497414, -763831085, -752266081, -736154574, -724200216, -720905202, -714276161, -708223103, -678929322, -678208782, -662057431, -659205797, -651374551, -640173291, -638876552, -604680238, -598076728, -593377140, -550464493, -549459632, -548059164, -538567693, -526144869, -516560046, -513344298, -510334657, -509299562, -502352902, -494116687, -488091710, -478386014, -475476898, -468662470, -443266246, -430352900, -430173519, -427316125, -424546688, -408927180, -408119084, -406883570, -396398117, -380194450, -379890794, -373993051, -365866385, -340303739, -311983157, -308099282, -248558229, -246201136, -211773102, -211217336, -192491275, -190676359, -190042971, -183454493, -159472246, -158302176, -158094656, -139404082, -134897382, -131687442, -119237329, -82427325, -67307261, -66279013, -63231561, -61988832, -49700621, -47806826, -34782294, -32975267, -29518754, -23160973, -16491030, -13360348, -3773527, -2348437, 10609409, 15066643, 20743153, 50873917, 67328561, 83085778, 90584010, 104213164, 106186700, 108077789, 123814364, 126110522, 143844917, 147088258, 150381177, 172436288, 198115990, 200408552, 205574170, 241606916, 247605972, 259989008, 261805018, 276260345, 282234810, 291667603, 299271395, 310338417, 316663140, 333179830, 361370206, 375709523, 387796464, 439503985, 439574152, 443530947, 459129946, 468018220, 471868387, 475882048, 477750391, 487377867, 495445597, 513902729, 533778567, 534187226, 534584596, 549505887, 563764653, 569494800, 571366186, 581464924, 586030158, 596342071, 608416283, 614220231, 622947950, 632084899, 636373580, 644445088, 652671722, 654399560, 659513527, 660452885, 661590175, 661980479, 697142205, 704861127, 705835751, 706485170, 706698723, 714940248, 724836307, 729729626, 747807800, 771556753, 780370120, 786806931, 787474370, 792225241, 800633081, 807768175, 812631324, 816245876, 822974353, 844744681, 859903826, 861123187, 862775243, 873087256, 890041417, 907246892, 914308193, 950869131, 964080147, 972584494, 972877533, 985716830, 990102558, 997296615,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_17(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(693270439);
        tree.insert(-538808167);
        tree.insert(425260478);
        tree.insert(-479080874);
        tree.insert(-113003547);
        tree.insert(-25898955);
        tree.insert(175052407);
        tree.insert(317379746);
        tree.insert(-83331598);
        tree.insert(939437246);
        tree.insert(-119837415);
        tree.insert(647360162);
        tree.insert(-860409583);
        tree.insert(261116365);
        tree.insert(656307668);
        tree.insert(-120347970);
        tree.insert(-188946768);
        tree.insert(-20178848);
        tree.insert(-971231881);
        tree.insert(868883574);
        tree.insert(52709139);
        tree.insert(980570567);
        tree.insert(-192308161);
        tree.insert(-705297590);
        tree.insert(913972512);
        tree.insert(501788675);
        tree.insert(-156260228);
        tree.insert(316180538);
        tree.insert(583943094);
        tree.insert(-491081814);
        tree.insert(266263749);
        tree.insert(-780511858);
        tree.insert(-692690042);
        tree.insert(-554399115);
        tree.insert(760555858);
        tree.insert(-621174570);
        tree.insert(-444929223);
        tree.insert(267996074);
        tree.insert(545425360);
        tree.insert(-683748446);
        tree.insert(847756705);
        tree.insert(698760332);
        tree.insert(109836673);
        tree.insert(-604999227);
        tree.insert(973223206);
        tree.insert(-87560821);
        tree.insert(334065141);
        tree.insert(-502030514);
        tree.insert(-657470574);
        tree.insert(-588079858);
        tree.insert(-837392116);
        tree.insert(794189139);
        tree.insert(573694966);
        tree.insert(-264560323);
        tree.insert(89676229);
        tree.insert(216524807);
        tree.insert(-401134969);
        tree.insert(358554974);
        tree.insert(469759614);
        tree.insert(836696012);
        tree.insert(451613007);
        tree.insert(282674669);
        tree.insert(793100994);
        tree.insert(651810964);
        tree.insert(-145523287);
        tree.insert(635390956);
        tree.insert(780607103);
        tree.insert(-600309004);
        tree.insert(329843334);
        tree.insert(-295446340);
        tree.insert(645309649);
        tree.insert(108002502);
        tree.insert(498939827);
        tree.insert(101480849);
        tree.insert(134966368);
        tree.insert(-406112486);
        tree.insert(916571532);
        tree.insert(106908251);
        tree.insert(-547946231);
        tree.insert(528902392);
        tree.insert(558104982);
        tree.insert(736349226);
        tree.insert(341658542);
        tree.insert(-73052078);
        tree.insert(239517791);
        tree.insert(-337367969);
        tree.insert(224051086);
        tree.insert(939029145);
        tree.insert(29750304);
        tree.insert(848746915);
        tree.insert(-561145492);
        tree.insert(537904805);
        tree.insert(593748187);
        tree.insert(895600799);
        tree.insert(-845703535);
        tree.insert(205668608);
        tree.insert(-547404265);
        tree.insert(-805075611);
        tree.insert(-591736081);
        tree.insert(-192922019);
        tree.insert(814212622);
        tree.insert(93557029);
        tree.insert(-247254415);
        tree.insert(239409967);
        tree.insert(-804853634);
        tree.insert(-712667423);
        tree.insert(-430858685);
        tree.insert(-142154540);
        tree.insert(-465367310);
        tree.insert(-312271886);
        tree.insert(-491777116);
        tree.insert(-776728978);
        tree.insert(472152884);
        tree.insert(539523609);
        tree.insert(917346328);
        tree.insert(-364425694);
        tree.insert(265815648);
        tree.insert(798150512);
        tree.insert(-822055863);
        tree.insert(-727051914);
        tree.insert(288257806);
        tree.insert(-431746434);
        tree.insert(-810635207);
        tree.insert(-574340099);
        tree.insert(814876096);
        tree.insert(949669300);
        tree.insert(-26432568);
        tree.insert(-108771420);
        tree.insert(908116263);
        tree.insert(645130641);
        tree.insert(58168769);
        tree.insert(-635462352);
        tree.insert(-78485038);
        tree.insert(909802988);
        tree.insert(-606828799);
        tree.insert(-181180694);
        tree.insert(-646311541);
        tree.insert(150144418);
        tree.insert(624502575);
        tree.insert(-909860502);
        tree.insert(-465137525);
        tree.insert(155587930);
        tree.insert(-405995611);
        tree.insert(611259886);
        tree.insert(808592798);
        tree.insert(589990837);
        tree.insert(150832099);
        tree.insert(842354085);
        tree.insert(-571136854);
        tree.insert(711162758);
        tree.insert(417501146);
        tree.insert(924075913);
        tree.insert(-764644216);
        tree.insert(-734498393);
        tree.insert(747116727);
        tree.insert(-195653112);
        tree.insert(-29527349);
        tree.insert(769098407);
        tree.insert(800824957);
        tree.insert(-261859201);
        tree.insert(-216662091);
        tree.insert(841875636);
        tree.insert(202470620);
        tree.insert(-482258291);
        tree.insert(499943694);
        tree.insert(-999546901);
        tree.insert(422798629);
        tree.insert(564972699);
        tree.insert(802117073);
        tree.insert(422605082);
        tree.insert(-649902909);
        tree.insert(-220514407);
        tree.insert(-479988717);
        tree.insert(-639691943);
        tree.insert(-447250635);
        tree.insert(-683851607);
        tree.insert(-43427571);
        tree.insert(170038957);
        tree.insert(363692881);
        tree.insert(611917180);
        tree.insert(881827325);
        tree.insert(842538297);
        tree.insert(-729366242);
        tree.insert(212985325);
        tree.insert(-376291696);
        tree.insert(-670906297);
        tree.insert(294545653);
        tree.insert(-500786376);
        tree.insert(575773706);
        tree.insert(-530770721);
        tree.insert(64918463);
        tree.insert(825728302);
        tree.insert(-610300606);
        tree.insert(-69328853);
        tree.insert(-645527226);
        tree.insert(197257566);
        tree.insert(-206280234);
        tree.insert(-76096800);
        tree.insert(-530863887);
        tree.insert(-764098778);
        Integer[] data = {-999546901, -971231881, -909860502, -860409583, -845703535, -837392116, -822055863, -810635207, -805075611, -804853634, -780511858, -776728978, -764644216, -764098778, -734498393, -729366242, -727051914, -712667423, -705297590, -692690042, -683851607, -683748446, -670906297, -657470574, -649902909, -646311541, -645527226, -639691943, -635462352, -621174570, -610300606, -606828799, -604999227, -600309004, -591736081, -588079858, -574340099, -571136854, -561145492, -554399115, -547946231, -547404265, -538808167, -530863887, -530770721, -502030514, -500786376, -491777116, -491081814, -482258291, -479988717, -479080874, -465367310, -465137525, -447250635, -444929223, -431746434, -430858685, -406112486, -405995611, -401134969, -376291696, -364425694, -337367969, -312271886, -295446340, -264560323, -261859201, -247254415, -220514407, -216662091, -206280234, -195653112, -192922019, -192308161, -188946768, -181180694, -156260228, -145523287, -142154540, -120347970, -119837415, -113003547, -108771420, -87560821, -83331598, -78485038, -76096800, -73052078, -69328853, -43427571, -29527349, -26432568, -25898955, -20178848, 29750304, 52709139, 58168769, 64918463, 89676229, 93557029, 101480849, 106908251, 108002502, 109836673, 134966368, 150144418, 150832099, 155587930, 170038957, 175052407, 197257566, 202470620, 205668608, 212985325, 216524807, 224051086, 239409967, 239517791, 261116365, 265815648, 266263749, 267996074, 282674669, 288257806, 294545653, 316180538, 317379746, 329843334, 334065141, 341658542, 358554974, 363692881, 417501146, 422605082, 422798629, 425260478, 451613007, 469759614, 472152884, 498939827, 499943694, 501788675, 528902392, 537904805, 539523609, 545425360, 558104982, 564972699, 573694966, 575773706, 583943094, 589990837, 593748187, 611259886, 611917180, 624502575, 635390956, 645130641, 645309649, 647360162, 651810964, 656307668, 693270439, 698760332, 711162758, 736349226, 747116727, 760555858, 769098407, 780607103, 793100994, 794189139, 798150512, 800824957, 802117073, 808592798, 814212622, 814876096, 825728302, 836696012, 841875636, 842354085, 842538297, 847756705, 848746915, 868883574, 881827325, 895600799, 908116263, 909802988, 913972512, 916571532, 917346328, 924075913, 939029145, 939437246, 949669300, 973223206, 980570567,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_18(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(750099881);
        tree.insert(-621684606);
        tree.insert(-956879920);
        tree.insert(989440190);
        tree.insert(-117838864);
        tree.insert(2779950);
        tree.insert(427489151);
        tree.insert(103340264);
        tree.insert(-23390859);
        tree.insert(57965357);
        tree.insert(325486156);
        tree.insert(722075067);
        tree.insert(-450279244);
        tree.insert(397331911);
        tree.insert(801165777);
        tree.insert(83145076);
        tree.insert(597330023);
        tree.insert(445342105);
        tree.insert(288206956);
        tree.insert(-950732384);
        tree.insert(-825055421);
        tree.insert(664259472);
        tree.insert(-911296009);
        tree.insert(164022331);
        tree.insert(-69750417);
        tree.insert(-500725874);
        tree.insert(887564098);
        tree.insert(-173585115);
        tree.insert(226824480);
        tree.insert(-455455682);
        tree.insert(-535183262);
        tree.insert(452088699);
        tree.insert(844829595);
        tree.insert(-480572245);
        tree.insert(426331325);
        tree.insert(363902633);
        tree.insert(-538373934);
        tree.insert(-312386478);
        tree.insert(-522824700);
        tree.insert(-627030920);
        tree.insert(250509418);
        tree.insert(-504086837);
        tree.insert(-943926311);
        tree.insert(-310043422);
        tree.insert(398681758);
        tree.insert(109106515);
        tree.insert(-705584746);
        tree.insert(-353315158);
        tree.insert(910905099);
        tree.insert(19671368);
        tree.insert(-25409690);
        tree.insert(421167604);
        tree.insert(511662534);
        tree.insert(-627763792);
        tree.insert(772179539);
        tree.insert(922274839);
        tree.insert(-432490726);
        tree.insert(-204814019);
        tree.insert(992590561);
        tree.insert(962353858);
        tree.insert(663397270);
        tree.insert(-828259587);
        tree.insert(-834693377);
        tree.insert(692750505);
        tree.insert(-935432562);
        tree.insert(-670540518);
        tree.insert(151964946);
        tree.insert(-180834185);
        tree.insert(418738751);
        tree.insert(-431487545);
        tree.insert(517962062);
        tree.insert(559569159);
        tree.insert(-479345271);
        tree.insert(671714777);
        tree.insert(760939025);
        tree.insert(28824129);
        tree.insert(248414731);
        tree.insert(143222750);
        tree.insert(-23614525);
        tree.insert(-530287638);
        tree.insert(-259555085);
        tree.insert(851475775);
        tree.insert(330224834);
        tree.insert(-672847788);
        tree.insert(67278395);
        tree.insert(-271230604);
        tree.insert(979786883);
        tree.insert(115383813);
        tree.insert(-542028791);
        tree.insert(88936592);
        tree.insert(811978461);
        tree.insert(-393613032);
        tree.insert(577648498);
        tree.insert(797558423);
        tree.insert(-389028170);
        tree.insert(-419422458);
        tree.insert(490132280);
        tree.insert(231554643);
        tree.insert(79182063);
        tree.insert(-206996341);
        tree.insert(468473699);
        tree.insert(-882573182);
        tree.insert(775556134);
        tree.insert(-232037367);
        tree.insert(-616663837);
        tree.insert(250764345);
        tree.insert(889067904);
        tree.insert(925083169);
        tree.insert(823835263);
        tree.insert(170787601);
        tree.insert(275473657);
        tree.insert(702981141);
        tree.insert(-29724779);
        tree.insert(-423595571);
        tree.insert(-114609815);
        tree.insert(-620809122);
        tree.insert(-895321449);
        tree.insert(620930047);
        tree.insert(661318397);
        tree.insert(333705527);
        tree.insert(-945950123);
        tree.insert(-981362721);
        tree.insert(-260354556);
        tree.insert(375777807);
        tree.insert(-652568934);
        tree.insert(-442432725);
        tree.insert(-213674701);
        tree.insert(-234365245);
        tree.insert(-613990646);
        tree.insert(-352444304);
        tree.insert(599345292);
        tree.insert(968291270);
        tree.insert(-496078023);
        tree.insert(-599445346);
        tree.insert(199790300);
        tree.insert(918502508);
        tree.insert(-835942528);
        tree.insert(-721671229);
        tree.insert(-203597775);
        tree.insert(702689018);
        tree.insert(570734182);
        tree.insert(287003779);
        tree.insert(-652184098);
        tree.insert(-696943000);
        tree.insert(-750059586);
        tree.insert(261261262);
        tree.insert(-865520088);
        tree.insert(435681781);
        tree.insert(976939174);
        tree.insert(-812070414);
        tree.insert(24705790);
        tree.insert(136762129);
        tree.insert(125878260);
        tree.insert(433664724);
        tree.insert(28627909);
        tree.insert(8392726);
        tree.insert(190313884);
        tree.insert(-589440045);
        tree.insert(538186411);
        tree.insert(-342596636);
        tree.insert(27037647);
        tree.insert(13630945);
        tree.insert(404030169);
        tree.insert(-315456055);
        tree.insert(131938762);
        tree.insert(451984965);
        tree.insert(-186409859);
        tree.insert(140340511);
        tree.insert(-967894603);
        tree.insert(760314684);
        tree.insert(-668259194);
        tree.insert(997646567);
        tree.insert(-519240785);
        tree.insert(-129309837);
        tree.insert(773246830);
        tree.insert(-647496181);
        tree.insert(-462679926);
        tree.insert(345133804);
        tree.insert(11303043);
        tree.insert(863922857);
        tree.insert(702823754);
        tree.insert(-308197459);
        tree.insert(140895283);
        tree.insert(-222888889);
        tree.insert(-196932380);
        tree.insert(88758680);
        tree.insert(-61767044);
        tree.insert(-87129288);
        tree.insert(233129245);
        tree.insert(-108909838);
        tree.insert(-948827574);
        tree.insert(-628801879);
        tree.insert(76826846);
        tree.insert(491908064);
        tree.insert(972643992);
        tree.insert(-116880917);
        tree.insert(706334030);
        tree.insert(178458628);
        tree.insert(478406177);
        tree.insert(451603674);
        Integer[] data = {-981362721, -967894603, -956879920, -950732384, -948827574, -945950123, -943926311, -935432562, -911296009, -895321449, -882573182, -865520088, -835942528, -834693377, -828259587, -825055421, -812070414, -750059586, -721671229, -705584746, -696943000, -672847788, -670540518, -668259194, -652568934, -652184098, -647496181, -628801879, -627763792, -627030920, -621684606, -620809122, -616663837, -613990646, -599445346, -589440045, -542028791, -538373934, -535183262, -530287638, -522824700, -519240785, -504086837, -500725874, -496078023, -480572245, -479345271, -462679926, -455455682, -450279244, -442432725, -432490726, -431487545, -423595571, -419422458, -393613032, -389028170, -353315158, -352444304, -342596636, -315456055, -312386478, -310043422, -308197459, -271230604, -260354556, -259555085, -234365245, -232037367, -222888889, -213674701, -206996341, -204814019, -203597775, -196932380, -186409859, -180834185, -173585115, -129309837, -117838864, -116880917, -114609815, -108909838, -87129288, -69750417, -61767044, -29724779, -25409690, -23614525, -23390859, 2779950, 8392726, 11303043, 13630945, 19671368, 24705790, 27037647, 28627909, 28824129, 57965357, 67278395, 76826846, 79182063, 83145076, 88758680, 88936592, 103340264, 109106515, 115383813, 125878260, 131938762, 136762129, 140340511, 140895283, 143222750, 151964946, 164022331, 170787601, 178458628, 190313884, 199790300, 226824480, 231554643, 233129245, 248414731, 250509418, 250764345, 261261262, 275473657, 287003779, 288206956, 325486156, 330224834, 333705527, 345133804, 363902633, 375777807, 397331911, 398681758, 404030169, 418738751, 421167604, 426331325, 427489151, 433664724, 435681781, 445342105, 451603674, 451984965, 452088699, 468473699, 478406177, 490132280, 491908064, 511662534, 517962062, 538186411, 559569159, 570734182, 577648498, 597330023, 599345292, 620930047, 661318397, 663397270, 664259472, 671714777, 692750505, 702689018, 702823754, 702981141, 706334030, 722075067, 750099881, 760314684, 760939025, 772179539, 773246830, 775556134, 797558423, 801165777, 811978461, 823835263, 844829595, 851475775, 863922857, 887564098, 889067904, 910905099, 918502508, 922274839, 925083169, 962353858, 968291270, 972643992, 976939174, 979786883, 989440190, 992590561, 997646567,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_19(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(143507685);
        tree.insert(845857918);
        tree.insert(292473833);
        tree.insert(583489862);
        tree.insert(666803007);
        tree.insert(-424560129);
        tree.insert(55740177);
        tree.insert(-982023611);
        tree.insert(231980698);
        tree.insert(578678420);
        tree.insert(118823599);
        tree.insert(95456849);
        tree.insert(705831155);
        tree.insert(233740969);
        tree.insert(-358614412);
        tree.insert(-575738139);
        tree.insert(783454434);
        tree.insert(-975640762);
        tree.insert(685530354);
        tree.insert(-334888880);
        tree.insert(693750443);
        tree.insert(189531949);
        tree.insert(866945118);
        tree.insert(347165938);
        tree.insert(805414801);
        tree.insert(89668028);
        tree.insert(463872244);
        tree.insert(-622232463);
        tree.insert(-525608140);
        tree.insert(150689464);
        tree.insert(-810341164);
        tree.insert(9311287);
        tree.insert(-7862577);
        tree.insert(-21245807);
        tree.insert(749499935);
        tree.insert(640491681);
        tree.insert(678096823);
        tree.insert(-316335099);
        tree.insert(407700491);
        tree.insert(-459101196);
        tree.insert(-820625780);
        tree.insert(-895845170);
        tree.insert(383021987);
        tree.insert(-77452121);
        tree.insert(906516499);
        tree.insert(709484680);
        tree.insert(799057333);
        tree.insert(650562375);
        tree.insert(571706155);
        tree.insert(561916225);
        tree.insert(217980047);
        tree.insert(435790625);
        tree.insert(918976893);
        tree.insert(-465119291);
        tree.insert(533284338);
        tree.insert(-499563686);
        tree.insert(806749259);
        tree.insert(33901764);
        tree.insert(485485125);
        tree.insert(-851193023);
        tree.insert(-737337280);
        tree.insert(796619678);
        tree.insert(-360341224);
        tree.insert(476480573);
        tree.insert(392038670);
        tree.insert(892739844);
        tree.insert(563009491);
        tree.insert(618232209);
        tree.insert(-257538593);
        tree.insert(347996141);
        tree.insert(-549583969);
        tree.insert(-650035941);
        tree.insert(478290896);
        tree.insert(205976819);
        tree.insert(876716267);
        tree.insert(-647836015);
        tree.insert(-265884767);
        tree.insert(-952961708);
        tree.insert(-544287581);
        tree.insert(-954944664);
        tree.insert(-136074865);
        tree.insert(-589149624);
        tree.insert(-185372939);
        tree.insert(286213927);
        tree.insert(392311982);
        tree.insert(-801804579);
        tree.insert(-111664390);
        tree.insert(472763285);
        tree.insert(-665543146);
        tree.insert(188411837);
        tree.insert(-345936892);
        tree.insert(-56816663);
        tree.insert(-416097618);
        tree.insert(12762449);
        tree.insert(574492871);
        tree.insert(283745319);
        tree.insert(770550595);
        tree.insert(-739584892);
        tree.insert(-638648249);
        tree.insert(-501780061);
        tree.insert(-233242958);
        tree.insert(268621603);
        tree.insert(-65876701);
        tree.insert(611312137);
        tree.insert(984458097);
        tree.insert(653332103);
        tree.insert(67834552);
        tree.insert(29090105);
        tree.insert(880261992);
        tree.insert(313512572);
        tree.insert(20932298);
        tree.insert(-85119613);
        tree.insert(-554847750);
        tree.insert(150149300);
        tree.insert(-359223371);
        tree.insert(157725399);
        tree.insert(3076964);
        tree.insert(-36222287);
        tree.insert(-390018380);
        tree.insert(604568768);
        tree.insert(-582066226);
        tree.insert(410062738);
        tree.insert(-246642498);
        tree.insert(434577335);
        tree.insert(-575931189);
        tree.insert(-576371429);
        tree.insert(586660403);
        tree.insert(944452594);
        tree.insert(-904978327);
        tree.insert(617693033);
        tree.insert(-207504151);
        tree.insert(-717199422);
        tree.insert(-995172555);
        tree.insert(-975457453);
        tree.insert(276170722);
        tree.insert(30088333);
        tree.insert(219179510);
        tree.insert(305355699);
        tree.insert(-115698741);
        tree.insert(-783039816);
        tree.insert(763727426);
        tree.insert(33255506);
        tree.insert(-71947042);
        tree.insert(-506314248);
        tree.insert(274020948);
        tree.insert(647578694);
        tree.insert(71329506);
        tree.insert(-96519104);
        tree.insert(-55501967);
        tree.insert(-24544920);
        tree.insert(218285670);
        tree.insert(394037921);
        tree.insert(214809366);
        tree.insert(-251113413);
        tree.insert(525542434);
        tree.insert(-691876919);
        tree.insert(991634922);
        tree.insert(-78540403);
        tree.insert(627283184);
        tree.insert(731853491);
        tree.insert(-198366597);
        tree.insert(-345621402);
        tree.insert(641047886);
        tree.insert(533642696);
        tree.insert(134207262);
        tree.insert(-136844783);
        tree.insert(-395635771);
        tree.insert(-44736174);
        tree.insert(-472164131);
        tree.insert(-31319216);
        tree.insert(-647685652);
        tree.insert(-227867762);
        tree.insert(335276577);
        tree.insert(-594790528);
        tree.insert(-556362771);
        tree.insert(-887758105);
        tree.insert(158064581);
        tree.insert(-542387020);
        tree.insert(-394985267);
        tree.insert(40943886);
        tree.insert(-362635066);
        tree.insert(-9320412);
        tree.insert(-544569238);
        tree.insert(791585814);
        tree.insert(671175963);
        tree.insert(-621344919);
        tree.insert(54085937);
        tree.insert(35075032);
        tree.insert(306123136);
        tree.insert(249379385);
        tree.insert(811343149);
        tree.insert(-557559492);
        tree.insert(804675642);
        tree.insert(981017604);
        tree.insert(165853600);
        tree.insert(525694109);
        tree.insert(420560054);
        tree.insert(-50184759);
        tree.insert(-296578344);
        tree.insert(755897938);
        Integer[] data = {-995172555, -982023611, -975640762, -975457453, -954944664, -952961708, -904978327, -895845170, -887758105, -851193023, -820625780, -810341164, -801804579, -783039816, -739584892, -737337280, -717199422, -691876919, -665543146, -650035941, -647836015, -647685652, -638648249, -622232463, -621344919, -594790528, -589149624, -582066226, -576371429, -575931189, -575738139, -557559492, -556362771, -554847750, -549583969, -544569238, -544287581, -542387020, -525608140, -506314248, -501780061, -499563686, -472164131, -465119291, -459101196, -424560129, -416097618, -395635771, -394985267, -390018380, -362635066, -360341224, -359223371, -358614412, -345936892, -345621402, -334888880, -316335099, -296578344, -265884767, -257538593, -251113413, -246642498, -233242958, -227867762, -207504151, -198366597, -185372939, -136844783, -136074865, -115698741, -111664390, -96519104, -85119613, -78540403, -77452121, -71947042, -65876701, -56816663, -55501967, -50184759, -44736174, -36222287, -31319216, -24544920, -21245807, -9320412, -7862577, 3076964, 9311287, 12762449, 20932298, 29090105, 30088333, 33255506, 33901764, 35075032, 40943886, 54085937, 55740177, 67834552, 71329506, 89668028, 95456849, 118823599, 134207262, 143507685, 150149300, 150689464, 157725399, 158064581, 165853600, 188411837, 189531949, 205976819, 214809366, 217980047, 218285670, 219179510, 231980698, 233740969, 249379385, 268621603, 274020948, 276170722, 283745319, 286213927, 292473833, 305355699, 306123136, 313512572, 335276577, 347165938, 347996141, 383021987, 392038670, 392311982, 394037921, 407700491, 410062738, 420560054, 434577335, 435790625, 463872244, 472763285, 476480573, 478290896, 485485125, 525542434, 525694109, 533284338, 533642696, 561916225, 563009491, 571706155, 574492871, 578678420, 583489862, 586660403, 604568768, 611312137, 617693033, 618232209, 627283184, 640491681, 641047886, 647578694, 650562375, 653332103, 666803007, 671175963, 678096823, 685530354, 693750443, 705831155, 709484680, 731853491, 749499935, 755897938, 763727426, 770550595, 783454434, 791585814, 796619678, 799057333, 804675642, 805414801, 806749259, 811343149, 845857918, 866945118, 876716267, 880261992, 892739844, 906516499, 918976893, 944452594, 981017604, 984458097, 991634922,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_20(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-773265012);
        tree.insert(-206941053);
        tree.insert(-908633994);
        tree.insert(157371053);
        tree.insert(-419405981);
        tree.insert(-803662948);
        tree.insert(-45556300);
        tree.insert(130531467);
        tree.insert(-637872877);
        tree.insert(-102381700);
        tree.insert(-36343232);
        tree.insert(-693059882);
        tree.insert(558884555);
        tree.insert(-773754588);
        tree.insert(253373962);
        tree.insert(823256277);
        tree.insert(44025104);
        tree.insert(717060860);
        tree.insert(724253069);
        tree.insert(-438184676);
        tree.insert(-134745525);
        tree.insert(12495549);
        tree.insert(114069575);
        tree.insert(-605590990);
        tree.insert(-300353393);
        tree.insert(694887738);
        tree.insert(954422390);
        tree.insert(-815204491);
        tree.insert(844021711);
        tree.insert(-530495911);
        tree.insert(-796648901);
        tree.insert(-432702564);
        tree.insert(-336147906);
        tree.insert(147222758);
        tree.insert(-710238808);
        tree.insert(-542160726);
        tree.insert(-553252203);
        tree.insert(269609611);
        tree.insert(202413543);
        tree.insert(199243987);
        tree.insert(-195408665);
        tree.insert(-246377433);
        tree.insert(-964246108);
        tree.insert(-187928699);
        tree.insert(-743397185);
        tree.insert(474230993);
        tree.insert(-722836758);
        tree.insert(-4196060);
        tree.insert(-740200305);
        tree.insert(695419860);
        tree.insert(674499900);
        tree.insert(626878490);
        tree.insert(-754987717);
        tree.insert(428622382);
        tree.insert(235531005);
        tree.insert(-962567593);
        tree.insert(946563377);
        tree.insert(-889720487);
        tree.insert(-484400346);
        tree.insert(-479836299);
        tree.insert(802429469);
        tree.insert(-990175456);
        tree.insert(951392619);
        tree.insert(793505353);
        tree.insert(-76976361);
        tree.insert(631878391);
        tree.insert(195383803);
        tree.insert(33861404);
        tree.insert(579737103);
        tree.insert(-783400318);
        tree.insert(811817031);
        tree.insert(834757969);
        tree.insert(-431602601);
        tree.insert(70985905);
        tree.insert(-408336851);
        tree.insert(639564745);
        tree.insert(-290647011);
        tree.insert(278997270);
        tree.insert(920613480);
        tree.insert(-189232756);
        tree.insert(-884471857);
        tree.insert(984822722);
        tree.insert(900751001);
        tree.insert(183464588);
        tree.insert(-824960941);
        tree.insert(-526882979);
        tree.insert(286506014);
        tree.insert(35856721);
        tree.insert(-790927447);
        tree.insert(810219447);
        tree.insert(-560183265);
        tree.insert(-130604640);
        tree.insert(230419365);
        tree.insert(-136922369);
        tree.insert(133272878);
        tree.insert(717196068);
        tree.insert(-574273344);
        tree.insert(-79992715);
        tree.insert(-91800672);
        tree.insert(-186168102);
        tree.insert(-195955427);
        tree.insert(678643209);
        tree.insert(-46130030);
        tree.insert(-560029952);
        tree.insert(-630130404);
        tree.insert(-512973985);
        tree.insert(-441235323);
        tree.insert(-27350654);
        tree.insert(-102914894);
        tree.insert(61939092);
        tree.insert(-277930195);
        tree.insert(-628757989);
        tree.insert(-911130679);
        tree.insert(-328957462);
        tree.insert(-48372432);
        tree.insert(39563684);
        tree.insert(-689365513);
        tree.insert(-802546466);
        tree.insert(280351171);
        tree.insert(124090112);
        tree.insert(902331314);
        tree.insert(-441777355);
        tree.insert(826121494);
        tree.insert(926862203);
        tree.insert(-246240696);
        tree.insert(696625080);
        tree.insert(601446801);
        tree.insert(514074398);
        tree.insert(-418340002);
        tree.insert(-271599060);
        tree.insert(-868170694);
        tree.insert(-343507634);
        tree.insert(445614834);
        tree.insert(278840326);
        tree.insert(768530777);
        tree.insert(964388933);
        tree.insert(448911569);
        tree.insert(452174627);
        tree.insert(406705072);
        tree.insert(-400647843);
        tree.insert(-847300524);
        tree.insert(-582412654);
        tree.insert(-459373425);
        tree.insert(24136378);
        tree.insert(947425157);
        tree.insert(-888663912);
        tree.insert(122803848);
        tree.insert(830343588);
        tree.insert(-120462056);
        tree.insert(199334878);
        tree.insert(723135974);
        tree.insert(-247327300);
        tree.insert(-70603288);
        tree.insert(327723277);
        tree.insert(64559779);
        tree.insert(36122535);
        tree.insert(127066532);
        tree.insert(-23256778);
        tree.insert(-145744619);
        tree.insert(661274061);
        tree.insert(895632971);
        tree.insert(-752277340);
        tree.insert(314248368);
        tree.insert(734863144);
        tree.insert(-822167813);
        tree.insert(-153637541);
        tree.insert(-746295452);
        tree.insert(-891857003);
        tree.insert(-761268507);
        tree.insert(386314433);
        tree.insert(-175376531);
        tree.insert(-816210927);
        tree.insert(-275081243);
        tree.insert(-337696298);
        tree.insert(191896051);
        tree.insert(573450838);
        tree.insert(991265254);
        tree.insert(-128890726);
        tree.insert(-842670239);
        tree.insert(-46786877);
        tree.insert(904684861);
        tree.insert(407958861);
        tree.insert(364547608);
        tree.insert(592081714);
        tree.insert(378978359);
        tree.insert(903817046);
        tree.insert(500144913);
        tree.insert(-642931226);
        tree.insert(779810883);
        tree.insert(507926267);
        tree.insert(299449737);
        tree.insert(-657579597);
        tree.insert(344866538);
        tree.insert(-641279277);
        tree.insert(700022232);
        tree.insert(-60640256);
        tree.insert(565056638);
        tree.insert(-711773110);
        tree.insert(407260496);
        tree.insert(707503975);
        Integer[] data = {-990175456, -964246108, -962567593, -911130679, -908633994, -891857003, -889720487, -888663912, -884471857, -868170694, -847300524, -842670239, -824960941, -822167813, -816210927, -815204491, -803662948, -802546466, -796648901, -790927447, -783400318, -773754588, -773265012, -761268507, -754987717, -752277340, -746295452, -743397185, -740200305, -722836758, -711773110, -710238808, -693059882, -689365513, -657579597, -642931226, -641279277, -637872877, -630130404, -628757989, -605590990, -582412654, -574273344, -560183265, -560029952, -553252203, -542160726, -530495911, -526882979, -512973985, -484400346, -479836299, -459373425, -441777355, -441235323, -438184676, -432702564, -431602601, -419405981, -418340002, -408336851, -400647843, -343507634, -337696298, -336147906, -328957462, -300353393, -290647011, -277930195, -275081243, -271599060, -247327300, -246377433, -246240696, -206941053, -195955427, -195408665, -189232756, -187928699, -186168102, -175376531, -153637541, -145744619, -136922369, -134745525, -130604640, -128890726, -120462056, -102914894, -102381700, -91800672, -79992715, -76976361, -70603288, -60640256, -48372432, -46786877, -46130030, -45556300, -36343232, -27350654, -23256778, -4196060, 12495549, 24136378, 33861404, 35856721, 36122535, 39563684, 44025104, 61939092, 64559779, 70985905, 114069575, 122803848, 124090112, 127066532, 130531467, 133272878, 147222758, 157371053, 183464588, 191896051, 195383803, 199243987, 199334878, 202413543, 230419365, 235531005, 253373962, 269609611, 278840326, 278997270, 280351171, 286506014, 299449737, 314248368, 327723277, 344866538, 364547608, 378978359, 386314433, 406705072, 407260496, 407958861, 428622382, 445614834, 448911569, 452174627, 474230993, 500144913, 507926267, 514074398, 558884555, 565056638, 573450838, 579737103, 592081714, 601446801, 626878490, 631878391, 639564745, 661274061, 674499900, 678643209, 694887738, 695419860, 696625080, 700022232, 707503975, 717060860, 717196068, 723135974, 724253069, 734863144, 768530777, 779810883, 793505353, 802429469, 810219447, 811817031, 823256277, 826121494, 830343588, 834757969, 844021711, 895632971, 900751001, 902331314, 903817046, 904684861, 920613480, 926862203, 946563377, 947425157, 951392619, 954422390, 964388933, 984822722, 991265254,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_21(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-816810387);
        tree.insert(-175946);
        tree.insert(843666054);
        tree.insert(496681449);
        tree.insert(-647757255);
        tree.insert(-40368430);
        tree.insert(944713940);
        tree.insert(455876801);
        tree.insert(278713075);
        tree.insert(572914743);
        tree.insert(-963081882);
        tree.insert(77105390);
        tree.insert(49451611);
        tree.insert(385229814);
        tree.insert(-151084776);
        tree.insert(931906961);
        tree.insert(428453483);
        tree.insert(124070439);
        tree.insert(-787597449);
        tree.insert(-464359182);
        tree.insert(-105697635);
        tree.insert(-844115587);
        tree.insert(-44531226);
        tree.insert(574429718);
        tree.insert(-451229122);
        tree.insert(-808409217);
        tree.insert(437601049);
        tree.insert(865016690);
        tree.insert(181770945);
        tree.insert(-843566970);
        tree.insert(791554523);
        tree.insert(430970878);
        tree.insert(490841188);
        tree.insert(-914729794);
        tree.insert(599112533);
        tree.insert(-837383739);
        tree.insert(-70185888);
        tree.insert(377228888);
        tree.insert(39477340);
        tree.insert(238581937);
        tree.insert(582903968);
        tree.insert(672713484);
        tree.insert(23204738);
        tree.insert(829698150);
        tree.insert(-282333885);
        tree.insert(555730219);
        tree.insert(37366543);
        tree.insert(253971049);
        tree.insert(389936407);
        tree.insert(-71350261);
        tree.insert(-530118419);
        tree.insert(-598592104);
        tree.insert(-922498224);
        tree.insert(-501777578);
        tree.insert(759851059);
        tree.insert(-807792944);
        tree.insert(131008014);
        tree.insert(252709625);
        tree.insert(-936053335);
        tree.insert(-164629599);
        tree.insert(-459955884);
        tree.insert(-189515882);
        tree.insert(807197130);
        tree.insert(-476336754);
        tree.insert(6391917);
        tree.insert(-794532980);
        tree.insert(557526057);
        tree.insert(-727795869);
        tree.insert(-240029919);
        tree.insert(-144204004);
        tree.insert(-678315384);
        tree.insert(-211495564);
        tree.insert(261423386);
        tree.insert(-577898371);
        tree.insert(-954075149);
        tree.insert(-323498221);
        tree.insert(-739123054);
        tree.insert(-99020098);
        tree.insert(91575472);
        tree.insert(349918580);
        tree.insert(-949651160);
        tree.insert(-228855863);
        tree.insert(99149386);
        tree.insert(-680655925);
        tree.insert(187347314);
        tree.insert(-66036964);
        tree.insert(-4267401);
        tree.insert(-901526453);
        tree.insert(680731129);
        tree.insert(-989857834);
        tree.insert(141686862);
        tree.insert(532225241);
        tree.insert(-905035028);
        tree.insert(-649299921);
        tree.insert(-777334589);
        tree.insert(376972716);
        tree.insert(687847135);
        tree.insert(-426235780);
        tree.insert(-321195632);
        tree.insert(648894759);
        tree.insert(510664588);
        tree.insert(-270251353);
        tree.insert(968502342);
        tree.insert(-532449195);
        tree.insert(699376964);
        tree.insert(-515900603);
        tree.insert(-711132172);
        tree.insert(-522190349);
        tree.insert(-414177984);
        tree.insert(692131199);
        tree.insert(317294731);
        tree.insert(404669920);
        tree.insert(-367584281);
        tree.insert(-144824175);
        tree.insert(567618121);
        tree.insert(807375533);
        tree.insert(652306081);
        tree.insert(788560387);
        tree.insert(-754368287);
        tree.insert(-966654917);
        tree.insert(677818431);
        tree.insert(-166435680);
        tree.insert(723333809);
        tree.insert(684285307);
        tree.insert(-338084595);
        tree.insert(847365943);
        tree.insert(-839805915);
        tree.insert(132665312);
        tree.insert(348508206);
        tree.insert(384155489);
        tree.insert(237149690);
        tree.insert(65044779);
        tree.insert(-784779171);
        tree.insert(406703148);
        tree.insert(-484204613);
        tree.insert(-607309274);
        tree.insert(520450771);
        tree.insert(70733753);
        tree.insert(-30680539);
        tree.insert(-288267216);
        tree.insert(395524235);
        tree.insert(-440345079);
        tree.insert(-589611346);
        tree.insert(-53339336);
        tree.insert(225356334);
        tree.insert(-101739951);
        tree.insert(-55422244);
        tree.insert(506501106);
        tree.insert(554172647);
        tree.insert(500070066);
        tree.insert(-71364207);
        tree.insert(-467963244);
        tree.insert(457099425);
        tree.insert(670021916);
        tree.insert(-630976557);
        tree.insert(-653736182);
        tree.insert(-466376504);
        tree.insert(215038093);
        tree.insert(-647119374);
        tree.insert(921574691);
        tree.insert(-126475185);
        tree.insert(-975825812);
        tree.insert(226575292);
        tree.insert(13667695);
        tree.insert(-669599015);
        tree.insert(-311738652);
        tree.insert(-796639261);
        tree.insert(-589144271);
        tree.insert(579296680);
        tree.insert(-8558618);
        tree.insert(-813924053);
        tree.insert(-948759331);
        tree.insert(123428269);
        tree.insert(464384352);
        tree.insert(-474549494);
        tree.insert(116496200);
        tree.insert(995966242);
        tree.insert(971665375);
        tree.insert(227372920);
        tree.insert(-938136305);
        tree.insert(94664079);
        tree.insert(186675396);
        tree.insert(-624488752);
        tree.insert(-686889707);
        tree.insert(-920164478);
        tree.insert(621369552);
        tree.insert(-94985066);
        tree.insert(-46329529);
        tree.insert(-334707398);
        tree.insert(259157713);
        tree.insert(-14480208);
        tree.insert(642815901);
        tree.insert(-976260905);
        tree.insert(82815179);
        tree.insert(-301576517);
        tree.insert(-292617195);
        tree.insert(680494264);
        tree.insert(-129726093);
        tree.insert(251159577);
        tree.insert(766964117);
        Integer[] data = {-989857834, -976260905, -975825812, -966654917, -963081882, -954075149, -949651160, -948759331, -938136305, -936053335, -922498224, -920164478, -914729794, -905035028, -901526453, -844115587, -843566970, -839805915, -837383739, -816810387, -813924053, -808409217, -807792944, -796639261, -794532980, -787597449, -784779171, -777334589, -754368287, -739123054, -727795869, -711132172, -686889707, -680655925, -678315384, -669599015, -653736182, -649299921, -647757255, -647119374, -630976557, -624488752, -607309274, -598592104, -589611346, -589144271, -577898371, -532449195, -530118419, -522190349, -515900603, -501777578, -484204613, -476336754, -474549494, -467963244, -466376504, -464359182, -459955884, -451229122, -440345079, -426235780, -414177984, -367584281, -338084595, -334707398, -323498221, -321195632, -311738652, -301576517, -292617195, -288267216, -282333885, -270251353, -240029919, -228855863, -211495564, -189515882, -166435680, -164629599, -151084776, -144824175, -144204004, -129726093, -126475185, -105697635, -101739951, -99020098, -94985066, -71364207, -71350261, -70185888, -66036964, -55422244, -53339336, -46329529, -44531226, -40368430, -30680539, -14480208, -8558618, -4267401, -175946, 6391917, 13667695, 23204738, 37366543, 39477340, 49451611, 65044779, 70733753, 77105390, 82815179, 91575472, 94664079, 99149386, 116496200, 123428269, 124070439, 131008014, 132665312, 141686862, 181770945, 186675396, 187347314, 215038093, 225356334, 226575292, 227372920, 237149690, 238581937, 251159577, 252709625, 253971049, 259157713, 261423386, 278713075, 317294731, 348508206, 349918580, 376972716, 377228888, 384155489, 385229814, 389936407, 395524235, 404669920, 406703148, 428453483, 430970878, 437601049, 455876801, 457099425, 464384352, 490841188, 496681449, 500070066, 506501106, 510664588, 520450771, 532225241, 554172647, 555730219, 557526057, 567618121, 572914743, 574429718, 579296680, 582903968, 599112533, 621369552, 642815901, 648894759, 652306081, 670021916, 672713484, 677818431, 680494264, 680731129, 684285307, 687847135, 692131199, 699376964, 723333809, 759851059, 766964117, 788560387, 791554523, 807197130, 807375533, 829698150, 843666054, 847365943, 865016690, 921574691, 931906961, 944713940, 968502342, 971665375, 995966242,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_22(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-478194752);
        tree.insert(977330307);
        tree.insert(-66767094);
        tree.insert(-116752769);
        tree.insert(924368795);
        tree.insert(-269164352);
        tree.insert(-389258069);
        tree.insert(-82018244);
        tree.insert(321241647);
        tree.insert(-608722081);
        tree.insert(-402079994);
        tree.insert(-491624630);
        tree.insert(384978626);
        tree.insert(-164824846);
        tree.insert(509780833);
        tree.insert(-627109953);
        tree.insert(-400079950);
        tree.insert(-988942143);
        tree.insert(-134314799);
        tree.insert(760902503);
        tree.insert(-492711762);
        tree.insert(926727144);
        tree.insert(-467171474);
        tree.insert(-257381948);
        tree.insert(860028635);
        tree.insert(-36989575);
        tree.insert(219391777);
        tree.insert(160957519);
        tree.insert(144144116);
        tree.insert(543597337);
        tree.insert(-385054571);
        tree.insert(974089690);
        tree.insert(-743668999);
        tree.insert(175016983);
        tree.insert(-982396069);
        tree.insert(919819215);
        tree.insert(-840168606);
        tree.insert(-983465039);
        tree.insert(-577061220);
        tree.insert(-207996819);
        tree.insert(-69099414);
        tree.insert(-827104305);
        tree.insert(-247955576);
        tree.insert(659578055);
        tree.insert(-647370853);
        tree.insert(368321110);
        tree.insert(896711643);
        tree.insert(736507983);
        tree.insert(525293608);
        tree.insert(-743562484);
        tree.insert(-720755462);
        tree.insert(-529648721);
        tree.insert(984612551);
        tree.insert(-740541315);
        tree.insert(47562726);
        tree.insert(-616214124);
        tree.insert(-691181452);
        tree.insert(-57812259);
        tree.insert(436454517);
        tree.insert(735919692);
        tree.insert(843825215);
        tree.insert(867331161);
        tree.insert(-863862276);
        tree.insert(-877634888);
        tree.insert(-699741775);
        tree.insert(891173516);
        tree.insert(856440649);
        tree.insert(657371832);
        tree.insert(-576859614);
        tree.insert(-966614513);
        tree.insert(890866287);
        tree.insert(388862364);
        tree.insert(609753995);
        tree.insert(-889703296);
        tree.insert(189268496);
        tree.insert(-653094657);
        tree.insert(119338826);
        tree.insert(-891542299);
        tree.insert(269945522);
        tree.insert(-597648050);
        tree.insert(208385849);
        tree.insert(790421771);
        tree.insert(-775377070);
        tree.insert(-978674558);
        tree.insert(970910724);
        tree.insert(792822442);
        tree.insert(-456821887);
        tree.insert(-435684505);
        tree.insert(620634572);
        tree.insert(-565925323);
        tree.insert(145061054);
        tree.insert(193790245);
        tree.insert(668646230);
        tree.insert(283082025);
        tree.insert(-980056602);
        tree.insert(583014607);
        tree.insert(166903024);
        tree.insert(924155749);
        tree.insert(-449436178);
        tree.insert(604893593);
        tree.insert(965209113);
        tree.insert(853889077);
        tree.insert(-97610957);
        tree.insert(-326565554);
        tree.insert(-587305167);
        tree.insert(317222580);
        tree.insert(587825747);
        tree.insert(-874151093);
        tree.insert(112961554);
        tree.insert(570896378);
        tree.insert(804431568);
        tree.insert(787485706);
        tree.insert(534155782);
        tree.insert(721009737);
        tree.insert(908830241);
        tree.insert(735765003);
        tree.insert(-642617560);
        tree.insert(477346205);
        tree.insert(439220285);
        tree.insert(-90664527);
        tree.insert(226523222);
        tree.insert(-207232642);
        tree.insert(715405081);
        tree.insert(-142205722);
        tree.insert(249972241);
        tree.insert(717341373);
        tree.insert(82051184);
        tree.insert(650228556);
        tree.insert(-47129521);
        tree.insert(74271978);
        tree.insert(87918867);
        tree.insert(-898523995);
        tree.insert(-99683690);
        tree.insert(131504921);
        tree.insert(-700788577);
        tree.insert(-191620109);
        tree.insert(-883965519);
        tree.insert(657288150);
        tree.insert(-817543858);
        tree.insert(-948138306);
        tree.insert(-283336278);
        tree.insert(412552452);
        tree.insert(-59811696);
        tree.insert(-148779822);
        tree.insert(680651912);
        tree.insert(-180626296);
        tree.insert(610520304);
        tree.insert(-911994721);
        tree.insert(812722352);
        tree.insert(867123745);
        tree.insert(-329427397);
        tree.insert(-620928873);
        tree.insert(890535689);
        tree.insert(-856993528);
        tree.insert(797682143);
        tree.insert(869972801);
        tree.insert(609069972);
        tree.insert(131165568);
        tree.insert(-957182996);
        tree.insert(961688920);
        tree.insert(278583915);
        tree.insert(372449907);
        tree.insert(77153003);
        tree.insert(123331491);
        tree.insert(360052626);
        tree.insert(911601568);
        tree.insert(799527079);
        tree.insert(772932233);
        tree.insert(327556766);
        tree.insert(-697454165);
        tree.insert(-265342602);
        tree.insert(-752905274);
        tree.insert(-187530503);
        tree.insert(-418679653);
        tree.insert(-159969214);
        tree.insert(578234189);
        tree.insert(-915937539);
        tree.insert(-838787294);
        tree.insert(-577172100);
        tree.insert(-428859472);
        tree.insert(497841151);
        tree.insert(855904000);
        tree.insert(-719756811);
        tree.insert(384278928);
        tree.insert(-162458103);
        tree.insert(-259534461);
        tree.insert(-22127426);
        tree.insert(956651405);
        tree.insert(50355829);
        tree.insert(605030161);
        tree.insert(696126945);
        tree.insert(-212250037);
        tree.insert(207401982);
        tree.insert(-637716512);
        tree.insert(942307829);
        tree.insert(-660816489);
        tree.insert(-70834764);
        tree.insert(757112775);
        tree.insert(622502248);
        tree.insert(-255362499);
        Integer[] data = {-988942143, -983465039, -982396069, -980056602, -978674558, -966614513, -957182996, -948138306, -915937539, -911994721, -898523995, -891542299, -889703296, -883965519, -877634888, -874151093, -863862276, -856993528, -840168606, -838787294, -827104305, -817543858, -775377070, -752905274, -743668999, -743562484, -740541315, -720755462, -719756811, -700788577, -699741775, -697454165, -691181452, -660816489, -653094657, -647370853, -642617560, -637716512, -627109953, -620928873, -616214124, -608722081, -597648050, -587305167, -577172100, -577061220, -576859614, -565925323, -529648721, -492711762, -491624630, -478194752, -467171474, -456821887, -449436178, -435684505, -428859472, -418679653, -402079994, -400079950, -389258069, -385054571, -329427397, -326565554, -283336278, -269164352, -265342602, -259534461, -257381948, -255362499, -247955576, -212250037, -207996819, -207232642, -191620109, -187530503, -180626296, -164824846, -162458103, -159969214, -148779822, -142205722, -134314799, -116752769, -99683690, -97610957, -90664527, -82018244, -70834764, -69099414, -66767094, -59811696, -57812259, -47129521, -36989575, -22127426, 47562726, 50355829, 74271978, 77153003, 82051184, 87918867, 112961554, 119338826, 123331491, 131165568, 131504921, 144144116, 145061054, 160957519, 166903024, 175016983, 189268496, 193790245, 207401982, 208385849, 219391777, 226523222, 249972241, 269945522, 278583915, 283082025, 317222580, 321241647, 327556766, 360052626, 368321110, 372449907, 384278928, 384978626, 388862364, 412552452, 436454517, 439220285, 477346205, 497841151, 509780833, 525293608, 534155782, 543597337, 570896378, 578234189, 583014607, 587825747, 604893593, 605030161, 609069972, 609753995, 610520304, 620634572, 622502248, 650228556, 657288150, 657371832, 659578055, 668646230, 680651912, 696126945, 715405081, 717341373, 721009737, 735765003, 735919692, 736507983, 757112775, 760902503, 772932233, 787485706, 790421771, 792822442, 797682143, 799527079, 804431568, 812722352, 843825215, 853889077, 855904000, 856440649, 860028635, 867123745, 867331161, 869972801, 890535689, 890866287, 891173516, 896711643, 908830241, 911601568, 919819215, 924155749, 924368795, 926727144, 942307829, 956651405, 961688920, 965209113, 970910724, 974089690, 977330307, 984612551,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_23(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(151785902);
        tree.insert(891362592);
        tree.insert(-969596667);
        tree.insert(610686449);
        tree.insert(847270761);
        tree.insert(-152470588);
        tree.insert(-892116548);
        tree.insert(725425573);
        tree.insert(-434452586);
        tree.insert(-874024505);
        tree.insert(680018179);
        tree.insert(344206264);
        tree.insert(169173148);
        tree.insert(-360496997);
        tree.insert(-811526741);
        tree.insert(324702893);
        tree.insert(646064436);
        tree.insert(-109525332);
        tree.insert(495890937);
        tree.insert(-169734017);
        tree.insert(-82978329);
        tree.insert(773478278);
        tree.insert(668245652);
        tree.insert(-691591096);
        tree.insert(-679360386);
        tree.insert(455430602);
        tree.insert(-235049449);
        tree.insert(398090498);
        tree.insert(-92154905);
        tree.insert(-324343689);
        tree.insert(193445075);
        tree.insert(524980639);
        tree.insert(-582410480);
        tree.insert(128951125);
        tree.insert(-695389408);
        tree.insert(729753151);
        tree.insert(537106658);
        tree.insert(-879929775);
        tree.insert(-512349404);
        tree.insert(687401200);
        tree.insert(845607315);
        tree.insert(871947679);
        tree.insert(-448360053);
        tree.insert(245228488);
        tree.insert(-533956682);
        tree.insert(-610326993);
        tree.insert(708003730);
        tree.insert(-417410857);
        tree.insert(-121337656);
        tree.insert(195971855);
        tree.insert(-608609546);
        tree.insert(973267347);
        tree.insert(887105090);
        tree.insert(-873793144);
        tree.insert(-706643318);
        tree.insert(-208654946);
        tree.insert(769424680);
        tree.insert(-405506346);
        tree.insert(-392597971);
        tree.insert(608218758);
        tree.insert(880437477);
        tree.insert(939920019);
        tree.insert(70163370);
        tree.insert(-632792201);
        tree.insert(364125021);
        tree.insert(968746817);
        tree.insert(780456476);
        tree.insert(-549066678);
        tree.insert(-737792822);
        tree.insert(-707263933);
        tree.insert(21389541);
        tree.insert(621378869);
        tree.insert(-64340400);
        tree.insert(-303134327);
        tree.insert(-688257729);
        tree.insert(-195085285);
        tree.insert(881983524);
        tree.insert(146411636);
        tree.insert(84638030);
        tree.insert(279973033);
        tree.insert(-324444663);
        tree.insert(354922849);
        tree.insert(265218262);
        tree.insert(-916595955);
        tree.insert(200741089);
        tree.insert(531580751);
        tree.insert(182240660);
        tree.insert(-993047736);
        tree.insert(168564765);
        tree.insert(215754619);
        tree.insert(113603633);
        tree.insert(-125457481);
        tree.insert(-252813517);
        tree.insert(589107128);
        tree.insert(-992036013);
        tree.insert(-39894317);
        tree.insert(464500804);
        tree.insert(-702572442);
        tree.insert(-973150872);
        tree.insert(-99522968);
        tree.insert(-247132097);
        tree.insert(-841055675);
        tree.insert(555469558);
        tree.insert(865040843);
        tree.insert(631634962);
        tree.insert(-365100776);
        tree.insert(-645971477);
        tree.insert(795402938);
        tree.insert(521224837);
        tree.insert(891365058);
        tree.insert(-720958526);
        tree.insert(346923039);
        tree.insert(-81308627);
        tree.insert(744128621);
        tree.insert(-322903454);
        tree.insert(520078705);
        tree.insert(-924046713);
        tree.insert(-834873796);
        tree.insert(17726288);
        tree.insert(506799005);
        tree.insert(-592621229);
        tree.insert(-44391262);
        tree.insert(163791655);
        tree.insert(614175207);
        tree.insert(572886486);
        tree.insert(512350695);
        tree.insert(-308260645);
        tree.insert(-378039785);
        tree.insert(-309994300);
        tree.insert(897206248);
        tree.insert(861277773);
        tree.insert(552004167);
        tree.insert(-558716420);
        tree.insert(-366684995);
        tree.insert(904537309);
        tree.insert(-280195604);
        tree.insert(410024804);
        tree.insert(-917346712);
        tree.insert(-486580026);
        tree.insert(544026761);
        tree.insert(440883288);
        tree.insert(-970685496);
        tree.insert(531015748);
        tree.insert(139226759);
        tree.insert(-622991517);
        tree.insert(899585987);
        tree.insert(-106289636);
        tree.insert(-62383564);
        tree.insert(-603455727);
        tree.insert(-388674136);
        tree.insert(446115185);
        tree.insert(158150836);
        tree.insert(34210260);
        tree.insert(-33713865);
        tree.insert(901596125);
        tree.insert(500971992);
        tree.insert(-427561892);
        tree.insert(-813239976);
        tree.insert(560766623);
        tree.insert(481119368);
        tree.insert(817587097);
        tree.insert(-926698908);
        tree.insert(-150582420);
        tree.insert(-315567858);
        tree.insert(914063172);
        tree.insert(947368055);
        tree.insert(304911187);
        tree.insert(808552404);
        tree.insert(-405868610);
        tree.insert(-680629035);
        tree.insert(-24429915);
        tree.insert(440346596);
        tree.insert(269117499);
        tree.insert(-877844517);
        tree.insert(-747150414);
        tree.insert(-772800679);
        tree.insert(-304524190);
        tree.insert(863534892);
        tree.insert(-24255929);
        tree.insert(-402512689);
        tree.insert(-396955899);
        tree.insert(-842147566);
        tree.insert(-136551640);
        tree.insert(841139192);
        tree.insert(-284213298);
        tree.insert(-399248471);
        tree.insert(38916978);
        tree.insert(-726546055);
        tree.insert(-389920926);
        tree.insert(798186865);
        tree.insert(843582275);
        tree.insert(-324116177);
        tree.insert(845365643);
        tree.insert(-42920365);
        tree.insert(-336227663);
        tree.insert(-88725396);
        tree.insert(-351685131);
        tree.insert(364894524);
        tree.insert(563977482);
        tree.insert(-90629629);
        Integer[] data = {-993047736, -992036013, -973150872, -970685496, -969596667, -926698908, -924046713, -917346712, -916595955, -892116548, -879929775, -877844517, -874024505, -873793144, -842147566, -841055675, -834873796, -813239976, -811526741, -772800679, -747150414, -737792822, -726546055, -720958526, -707263933, -706643318, -702572442, -695389408, -691591096, -688257729, -680629035, -679360386, -645971477, -632792201, -622991517, -610326993, -608609546, -603455727, -592621229, -582410480, -558716420, -549066678, -533956682, -512349404, -486580026, -448360053, -434452586, -427561892, -417410857, -405868610, -405506346, -402512689, -399248471, -396955899, -392597971, -389920926, -388674136, -378039785, -366684995, -365100776, -360496997, -351685131, -336227663, -324444663, -324343689, -324116177, -322903454, -315567858, -309994300, -308260645, -304524190, -303134327, -284213298, -280195604, -252813517, -247132097, -235049449, -208654946, -195085285, -169734017, -152470588, -150582420, -136551640, -125457481, -121337656, -109525332, -106289636, -99522968, -92154905, -90629629, -88725396, -82978329, -81308627, -64340400, -62383564, -44391262, -42920365, -39894317, -33713865, -24429915, -24255929, 17726288, 21389541, 34210260, 38916978, 70163370, 84638030, 113603633, 128951125, 139226759, 146411636, 151785902, 158150836, 163791655, 168564765, 169173148, 182240660, 193445075, 195971855, 200741089, 215754619, 245228488, 265218262, 269117499, 279973033, 304911187, 324702893, 344206264, 346923039, 354922849, 364125021, 364894524, 398090498, 410024804, 440346596, 440883288, 446115185, 455430602, 464500804, 481119368, 495890937, 500971992, 506799005, 512350695, 520078705, 521224837, 524980639, 531015748, 531580751, 537106658, 544026761, 552004167, 555469558, 560766623, 563977482, 572886486, 589107128, 608218758, 610686449, 614175207, 621378869, 631634962, 646064436, 668245652, 680018179, 687401200, 708003730, 725425573, 729753151, 744128621, 769424680, 773478278, 780456476, 795402938, 798186865, 808552404, 817587097, 841139192, 843582275, 845365643, 845607315, 847270761, 861277773, 863534892, 865040843, 871947679, 880437477, 881983524, 887105090, 891362592, 891365058, 897206248, 899585987, 901596125, 904537309, 914063172, 939920019, 947368055, 968746817, 973267347,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_24(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(638891469);
        tree.insert(-670886747);
        tree.insert(871229564);
        tree.insert(132971706);
        tree.insert(-335791122);
        tree.insert(-731956913);
        tree.insert(463616417);
        tree.insert(-467688244);
        tree.insert(-114665660);
        tree.insert(558096760);
        tree.insert(269857493);
        tree.insert(929121185);
        tree.insert(-316100376);
        tree.insert(800672506);
        tree.insert(88303119);
        tree.insert(619131823);
        tree.insert(-413673361);
        tree.insert(-69551531);
        tree.insert(-401857628);
        tree.insert(183709314);
        tree.insert(-297496154);
        tree.insert(-438333749);
        tree.insert(573995905);
        tree.insert(575416212);
        tree.insert(390003946);
        tree.insert(-578268065);
        tree.insert(371405513);
        tree.insert(-761096392);
        tree.insert(885233819);
        tree.insert(-778887808);
        tree.insert(725529236);
        tree.insert(-432849871);
        tree.insert(-955783361);
        tree.insert(143814529);
        tree.insert(542166633);
        tree.insert(-972956017);
        tree.insert(135957088);
        tree.insert(897117793);
        tree.insert(217812316);
        tree.insert(627555956);
        tree.insert(-750559135);
        tree.insert(-59332781);
        tree.insert(504286538);
        tree.insert(231343708);
        tree.insert(847017883);
        tree.insert(28764924);
        tree.insert(-281735735);
        tree.insert(-172362227);
        tree.insert(4181570);
        tree.insert(935149893);
        tree.insert(-841071543);
        tree.insert(-791112836);
        tree.insert(533257026);
        tree.insert(344848966);
        tree.insert(194742978);
        tree.insert(437923791);
        tree.insert(-697734448);
        tree.insert(-179188533);
        tree.insert(971650683);
        tree.insert(456606874);
        tree.insert(458250149);
        tree.insert(-827307129);
        tree.insert(132229622);
        tree.insert(-583039694);
        tree.insert(56019615);
        tree.insert(-880953612);
        tree.insert(43324859);
        tree.insert(546851413);
        tree.insert(-611671901);
        tree.insert(-803223996);
        tree.insert(-670093014);
        tree.insert(-105499365);
        tree.insert(765349306);
        tree.insert(723768531);
        tree.insert(-706726168);
        tree.insert(-739875902);
        tree.insert(-828955980);
        tree.insert(-997331491);
        tree.insert(678070087);
        tree.insert(302228857);
        tree.insert(-940835582);
        tree.insert(513900251);
        tree.insert(-573280665);
        tree.insert(-180003072);
        tree.insert(-625765930);
        tree.insert(-141043559);
        tree.insert(-208090468);
        tree.insert(958341486);
        tree.insert(-171810796);
        tree.insert(-50261121);
        tree.insert(-631858239);
        tree.insert(-86829277);
        tree.insert(-917991489);
        tree.insert(-746610072);
        tree.insert(-776227734);
        tree.insert(-146379412);
        tree.insert(882081744);
        tree.insert(916470743);
        tree.insert(896094643);
        tree.insert(298835556);
        tree.insert(576962000);
        tree.insert(648070691);
        tree.insert(171596982);
        tree.insert(-58485003);
        tree.insert(808743502);
        tree.insert(57159240);
        tree.insert(688245529);
        tree.insert(-662182264);
        tree.insert(-431729234);
        tree.insert(-476493988);
        tree.insert(320310038);
        tree.insert(-328328816);
        tree.insert(637484421);
        tree.insert(525647530);
        tree.insert(-407207562);
        tree.insert(94690121);
        tree.insert(-947456311);
        tree.insert(-806443223);
        tree.insert(-516296967);
        tree.insert(-202892120);
        tree.insert(980145107);
        tree.insert(-639519217);
        tree.insert(498790217);
        tree.insert(196645104);
        tree.insert(281474021);
        tree.insert(130377398);
        tree.insert(-225950512);
        tree.insert(-529113580);
        tree.insert(888410765);
        tree.insert(268260260);
        tree.insert(51510945);
        tree.insert(716701109);
        tree.insert(345867067);
        tree.insert(898279431);
        tree.insert(-986482426);
        tree.insert(982846614);
        tree.insert(884116537);
        tree.insert(-205084516);
        tree.insert(802614910);
        tree.insert(29829799);
        tree.insert(528099358);
        tree.insert(574560887);
        tree.insert(-618615197);
        tree.insert(668157448);
        tree.insert(642307382);
        tree.insert(211362532);
        tree.insert(692252638);
        tree.insert(576271778);
        tree.insert(-574853180);
        tree.insert(556915743);
        tree.insert(378078502);
        tree.insert(-148753752);
        tree.insert(-639309569);
        tree.insert(-918363675);
        tree.insert(-192961248);
        tree.insert(388573366);
        tree.insert(716730531);
        tree.insert(-385704572);
        tree.insert(-151430643);
        tree.insert(-264336340);
        tree.insert(127681942);
        tree.insert(-557569798);
        tree.insert(-558034695);
        tree.insert(250471621);
        tree.insert(-739549481);
        tree.insert(-862531971);
        tree.insert(304169540);
        tree.insert(-967407220);
        tree.insert(190987507);
        tree.insert(-816497715);
        tree.insert(662170950);
        tree.insert(114763540);
        tree.insert(-785830594);
        tree.insert(-679974787);
        tree.insert(-368446777);
        tree.insert(57210473);
        tree.insert(-431480661);
        tree.insert(-265873561);
        tree.insert(-829551806);
        tree.insert(-692343035);
        tree.insert(-959666635);
        tree.insert(-782055469);
        tree.insert(-929296779);
        tree.insert(-538350818);
        tree.insert(-882635910);
        tree.insert(573324331);
        tree.insert(788748468);
        tree.insert(-766659503);
        tree.insert(669521740);
        tree.insert(-586635089);
        tree.insert(612133504);
        tree.insert(122861586);
        tree.insert(-817127209);
        tree.insert(862938788);
        tree.insert(312409326);
        tree.insert(428468783);
        tree.insert(-722163058);
        tree.insert(736102480);
        tree.insert(-165792246);
        tree.insert(-303004317);
        Integer[] data = {-997331491, -986482426, -972956017, -967407220, -959666635, -955783361, -947456311, -940835582, -929296779, -918363675, -917991489, -882635910, -880953612, -862531971, -841071543, -829551806, -828955980, -827307129, -817127209, -816497715, -806443223, -803223996, -791112836, -785830594, -782055469, -778887808, -776227734, -766659503, -761096392, -750559135, -746610072, -739875902, -739549481, -731956913, -722163058, -706726168, -697734448, -692343035, -679974787, -670886747, -670093014, -662182264, -639519217, -639309569, -631858239, -625765930, -618615197, -611671901, -586635089, -583039694, -578268065, -574853180, -573280665, -558034695, -557569798, -538350818, -529113580, -516296967, -476493988, -467688244, -438333749, -432849871, -431729234, -431480661, -413673361, -407207562, -401857628, -385704572, -368446777, -335791122, -328328816, -316100376, -303004317, -297496154, -281735735, -265873561, -264336340, -225950512, -208090468, -205084516, -202892120, -192961248, -180003072, -179188533, -172362227, -171810796, -165792246, -151430643, -148753752, -146379412, -141043559, -114665660, -105499365, -86829277, -69551531, -59332781, -58485003, -50261121, 4181570, 28764924, 29829799, 43324859, 51510945, 56019615, 57159240, 57210473, 88303119, 94690121, 114763540, 122861586, 127681942, 130377398, 132229622, 132971706, 135957088, 143814529, 171596982, 183709314, 190987507, 194742978, 196645104, 211362532, 217812316, 231343708, 250471621, 268260260, 269857493, 281474021, 298835556, 302228857, 304169540, 312409326, 320310038, 344848966, 345867067, 371405513, 378078502, 388573366, 390003946, 428468783, 437923791, 456606874, 458250149, 463616417, 498790217, 504286538, 513900251, 525647530, 528099358, 533257026, 542166633, 546851413, 556915743, 558096760, 573324331, 573995905, 574560887, 575416212, 576271778, 576962000, 612133504, 619131823, 627555956, 637484421, 638891469, 642307382, 648070691, 662170950, 668157448, 669521740, 678070087, 688245529, 692252638, 716701109, 716730531, 723768531, 725529236, 736102480, 765349306, 788748468, 800672506, 802614910, 808743502, 847017883, 862938788, 871229564, 882081744, 884116537, 885233819, 888410765, 896094643, 897117793, 898279431, 916470743, 929121185, 935149893, 958341486, 971650683, 980145107, 982846614,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_25(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-591039574);
        tree.insert(-420784406);
        tree.insert(-473571234);
        tree.insert(498672376);
        tree.insert(-557422282);
        tree.insert(-902854170);
        tree.insert(855021262);
        tree.insert(740171167);
        tree.insert(-254442678);
        tree.insert(356097039);
        tree.insert(-351782353);
        tree.insert(-228472290);
        tree.insert(876082093);
        tree.insert(-89086965);
        tree.insert(103999461);
        tree.insert(548147737);
        tree.insert(10464127);
        tree.insert(127794693);
        tree.insert(845122464);
        tree.insert(-225719045);
        tree.insert(18697615);
        tree.insert(845813329);
        tree.insert(-793131204);
        tree.insert(121295007);
        tree.insert(79278100);
        tree.insert(-259815338);
        tree.insert(397195202);
        tree.insert(354992240);
        tree.insert(326319809);
        tree.insert(-815050617);
        tree.insert(583529342);
        tree.insert(816466514);
        tree.insert(553162340);
        tree.insert(292706818);
        tree.insert(963276771);
        tree.insert(-94938877);
        tree.insert(697636718);
        tree.insert(682780771);
        tree.insert(-670037600);
        tree.insert(-113373020);
        tree.insert(-504810276);
        tree.insert(102170951);
        tree.insert(-420279171);
        tree.insert(-514354921);
        tree.insert(-495684695);
        tree.insert(-967324729);
        tree.insert(-545342345);
        tree.insert(683267767);
        tree.insert(699685017);
        tree.insert(-367165560);
        tree.insert(-894773955);
        tree.insert(-457492606);
        tree.insert(382781883);
        tree.insert(837305916);
        tree.insert(338317142);
        tree.insert(592162780);
        tree.insert(-403398965);
        tree.insert(311903642);
        tree.insert(342608080);
        tree.insert(-610078038);
        tree.insert(-942856592);
        tree.insert(101388863);
        tree.insert(-48134579);
        tree.insert(886248055);
        tree.insert(10957355);
        tree.insert(-774451273);
        tree.insert(820906633);
        tree.insert(135980097);
        tree.insert(671763563);
        tree.insert(-56185911);
        tree.insert(47449699);
        tree.insert(-319460953);
        tree.insert(-365937185);
        tree.insert(-544352135);
        tree.insert(-353606175);
        tree.insert(697707132);
        tree.insert(-541901047);
        tree.insert(206341212);
        tree.insert(-954080276);
        tree.insert(-501447397);
        tree.insert(-224335555);
        tree.insert(-749466220);
        tree.insert(-392091931);
        tree.insert(-539296216);
        tree.insert(336041853);
        tree.insert(629322336);
        tree.insert(-613701955);
        tree.insert(-705037378);
        tree.insert(370429972);
        tree.insert(-59123755);
        tree.insert(-382873489);
        tree.insert(-198752398);
        tree.insert(15990979);
        tree.insert(909239966);
        tree.insert(197530353);
        tree.insert(270645805);
        tree.insert(-335485333);
        tree.insert(-758971823);
        tree.insert(920736135);
        tree.insert(-605103765);
        tree.insert(-301624104);
        tree.insert(799713319);
        tree.insert(529752827);
        tree.insert(570767395);
        tree.insert(838142963);
        tree.insert(-660009128);
        tree.insert(-562968236);
        tree.insert(-838684749);
        tree.insert(462687608);
        tree.insert(103159541);
        tree.insert(399234952);
        tree.insert(-388873030);
        tree.insert(14920782);
        tree.insert(557004175);
        tree.insert(-283664141);
        tree.insert(418976017);
        tree.insert(-559287496);
        tree.insert(-129628223);
        tree.insert(203071531);
        tree.insert(991191558);
        tree.insert(655387983);
        tree.insert(429045415);
        tree.insert(100540283);
        tree.insert(-870031032);
        tree.insert(15338496);
        tree.insert(376703600);
        tree.insert(526163140);
        tree.insert(561414126);
        tree.insert(474452994);
        tree.insert(-402265217);
        tree.insert(-472589484);
        tree.insert(578370252);
        tree.insert(791368630);
        tree.insert(-486449076);
        tree.insert(214409822);
        tree.insert(182996051);
        tree.insert(738113184);
        tree.insert(428878322);
        tree.insert(480807663);
        tree.insert(457845777);
        tree.insert(-400223434);
        tree.insert(128164331);
        tree.insert(455717675);
        tree.insert(795818328);
        tree.insert(83295987);
        tree.insert(-516584815);
        tree.insert(694710947);
        tree.insert(-995002576);
        tree.insert(-406196466);
        tree.insert(-205090896);
        tree.insert(-414244635);
        tree.insert(-767849305);
        tree.insert(-789671324);
        tree.insert(995426563);
        tree.insert(-949606080);
        tree.insert(889938970);
        tree.insert(-403725862);
        tree.insert(-112442676);
        tree.insert(524632797);
        tree.insert(-317141178);
        tree.insert(-605867675);
        tree.insert(652886227);
        tree.insert(671227862);
        tree.insert(370639594);
        tree.insert(-858929022);
        tree.insert(812582323);
        tree.insert(-593912960);
        tree.insert(-495951410);
        tree.insert(-62822190);
        tree.insert(527245077);
        tree.insert(632838766);
        tree.insert(-539008055);
        tree.insert(541083793);
        tree.insert(690644488);
        tree.insert(305307050);
        tree.insert(57740051);
        tree.insert(866580754);
        tree.insert(182603590);
        tree.insert(555315424);
        tree.insert(766172216);
        tree.insert(319934640);
        tree.insert(-308844405);
        tree.insert(802845762);
        tree.insert(394249509);
        tree.insert(-85686806);
        tree.insert(-388259668);
        tree.insert(-693355270);
        tree.insert(851590944);
        tree.insert(591648970);
        tree.insert(-234620301);
        tree.insert(-575828595);
        tree.insert(-130666658);
        tree.insert(641307389);
        tree.insert(736957064);
        tree.insert(30188094);
        tree.insert(343451850);
        tree.insert(240518475);
        tree.insert(868155481);
        tree.insert(184196062);
        tree.insert(527392160);
        Integer[] data = {-995002576, -967324729, -954080276, -949606080, -942856592, -902854170, -894773955, -870031032, -858929022, -838684749, -815050617, -793131204, -789671324, -774451273, -767849305, -758971823, -749466220, -705037378, -693355270, -670037600, -660009128, -613701955, -610078038, -605867675, -605103765, -593912960, -591039574, -575828595, -562968236, -559287496, -557422282, -545342345, -544352135, -541901047, -539296216, -539008055, -516584815, -514354921, -504810276, -501447397, -495951410, -495684695, -486449076, -473571234, -472589484, -457492606, -420784406, -420279171, -414244635, -406196466, -403725862, -403398965, -402265217, -400223434, -392091931, -388873030, -388259668, -382873489, -367165560, -365937185, -353606175, -351782353, -335485333, -319460953, -317141178, -308844405, -301624104, -283664141, -259815338, -254442678, -234620301, -228472290, -225719045, -224335555, -205090896, -198752398, -130666658, -129628223, -113373020, -112442676, -94938877, -89086965, -85686806, -62822190, -59123755, -56185911, -48134579, 10464127, 10957355, 14920782, 15338496, 15990979, 18697615, 30188094, 47449699, 57740051, 79278100, 83295987, 100540283, 101388863, 102170951, 103159541, 103999461, 121295007, 127794693, 128164331, 135980097, 182603590, 182996051, 184196062, 197530353, 203071531, 206341212, 214409822, 240518475, 270645805, 292706818, 305307050, 311903642, 319934640, 326319809, 336041853, 338317142, 342608080, 343451850, 354992240, 356097039, 370429972, 370639594, 376703600, 382781883, 394249509, 397195202, 399234952, 418976017, 428878322, 429045415, 455717675, 457845777, 462687608, 474452994, 480807663, 498672376, 524632797, 526163140, 527245077, 527392160, 529752827, 541083793, 548147737, 553162340, 555315424, 557004175, 561414126, 570767395, 578370252, 583529342, 591648970, 592162780, 629322336, 632838766, 641307389, 652886227, 655387983, 671227862, 671763563, 682780771, 683267767, 690644488, 694710947, 697636718, 697707132, 699685017, 736957064, 738113184, 740171167, 766172216, 791368630, 795818328, 799713319, 802845762, 812582323, 816466514, 820906633, 837305916, 838142963, 845122464, 845813329, 851590944, 855021262, 866580754, 868155481, 876082093, 886248055, 889938970, 909239966, 920736135, 963276771, 991191558, 995426563,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_26(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(94509104);
        tree.insert(860909614);
        tree.insert(376671096);
        tree.insert(558445569);
        tree.insert(230140952);
        tree.insert(41310933);
        tree.insert(415215856);
        tree.insert(790937825);
        tree.insert(798838089);
        tree.insert(-341112981);
        tree.insert(-951005393);
        tree.insert(83805605);
        tree.insert(251474085);
        tree.insert(-328241346);
        tree.insert(343522500);
        tree.insert(-367087036);
        tree.insert(-48446583);
        tree.insert(964590227);
        tree.insert(-623330851);
        tree.insert(-401032936);
        tree.insert(307606617);
        tree.insert(-719370929);
        tree.insert(13636255);
        tree.insert(-784655962);
        tree.insert(486670760);
        tree.insert(807403879);
        tree.insert(-202338282);
        tree.insert(207025850);
        tree.insert(-459796024);
        tree.insert(-475432596);
        tree.insert(945321898);
        tree.insert(540857695);
        tree.insert(-601153906);
        tree.insert(-286510233);
        tree.insert(192989304);
        tree.insert(-933181578);
        tree.insert(-565819922);
        tree.insert(-355078832);
        tree.insert(746572747);
        tree.insert(-655138755);
        tree.insert(-823611645);
        tree.insert(176188308);
        tree.insert(662017904);
        tree.insert(-782072308);
        tree.insert(951085332);
        tree.insert(187160093);
        tree.insert(-230729503);
        tree.insert(-646160888);
        tree.insert(-351947459);
        tree.insert(-105032028);
        tree.insert(-332833986);
        tree.insert(77036108);
        tree.insert(476434084);
        tree.insert(246876177);
        tree.insert(-816319733);
        tree.insert(578626818);
        tree.insert(-585316131);
        tree.insert(215369431);
        tree.insert(213194607);
        tree.insert(-946672081);
        tree.insert(-421885567);
        tree.insert(-149928198);
        tree.insert(-874094929);
        tree.insert(-365390413);
        tree.insert(-477529127);
        tree.insert(956914530);
        tree.insert(-693920356);
        tree.insert(-291718074);
        tree.insert(350357878);
        tree.insert(539485227);
        tree.insert(864948374);
        tree.insert(-361033634);
        tree.insert(809765592);
        tree.insert(691812193);
        tree.insert(403014667);
        tree.insert(-591276171);
        tree.insert(-984349569);
        tree.insert(-514358837);
        tree.insert(23792470);
        tree.insert(-407423405);
        tree.insert(693676372);
        tree.insert(268079826);
        tree.insert(452009643);
        tree.insert(-369352708);
        tree.insert(-494271305);
        tree.insert(-550511434);
        tree.insert(546998040);
        tree.insert(591122033);
        tree.insert(-564973195);
        tree.insert(-885644988);
        tree.insert(216092774);
        tree.insert(-477699498);
        tree.insert(-31681613);
        tree.insert(-837119074);
        tree.insert(-758940098);
        tree.insert(-149546599);
        tree.insert(-379590280);
        tree.insert(625895402);
        tree.insert(-344822693);
        tree.insert(-469765253);
        tree.insert(-845786822);
        tree.insert(570691683);
        tree.insert(549827883);
        tree.insert(917955737);
        tree.insert(-602903832);
        tree.insert(-428621191);
        tree.insert(-124616674);
        tree.insert(-103083950);
        tree.insert(631582312);
        tree.insert(-630839975);
        tree.insert(-767601210);
        tree.insert(-839797663);
        tree.insert(622649434);
        tree.insert(-878916594);
        tree.insert(-546557698);
        tree.insert(-487836865);
        tree.insert(971506030);
        tree.insert(526432835);
        tree.insert(106057573);
        tree.insert(-758537505);
        tree.insert(-690116698);
        tree.insert(-855004799);
        tree.insert(423885291);
        tree.insert(-424693411);
        tree.insert(-283180920);
        tree.insert(-786795282);
        tree.insert(-949525566);
        tree.insert(-799593056);
        tree.insert(514978232);
        tree.insert(-341385551);
        tree.insert(-943611948);
        tree.insert(-801041146);
        tree.insert(-137704026);
        tree.insert(-846527250);
        tree.insert(347479337);
        tree.insert(-427057870);
        tree.insert(-291544970);
        tree.insert(817177915);
        tree.insert(-234714700);
        tree.insert(-690649117);
        tree.insert(-376121173);
        tree.insert(601246242);
        tree.insert(-182407312);
        tree.insert(25162870);
        tree.insert(-230535583);
        tree.insert(913687437);
        tree.insert(661360797);
        tree.insert(38543022);
        tree.insert(-818129096);
        tree.insert(-847567895);
        tree.insert(837119610);
        tree.insert(-868679706);
        tree.insert(-678652197);
        tree.insert(522451032);
        tree.insert(-621711664);
        tree.insert(386957948);
        tree.insert(530339959);
        tree.insert(83322204);
        tree.insert(328488776);
        tree.insert(-85590934);
        tree.insert(34978311);
        tree.insert(-356650760);
        tree.insert(630471593);
        tree.insert(898210891);
        tree.insert(-299578268);
        tree.insert(-933994118);
        tree.insert(782140703);
        tree.insert(-225437634);
        tree.insert(333301868);
        tree.insert(159574376);
        tree.insert(575476893);
        tree.insert(175553263);
        tree.insert(779600636);
        tree.insert(-968573181);
        tree.insert(-455782201);
        tree.insert(769193915);
        tree.insert(-155837653);
        tree.insert(-248608498);
        tree.insert(578570731);
        tree.insert(51948718);
        tree.insert(941453376);
        tree.insert(146959486);
        tree.insert(-514230357);
        tree.insert(-818461672);
        tree.insert(785286222);
        tree.insert(64136679);
        tree.insert(197406014);
        tree.insert(149814903);
        tree.insert(-673673040);
        tree.insert(558202891);
        tree.insert(288676212);
        tree.insert(-991522228);
        tree.insert(-297802075);
        tree.insert(-939508494);
        tree.insert(-33585137);
        tree.insert(913046419);
        tree.insert(154025588);
        tree.insert(823342456);
        tree.insert(-871630254);
        tree.insert(654664044);
        Integer[] data = {-991522228, -984349569, -968573181, -951005393, -949525566, -946672081, -943611948, -939508494, -933994118, -933181578, -885644988, -878916594, -874094929, -871630254, -868679706, -855004799, -847567895, -846527250, -845786822, -839797663, -837119074, -823611645, -818461672, -818129096, -816319733, -801041146, -799593056, -786795282, -784655962, -782072308, -767601210, -758940098, -758537505, -719370929, -693920356, -690649117, -690116698, -678652197, -673673040, -655138755, -646160888, -630839975, -623330851, -621711664, -602903832, -601153906, -591276171, -585316131, -565819922, -564973195, -550511434, -546557698, -514358837, -514230357, -494271305, -487836865, -477699498, -477529127, -475432596, -469765253, -459796024, -455782201, -428621191, -427057870, -424693411, -421885567, -407423405, -401032936, -379590280, -376121173, -369352708, -367087036, -365390413, -361033634, -356650760, -355078832, -351947459, -344822693, -341385551, -341112981, -332833986, -328241346, -299578268, -297802075, -291718074, -291544970, -286510233, -283180920, -248608498, -234714700, -230729503, -230535583, -225437634, -202338282, -182407312, -155837653, -149928198, -149546599, -137704026, -124616674, -105032028, -103083950, -85590934, -48446583, -33585137, -31681613, 13636255, 23792470, 25162870, 34978311, 38543022, 41310933, 51948718, 64136679, 77036108, 83322204, 83805605, 94509104, 106057573, 146959486, 149814903, 154025588, 159574376, 175553263, 176188308, 187160093, 192989304, 197406014, 207025850, 213194607, 215369431, 216092774, 230140952, 246876177, 251474085, 268079826, 288676212, 307606617, 328488776, 333301868, 343522500, 347479337, 350357878, 376671096, 386957948, 403014667, 415215856, 423885291, 452009643, 476434084, 486670760, 514978232, 522451032, 526432835, 530339959, 539485227, 540857695, 546998040, 549827883, 558202891, 558445569, 570691683, 575476893, 578570731, 578626818, 591122033, 601246242, 622649434, 625895402, 630471593, 631582312, 654664044, 661360797, 662017904, 691812193, 693676372, 746572747, 769193915, 779600636, 782140703, 785286222, 790937825, 798838089, 807403879, 809765592, 817177915, 823342456, 837119610, 860909614, 864948374, 898210891, 913046419, 913687437, 917955737, 941453376, 945321898, 951085332, 956914530, 964590227, 971506030,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_27(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(275081939);
        tree.insert(-444903103);
        tree.insert(-79560155);
        tree.insert(977581832);
        tree.insert(200252687);
        tree.insert(-608013677);
        tree.insert(-179328993);
        tree.insert(220114798);
        tree.insert(904297124);
        tree.insert(470509956);
        tree.insert(739310992);
        tree.insert(689715326);
        tree.insert(149603451);
        tree.insert(742548684);
        tree.insert(8571037);
        tree.insert(266129005);
        tree.insert(640102124);
        tree.insert(526679404);
        tree.insert(64390860);
        tree.insert(676899018);
        tree.insert(-511376712);
        tree.insert(-840132027);
        tree.insert(419263224);
        tree.insert(169645313);
        tree.insert(-12606640);
        tree.insert(927460656);
        tree.insert(773241853);
        tree.insert(171451623);
        tree.insert(788274989);
        tree.insert(-895218780);
        tree.insert(517694965);
        tree.insert(-664660864);
        tree.insert(-349152426);
        tree.insert(451694057);
        tree.insert(617400794);
        tree.insert(241881543);
        tree.insert(876025138);
        tree.insert(470288943);
        tree.insert(-752425235);
        tree.insert(-700522845);
        tree.insert(391141173);
        tree.insert(-504229324);
        tree.insert(988062013);
        tree.insert(-296840234);
        tree.insert(674944763);
        tree.insert(-227580323);
        tree.insert(872205543);
        tree.insert(-780059869);
        tree.insert(90248249);
        tree.insert(95023320);
        tree.insert(804127803);
        tree.insert(963538111);
        tree.insert(871743212);
        tree.insert(-120483724);
        tree.insert(-916614212);
        tree.insert(-801872531);
        tree.insert(-612548910);
        tree.insert(28623025);
        tree.insert(81164000);
        tree.insert(-966118659);
        tree.insert(237102526);
        tree.insert(-470815708);
        tree.insert(318321371);
        tree.insert(692330174);
        tree.insert(-489916114);
        tree.insert(-59750944);
        tree.insert(-293492805);
        tree.insert(-274877761);
        tree.insert(-368617400);
        tree.insert(634158234);
        tree.insert(534050480);
        tree.insert(106532054);
        tree.insert(256441970);
        tree.insert(640480909);
        tree.insert(-685459043);
        tree.insert(435088206);
        tree.insert(671797777);
        tree.insert(57961628);
        tree.insert(-670850151);
        tree.insert(143364524);
        tree.insert(276210657);
        tree.insert(-663441844);
        tree.insert(-372844592);
        tree.insert(337471949);
        tree.insert(439174588);
        tree.insert(-130341959);
        tree.insert(-870189371);
        tree.insert(-792712756);
        tree.insert(-62226741);
        tree.insert(436112501);
        tree.insert(647148018);
        tree.insert(-752071291);
        tree.insert(-427149980);
        tree.insert(249842055);
        tree.insert(734196495);
        tree.insert(292425186);
        tree.insert(927636129);
        tree.insert(-647822733);
        tree.insert(110267881);
        tree.insert(362617642);
        tree.insert(313130556);
        tree.insert(-669294789);
        tree.insert(-773712636);
        tree.insert(-508710232);
        tree.insert(-270721412);
        tree.insert(756313420);
        tree.insert(-321622454);
        tree.insert(-913344846);
        tree.insert(525605213);
        tree.insert(-793984501);
        tree.insert(-695795552);
        tree.insert(827874262);
        tree.insert(-385040461);
        tree.insert(382183812);
        tree.insert(352168194);
        tree.insert(-933485578);
        tree.insert(495239940);
        tree.insert(775148118);
        tree.insert(229501094);
        tree.insert(136375773);
        tree.insert(-62661983);
        tree.insert(-385058998);
        tree.insert(-735026598);
        tree.insert(-638263696);
        tree.insert(194148679);
        tree.insert(-561696183);
        tree.insert(565919706);
        tree.insert(801289676);
        tree.insert(909197544);
        tree.insert(-838350305);
        tree.insert(-590670476);
        tree.insert(-898661863);
        tree.insert(71197625);
        tree.insert(-306023207);
        tree.insert(405985539);
        tree.insert(292964398);
        tree.insert(98809603);
        tree.insert(-684524467);
        tree.insert(4645593);
        tree.insert(-503568026);
        tree.insert(397468023);
        tree.insert(-687919549);
        tree.insert(-95242971);
        tree.insert(-760480790);
        tree.insert(-974029252);
        tree.insert(34247805);
        tree.insert(376208513);
        tree.insert(853781462);
        tree.insert(349076719);
        tree.insert(948269571);
        tree.insert(871569687);
        tree.insert(-28553849);
        tree.insert(454117045);
        tree.insert(-187891149);
        tree.insert(409678116);
        tree.insert(454342457);
        tree.insert(653098376);
        tree.insert(-216638277);
        tree.insert(-103673060);
        tree.insert(-708133768);
        tree.insert(936179629);
        tree.insert(191581105);
        tree.insert(-453302);
        tree.insert(812298632);
        tree.insert(-730801047);
        tree.insert(974548475);
        tree.insert(858200269);
        tree.insert(837695519);
        tree.insert(-148781022);
        tree.insert(-582718895);
        tree.insert(791810885);
        tree.insert(-256212267);
        tree.insert(-299071193);
        tree.insert(388878197);
        tree.insert(670742104);
        tree.insert(326592163);
        tree.insert(-902845170);
        tree.insert(-159330372);
        tree.insert(150725017);
        tree.insert(-791608962);
        tree.insert(231434684);
        tree.insert(-305079507);
        tree.insert(-660306428);
        tree.insert(858641669);
        tree.insert(-301329766);
        tree.insert(289849430);
        tree.insert(-72162003);
        tree.insert(-5094820);
        tree.insert(583369146);
        tree.insert(-65623577);
        tree.insert(986495023);
        tree.insert(-317409150);
        tree.insert(-25259894);
        tree.insert(-327280773);
        tree.insert(-111699121);
        tree.insert(148564447);
        tree.insert(-949541650);
        tree.insert(-870401886);
        tree.insert(-603717967);
        tree.insert(431266624);
        Integer[] data = {-974029252, -966118659, -949541650, -933485578, -916614212, -913344846, -902845170, -898661863, -895218780, -870401886, -870189371, -840132027, -838350305, -801872531, -793984501, -792712756, -791608962, -780059869, -773712636, -760480790, -752425235, -752071291, -735026598, -730801047, -708133768, -700522845, -695795552, -687919549, -685459043, -684524467, -670850151, -669294789, -664660864, -663441844, -660306428, -647822733, -638263696, -612548910, -608013677, -603717967, -590670476, -582718895, -561696183, -511376712, -508710232, -504229324, -503568026, -489916114, -470815708, -444903103, -427149980, -385058998, -385040461, -372844592, -368617400, -349152426, -327280773, -321622454, -317409150, -306023207, -305079507, -301329766, -299071193, -296840234, -293492805, -274877761, -270721412, -256212267, -227580323, -216638277, -187891149, -179328993, -159330372, -148781022, -130341959, -120483724, -111699121, -103673060, -95242971, -79560155, -72162003, -65623577, -62661983, -62226741, -59750944, -28553849, -25259894, -12606640, -5094820, -453302, 4645593, 8571037, 28623025, 34247805, 57961628, 64390860, 71197625, 81164000, 90248249, 95023320, 98809603, 106532054, 110267881, 136375773, 143364524, 148564447, 149603451, 150725017, 169645313, 171451623, 191581105, 194148679, 200252687, 220114798, 229501094, 231434684, 237102526, 241881543, 249842055, 256441970, 266129005, 275081939, 276210657, 289849430, 292425186, 292964398, 313130556, 318321371, 326592163, 337471949, 349076719, 352168194, 362617642, 376208513, 382183812, 388878197, 391141173, 397468023, 405985539, 409678116, 419263224, 431266624, 435088206, 436112501, 439174588, 451694057, 454117045, 454342457, 470288943, 470509956, 495239940, 517694965, 525605213, 526679404, 534050480, 565919706, 583369146, 617400794, 634158234, 640102124, 640480909, 647148018, 653098376, 670742104, 671797777, 674944763, 676899018, 689715326, 692330174, 734196495, 739310992, 742548684, 756313420, 773241853, 775148118, 788274989, 791810885, 801289676, 804127803, 812298632, 827874262, 837695519, 853781462, 858200269, 858641669, 871569687, 871743212, 872205543, 876025138, 904297124, 909197544, 927460656, 927636129, 936179629, 948269571, 963538111, 974548475, 977581832, 986495023, 988062013,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_28(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-266276492);
        tree.insert(-750844987);
        tree.insert(-169117181);
        tree.insert(385791889);
        tree.insert(625683827);
        tree.insert(235191751);
        tree.insert(656954080);
        tree.insert(448124239);
        tree.insert(-895460754);
        tree.insert(84298703);
        tree.insert(981774059);
        tree.insert(173294546);
        tree.insert(-908401754);
        tree.insert(612645426);
        tree.insert(-487768951);
        tree.insert(856725910);
        tree.insert(579230435);
        tree.insert(-443595904);
        tree.insert(-765397484);
        tree.insert(-3546618);
        tree.insert(-154789281);
        tree.insert(781954331);
        tree.insert(-96827052);
        tree.insert(-945931439);
        tree.insert(185394767);
        tree.insert(70578950);
        tree.insert(-555056362);
        tree.insert(744958984);
        tree.insert(-330416890);
        tree.insert(-144510843);
        tree.insert(222641398);
        tree.insert(-248195891);
        tree.insert(-608805929);
        tree.insert(-927737451);
        tree.insert(798171121);
        tree.insert(348777839);
        tree.insert(-698554844);
        tree.insert(-714589942);
        tree.insert(-813803536);
        tree.insert(603547756);
        tree.insert(-657447471);
        tree.insert(484137475);
        tree.insert(-384391189);
        tree.insert(692009713);
        tree.insert(270850991);
        tree.insert(-936352505);
        tree.insert(538106232);
        tree.insert(748267063);
        tree.insert(-237031314);
        tree.insert(62040762);
        tree.insert(459711985);
        tree.insert(420866766);
        tree.insert(-630245595);
        tree.insert(121777156);
        tree.insert(208261171);
        tree.insert(-983712739);
        tree.insert(-213414753);
        tree.insert(-119985866);
        tree.insert(571562392);
        tree.insert(-872813485);
        tree.insert(522761046);
        tree.insert(-817787414);
        tree.insert(683248995);
        tree.insert(-861958561);
        tree.insert(-374846772);
        tree.insert(128209091);
        tree.insert(255680416);
        tree.insert(292338153);
        tree.insert(-531069204);
        tree.insert(-258834987);
        tree.insert(-468495926);
        tree.insert(-527162376);
        tree.insert(-647869550);
        tree.insert(898077863);
        tree.insert(516310433);
        tree.insert(65291027);
        tree.insert(427359616);
        tree.insert(-144963108);
        tree.insert(460553951);
        tree.insert(-618349209);
        tree.insert(493854962);
        tree.insert(76872749);
        tree.insert(175886145);
        tree.insert(-581053812);
        tree.insert(-682011848);
        tree.insert(-133468164);
        tree.insert(-600144722);
        tree.insert(197400610);
        tree.insert(-545974316);
        tree.insert(-555427468);
        tree.insert(-353189578);
        tree.insert(-329720);
        tree.insert(648278741);
        tree.insert(111411703);
        tree.insert(-331742579);
        tree.insert(63361532);
        tree.insert(-948030485);
        tree.insert(-360160863);
        tree.insert(6282219);
        tree.insert(-808377677);
        tree.insert(717689529);
        tree.insert(-635701438);
        tree.insert(328810098);
        tree.insert(-47216059);
        tree.insert(-960773623);
        tree.insert(-982088990);
        tree.insert(174238075);
        tree.insert(778292579);
        tree.insert(-59518378);
        tree.insert(-261601050);
        tree.insert(96034220);
        tree.insert(-597757949);
        tree.insert(202440598);
        tree.insert(-827476045);
        tree.insert(557225668);
        tree.insert(-393520679);
        tree.insert(597704729);
        tree.insert(-192438675);
        tree.insert(-780024414);
        tree.insert(-341727165);
        tree.insert(808903517);
        tree.insert(-638320618);
        tree.insert(371008969);
        tree.insert(352845019);
        tree.insert(-214545561);
        tree.insert(829219303);
        tree.insert(-628043610);
        tree.insert(349435952);
        tree.insert(723831508);
        tree.insert(49060919);
        tree.insert(-932611612);
        tree.insert(-183286894);
        tree.insert(626026522);
        tree.insert(-995771629);
        tree.insert(32890004);
        tree.insert(508345514);
        tree.insert(-935052917);
        tree.insert(-652554914);
        tree.insert(-877650599);
        tree.insert(45741687);
        tree.insert(-484860790);
        tree.insert(131491637);
        tree.insert(-30573986);
        tree.insert(-509180970);
        tree.insert(-71500459);
        tree.insert(-587608636);
        tree.insert(177072386);
        tree.insert(743331591);
        tree.insert(-755453557);
        tree.insert(-728520538);
        tree.insert(-878476945);
        tree.insert(688852824);
        tree.insert(-544658891);
        tree.insert(-650199267);
        tree.insert(893310287);
        tree.insert(646026311);
        tree.insert(124098332);
        tree.insert(-186757355);
        tree.insert(-720347495);
        tree.insert(998263395);
        tree.insert(-976225093);
        tree.insert(483757564);
        tree.insert(677949226);
        tree.insert(515950688);
        tree.insert(-616319167);
        tree.insert(-456357053);
        tree.insert(-507037380);
        tree.insert(5096743);
        tree.insert(-700029604);
        tree.insert(-468869744);
        tree.insert(326435630);
        tree.insert(478206197);
        tree.insert(719211593);
        tree.insert(-524270838);
        tree.insert(530090328);
        tree.insert(824747465);
        tree.insert(-20598792);
        tree.insert(-395300733);
        tree.insert(469492046);
        tree.insert(16461209);
        tree.insert(-923558666);
        tree.insert(748173191);
        tree.insert(888916428);
        tree.insert(-627435503);
        tree.insert(-793026890);
        tree.insert(750702186);
        tree.insert(-138914190);
        tree.insert(-16590459);
        tree.insert(532082096);
        tree.insert(697051197);
        tree.insert(-857896293);
        tree.insert(829780545);
        tree.insert(-821306394);
        tree.insert(-64562759);
        tree.insert(814115329);
        tree.insert(-779494667);
        tree.insert(-330005903);
        tree.insert(-361963992);
        tree.insert(651642423);
        tree.insert(287958813);
        Integer[] data = {-995771629, -983712739, -982088990, -976225093, -960773623, -948030485, -945931439, -936352505, -935052917, -932611612, -927737451, -923558666, -908401754, -895460754, -878476945, -877650599, -872813485, -861958561, -857896293, -827476045, -821306394, -817787414, -813803536, -808377677, -793026890, -780024414, -779494667, -765397484, -755453557, -750844987, -728520538, -720347495, -714589942, -700029604, -698554844, -682011848, -657447471, -652554914, -650199267, -647869550, -638320618, -635701438, -630245595, -628043610, -627435503, -618349209, -616319167, -608805929, -600144722, -597757949, -587608636, -581053812, -555427468, -555056362, -545974316, -544658891, -531069204, -527162376, -524270838, -509180970, -507037380, -487768951, -484860790, -468869744, -468495926, -456357053, -443595904, -395300733, -393520679, -384391189, -374846772, -361963992, -360160863, -353189578, -341727165, -331742579, -330416890, -330005903, -266276492, -261601050, -258834987, -248195891, -237031314, -214545561, -213414753, -192438675, -186757355, -183286894, -169117181, -154789281, -144963108, -144510843, -138914190, -133468164, -119985866, -96827052, -71500459, -64562759, -59518378, -47216059, -30573986, -20598792, -16590459, -3546618, -329720, 5096743, 6282219, 16461209, 32890004, 45741687, 49060919, 62040762, 63361532, 65291027, 70578950, 76872749, 84298703, 96034220, 111411703, 121777156, 124098332, 128209091, 131491637, 173294546, 174238075, 175886145, 177072386, 185394767, 197400610, 202440598, 208261171, 222641398, 235191751, 255680416, 270850991, 287958813, 292338153, 326435630, 328810098, 348777839, 349435952, 352845019, 371008969, 385791889, 420866766, 427359616, 448124239, 459711985, 460553951, 469492046, 478206197, 483757564, 484137475, 493854962, 508345514, 515950688, 516310433, 522761046, 530090328, 532082096, 538106232, 557225668, 571562392, 579230435, 597704729, 603547756, 612645426, 625683827, 626026522, 646026311, 648278741, 651642423, 656954080, 677949226, 683248995, 688852824, 692009713, 697051197, 717689529, 719211593, 723831508, 743331591, 744958984, 748173191, 748267063, 750702186, 778292579, 781954331, 798171121, 808903517, 814115329, 824747465, 829219303, 829780545, 856725910, 888916428, 893310287, 898077863, 981774059, 998263395,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_29(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(128476486);
        tree.insert(500111021);
        tree.insert(-992998223);
        tree.insert(-529837754);
        tree.insert(-373052436);
        tree.insert(-825725078);
        tree.insert(860115857);
        tree.insert(-262801855);
        tree.insert(328612699);
        tree.insert(995100300);
        tree.insert(184423290);
        tree.insert(26313754);
        tree.insert(-710409443);
        tree.insert(399025274);
        tree.insert(789784904);
        tree.insert(-453721255);
        tree.insert(367531469);
        tree.insert(-870989164);
        tree.insert(-489322774);
        tree.insert(314956916);
        tree.insert(600386642);
        tree.insert(824607783);
        tree.insert(629006775);
        tree.insert(-171280751);
        tree.insert(-524363622);
        tree.insert(756579856);
        tree.insert(650406787);
        tree.insert(-837097683);
        tree.insert(734923055);
        tree.insert(315577093);
        tree.insert(-472281106);
        tree.insert(-182592623);
        tree.insert(-18799245);
        tree.insert(497566232);
        tree.insert(-470680678);
        tree.insert(505708959);
        tree.insert(-542686721);
        tree.insert(-993234483);
        tree.insert(738350904);
        tree.insert(632348661);
        tree.insert(977620103);
        tree.insert(-386600848);
        tree.insert(866393308);
        tree.insert(-797154391);
        tree.insert(510363186);
        tree.insert(-459961203);
        tree.insert(-168492876);
        tree.insert(778354308);
        tree.insert(-506758190);
        tree.insert(286763388);
        tree.insert(-525542336);
        tree.insert(-929164470);
        tree.insert(-305905305);
        tree.insert(516348523);
        tree.insert(795724921);
        tree.insert(-568101382);
        tree.insert(872429821);
        tree.insert(962637247);
        tree.insert(-294264394);
        tree.insert(147484094);
        tree.insert(605427387);
        tree.insert(58918946);
        tree.insert(43179760);
        tree.insert(121774712);
        tree.insert(-311012963);
        tree.insert(-808267369);
        tree.insert(-29194679);
        tree.insert(693116548);
        tree.insert(-580734422);
        tree.insert(302340322);
        tree.insert(-877812789);
        tree.insert(-814277794);
        tree.insert(251578436);
        tree.insert(-140578272);
        tree.insert(-625489362);
        tree.insert(-811280838);
        tree.insert(599174105);
        tree.insert(-820934462);
        tree.insert(-387083418);
        tree.insert(385059788);
        tree.insert(-280445172);
        tree.insert(628594202);
        tree.insert(-814659296);
        tree.insert(-219785503);
        tree.insert(-222423757);
        tree.insert(-912755193);
        tree.insert(-268789464);
        tree.insert(-459112425);
        tree.insert(-579916851);
        tree.insert(-715846023);
        tree.insert(745727521);
        tree.insert(585940294);
        tree.insert(949685438);
        tree.insert(-8791353);
        tree.insert(-178814752);
        tree.insert(375434428);
        tree.insert(695571375);
        tree.insert(-636558984);
        tree.insert(-222925188);
        tree.insert(576655498);
        tree.insert(825341569);
        tree.insert(317777475);
        tree.insert(-38735818);
        tree.insert(896542971);
        tree.insert(236009584);
        tree.insert(-951899725);
        tree.insert(125574450);
        tree.insert(-422203405);
        tree.insert(-954642477);
        tree.insert(501006057);
        tree.insert(645649443);
        tree.insert(328966688);
        tree.insert(998525338);
        tree.insert(-734985126);
        tree.insert(546918854);
        tree.insert(-938370077);
        tree.insert(-651564126);
        tree.insert(947206970);
        tree.insert(440184954);
        tree.insert(-319001223);
        tree.insert(784534138);
        tree.insert(-490316866);
        tree.insert(-489207786);
        tree.insert(954941197);
        tree.insert(118567767);
        tree.insert(877739426);
        tree.insert(-450426500);
        tree.insert(329757530);
        tree.insert(628271556);
        tree.insert(212312544);
        tree.insert(993397117);
        tree.insert(673841396);
        tree.insert(373897167);
        tree.insert(412682922);
        tree.insert(571910877);
        tree.insert(-508847998);
        tree.insert(-95159438);
        tree.insert(-793037082);
        tree.insert(654469979);
        tree.insert(-137370185);
        tree.insert(860741245);
        tree.insert(-343844070);
        tree.insert(365717001);
        tree.insert(-256350410);
        tree.insert(-437003609);
        tree.insert(145680255);
        tree.insert(153593701);
        tree.insert(478929713);
        tree.insert(-114506554);
        tree.insert(197455816);
        tree.insert(-366107179);
        tree.insert(91236563);
        tree.insert(-86152892);
        tree.insert(-286087975);
        tree.insert(-872288944);
        tree.insert(-648476371);
        tree.insert(-905218832);
        tree.insert(419627977);
        tree.insert(-197614448);
        tree.insert(-955850616);
        tree.insert(806979395);
        tree.insert(-219520865);
        tree.insert(860348841);
        tree.insert(-961612325);
        tree.insert(-412736458);
        tree.insert(-566094964);
        tree.insert(-136288032);
        tree.insert(-900582311);
        tree.insert(-499454627);
        tree.insert(-29577460);
        tree.insert(224050783);
        tree.insert(-212440005);
        tree.insert(-721638955);
        tree.insert(571051478);
        tree.insert(383274809);
        tree.insert(380444999);
        tree.insert(-117488007);
        tree.insert(244466941);
        tree.insert(341336738);
        tree.insert(-72229896);
        tree.insert(-963015252);
        tree.insert(424980849);
        tree.insert(778125066);
        tree.insert(793719431);
        tree.insert(-839729309);
        tree.insert(340532336);
        tree.insert(-408670542);
        tree.insert(-447688613);
        tree.insert(-379051051);
        tree.insert(981680410);
        tree.insert(-678657881);
        tree.insert(330004873);
        tree.insert(-444141839);
        tree.insert(443091106);
        tree.insert(395154496);
        tree.insert(582068908);
        tree.insert(-522117963);
        tree.insert(-707689289);
        tree.insert(186581367);
        tree.insert(22032127);
        Integer[] data = {-993234483, -992998223, -963015252, -961612325, -955850616, -954642477, -951899725, -938370077, -929164470, -912755193, -905218832, -900582311, -877812789, -872288944, -870989164, -839729309, -837097683, -825725078, -820934462, -814659296, -814277794, -811280838, -808267369, -797154391, -793037082, -734985126, -721638955, -715846023, -710409443, -707689289, -678657881, -651564126, -648476371, -636558984, -625489362, -580734422, -579916851, -568101382, -566094964, -542686721, -529837754, -525542336, -524363622, -522117963, -508847998, -506758190, -499454627, -490316866, -489322774, -489207786, -472281106, -470680678, -459961203, -459112425, -453721255, -450426500, -447688613, -444141839, -437003609, -422203405, -412736458, -408670542, -387083418, -386600848, -379051051, -373052436, -366107179, -343844070, -319001223, -311012963, -305905305, -294264394, -286087975, -280445172, -268789464, -262801855, -256350410, -222925188, -222423757, -219785503, -219520865, -212440005, -197614448, -182592623, -178814752, -171280751, -168492876, -140578272, -137370185, -136288032, -117488007, -114506554, -95159438, -86152892, -72229896, -38735818, -29577460, -29194679, -18799245, -8791353, 22032127, 26313754, 43179760, 58918946, 91236563, 118567767, 121774712, 125574450, 128476486, 145680255, 147484094, 153593701, 184423290, 186581367, 197455816, 212312544, 224050783, 236009584, 244466941, 251578436, 286763388, 302340322, 314956916, 315577093, 317777475, 328612699, 328966688, 329757530, 330004873, 340532336, 341336738, 365717001, 367531469, 373897167, 375434428, 380444999, 383274809, 385059788, 395154496, 399025274, 412682922, 419627977, 424980849, 440184954, 443091106, 478929713, 497566232, 500111021, 501006057, 505708959, 510363186, 516348523, 546918854, 571051478, 571910877, 576655498, 582068908, 585940294, 599174105, 600386642, 605427387, 628271556, 628594202, 629006775, 632348661, 645649443, 650406787, 654469979, 673841396, 693116548, 695571375, 734923055, 738350904, 745727521, 756579856, 778125066, 778354308, 784534138, 789784904, 793719431, 795724921, 806979395, 824607783, 825341569, 860115857, 860348841, 860741245, 866393308, 872429821, 877739426, 896542971, 947206970, 949685438, 954941197, 962637247, 977620103, 981680410, 993397117, 995100300, 998525338,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_30(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(900562221);
        tree.insert(-432282297);
        tree.insert(-856245921);
        tree.insert(945289408);
        tree.insert(730423138);
        tree.insert(419119115);
        tree.insert(385215080);
        tree.insert(463642048);
        tree.insert(-78395017);
        tree.insert(525890949);
        tree.insert(-44535619);
        tree.insert(-452894105);
        tree.insert(-572481750);
        tree.insert(28054518);
        tree.insert(-855858533);
        tree.insert(556050921);
        tree.insert(206954958);
        tree.insert(-962371057);
        tree.insert(761557892);
        tree.insert(270451306);
        tree.insert(-351963651);
        tree.insert(96690671);
        tree.insert(172164574);
        tree.insert(-758088458);
        tree.insert(-331574170);
        tree.insert(612036644);
        tree.insert(-486616483);
        tree.insert(43844324);
        tree.insert(136315885);
        tree.insert(-154839442);
        tree.insert(-18718433);
        tree.insert(-226946570);
        tree.insert(672631858);
        tree.insert(-950371626);
        tree.insert(478952265);
        tree.insert(-833719664);
        tree.insert(971401193);
        tree.insert(-161519745);
        tree.insert(543668975);
        tree.insert(-330374155);
        tree.insert(139409938);
        tree.insert(452764728);
        tree.insert(103190940);
        tree.insert(-564217222);
        tree.insert(258111093);
        tree.insert(-957567641);
        tree.insert(-546845195);
        tree.insert(-251180017);
        tree.insert(90213682);
        tree.insert(916546833);
        tree.insert(-728664818);
        tree.insert(-231100525);
        tree.insert(312475577);
        tree.insert(-609608865);
        tree.insert(960073973);
        tree.insert(668711096);
        tree.insert(-670255119);
        tree.insert(360782875);
        tree.insert(-414424384);
        tree.insert(-541321378);
        tree.insert(-788050007);
        tree.insert(-735721609);
        tree.insert(-405815955);
        tree.insert(954976716);
        tree.insert(-911264108);
        tree.insert(711697806);
        tree.insert(766056229);
        tree.insert(-910019002);
        tree.insert(-333269759);
        tree.insert(583640993);
        tree.insert(-986979590);
        tree.insert(-40608948);
        tree.insert(2485763);
        tree.insert(-39476557);
        tree.insert(-500518420);
        tree.insert(-797327004);
        tree.insert(609245235);
        tree.insert(941321638);
        tree.insert(773780240);
        tree.insert(484042866);
        tree.insert(-418639183);
        tree.insert(223900518);
        tree.insert(-580024835);
        tree.insert(999324002);
        tree.insert(-883142984);
        tree.insert(-510180295);
        tree.insert(-824972632);
        tree.insert(381513146);
        tree.insert(513388852);
        tree.insert(-862278635);
        tree.insert(777132625);
        tree.insert(859099789);
        tree.insert(-204117151);
        tree.insert(-482462909);
        tree.insert(-546583892);
        tree.insert(-513409380);
        tree.insert(713788262);
        tree.insert(-886307695);
        tree.insert(-778392743);
        tree.insert(699321661);
        tree.insert(776043498);
        tree.insert(469013370);
        tree.insert(737697243);
        tree.insert(291897323);
        tree.insert(213664642);
        tree.insert(-631197900);
        tree.insert(477854581);
        tree.insert(559166449);
        tree.insert(-368058868);
        tree.insert(-983415397);
        tree.insert(531784359);
        tree.insert(88949548);
        tree.insert(-740514428);
        tree.insert(816635914);
        tree.insert(746559325);
        tree.insert(163054198);
        tree.insert(-558136090);
        tree.insert(-444751122);
        tree.insert(-335500393);
        tree.insert(160977402);
        tree.insert(307713930);
        tree.insert(-775788617);
        tree.insert(-538996306);
        tree.insert(757586275);
        tree.insert(-121112330);
        tree.insert(-674032192);
        tree.insert(84852252);
        tree.insert(-233643564);
        tree.insert(639390730);
        tree.insert(243439575);
        tree.insert(-199603245);
        tree.insert(159402362);
        tree.insert(71706618);
        tree.insert(389479904);
        tree.insert(-391898885);
        tree.insert(718121986);
        tree.insert(-81773948);
        tree.insert(479347175);
        tree.insert(795512761);
        tree.insert(-30591291);
        tree.insert(-735174819);
        tree.insert(-906012552);
        tree.insert(941146405);
        tree.insert(373179545);
        tree.insert(475427844);
        tree.insert(-718662162);
        tree.insert(-156793885);
        tree.insert(-205367485);
        tree.insert(210147429);
        tree.insert(-996986157);
        tree.insert(831525722);
        tree.insert(-877415135);
        tree.insert(-891927988);
        tree.insert(697424972);
        tree.insert(353994307);
        tree.insert(140190933);
        tree.insert(-803909228);
        tree.insert(455703393);
        tree.insert(-871072789);
        tree.insert(-272613431);
        tree.insert(786453439);
        tree.insert(310808843);
        tree.insert(-666319285);
        tree.insert(834401406);
        tree.insert(929794605);
        tree.insert(-979887502);
        tree.insert(450710855);
        tree.insert(872612140);
        tree.insert(-977829155);
        tree.insert(369673051);
        tree.insert(-428573727);
        tree.insert(700774760);
        tree.insert(523032871);
        tree.insert(-703296040);
        tree.insert(-61202002);
        tree.insert(80955495);
        tree.insert(422507677);
        tree.insert(-448124842);
        tree.insert(-8713737);
        tree.insert(-235892222);
        tree.insert(-747638647);
        tree.insert(764721700);
        tree.insert(96173557);
        tree.insert(-841399354);
        tree.insert(-185428196);
        tree.insert(-610368902);
        tree.insert(-33622150);
        tree.insert(-316395494);
        tree.insert(-800635170);
        tree.insert(22214497);
        tree.insert(684871473);
        tree.insert(561412769);
        tree.insert(353112639);
        tree.insert(-746234923);
        tree.insert(603946528);
        tree.insert(503113159);
        tree.insert(469566055);
        tree.insert(254624226);
        tree.insert(539234505);
        tree.insert(326996138);
        Integer[] data = {-996986157, -986979590, -983415397, -979887502, -977829155, -962371057, -957567641, -950371626, -911264108, -910019002, -906012552, -891927988, -886307695, -883142984, -877415135, -871072789, -862278635, -856245921, -855858533, -841399354, -833719664, -824972632, -803909228, -800635170, -797327004, -788050007, -778392743, -775788617, -758088458, -747638647, -746234923, -740514428, -735721609, -735174819, -728664818, -718662162, -703296040, -674032192, -670255119, -666319285, -631197900, -610368902, -609608865, -580024835, -572481750, -564217222, -558136090, -546845195, -546583892, -541321378, -538996306, -513409380, -510180295, -500518420, -486616483, -482462909, -452894105, -448124842, -444751122, -432282297, -428573727, -418639183, -414424384, -405815955, -391898885, -368058868, -351963651, -335500393, -333269759, -331574170, -330374155, -316395494, -272613431, -251180017, -235892222, -233643564, -231100525, -226946570, -205367485, -204117151, -199603245, -185428196, -161519745, -156793885, -154839442, -121112330, -81773948, -78395017, -61202002, -44535619, -40608948, -39476557, -33622150, -30591291, -18718433, -8713737, 2485763, 22214497, 28054518, 43844324, 71706618, 80955495, 84852252, 88949548, 90213682, 96173557, 96690671, 103190940, 136315885, 139409938, 140190933, 159402362, 160977402, 163054198, 172164574, 206954958, 210147429, 213664642, 223900518, 243439575, 254624226, 258111093, 270451306, 291897323, 307713930, 310808843, 312475577, 326996138, 353112639, 353994307, 360782875, 369673051, 373179545, 381513146, 385215080, 389479904, 419119115, 422507677, 450710855, 452764728, 455703393, 463642048, 469013370, 469566055, 475427844, 477854581, 478952265, 479347175, 484042866, 503113159, 513388852, 523032871, 525890949, 531784359, 539234505, 543668975, 556050921, 559166449, 561412769, 583640993, 603946528, 609245235, 612036644, 639390730, 668711096, 672631858, 684871473, 697424972, 699321661, 700774760, 711697806, 713788262, 718121986, 730423138, 737697243, 746559325, 757586275, 761557892, 764721700, 766056229, 773780240, 776043498, 777132625, 786453439, 795512761, 816635914, 831525722, 834401406, 859099789, 872612140, 900562221, 916546833, 929794605, 941146405, 941321638, 945289408, 954976716, 960073973, 971401193, 999324002,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_31(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-825950930);
        tree.insert(-629813506);
        tree.insert(860079248);
        tree.insert(-952432853);
        tree.insert(422430721);
        tree.insert(-999166956);
        tree.insert(570140545);
        tree.insert(605076843);
        tree.insert(596504997);
        tree.insert(-993407700);
        tree.insert(-891088396);
        tree.insert(-186960732);
        tree.insert(340574914);
        tree.insert(-884615307);
        tree.insert(949311809);
        tree.insert(978257889);
        tree.insert(-984022884);
        tree.insert(231801788);
        tree.insert(471177695);
        tree.insert(193274306);
        tree.insert(621492116);
        tree.insert(-832625828);
        tree.insert(197753484);
        tree.insert(482982943);
        tree.insert(560808754);
        tree.insert(966444652);
        tree.insert(592764451);
        tree.insert(622352210);
        tree.insert(500353885);
        tree.insert(-10872683);
        tree.insert(700038523);
        tree.insert(-530818072);
        tree.insert(-838409565);
        tree.insert(-75568822);
        tree.insert(523948605);
        tree.insert(-290713556);
        tree.insert(-357992673);
        tree.insert(-710164605);
        tree.insert(978943119);
        tree.insert(-9009379);
        tree.insert(-163518461);
        tree.insert(-998187581);
        tree.insert(749044483);
        tree.insert(208747370);
        tree.insert(-120261854);
        tree.insert(-423366584);
        tree.insert(742524239);
        tree.insert(-838109113);
        tree.insert(-794522075);
        tree.insert(228998149);
        tree.insert(599739941);
        tree.insert(-583261973);
        tree.insert(-62351166);
        tree.insert(623636851);
        tree.insert(941179454);
        tree.insert(-401564555);
        tree.insert(474689776);
        tree.insert(-995979607);
        tree.insert(269165545);
        tree.insert(-811886145);
        tree.insert(548120977);
        tree.insert(-447932448);
        tree.insert(-655157665);
        tree.insert(-203179202);
        tree.insert(-75750994);
        tree.insert(928175558);
        tree.insert(-591737376);
        tree.insert(868444222);
        tree.insert(-598162533);
        tree.insert(946452920);
        tree.insert(-443803816);
        tree.insert(-543688196);
        tree.insert(-425009477);
        tree.insert(270520085);
        tree.insert(349024775);
        tree.insert(611474333);
        tree.insert(-396209090);
        tree.insert(226339339);
        tree.insert(-654652027);
        tree.insert(998233629);
        tree.insert(833342546);
        tree.insert(569684383);
        tree.insert(763972607);
        tree.insert(861938851);
        tree.insert(-624081093);
        tree.insert(436413603);
        tree.insert(602500408);
        tree.insert(-921431851);
        tree.insert(-916322863);
        tree.insert(-523539620);
        tree.insert(-200685901);
        tree.insert(-478936705);
        tree.insert(453533044);
        tree.insert(-45389731);
        tree.insert(-504505585);
        tree.insert(-177076410);
        tree.insert(273498885);
        tree.insert(-888575410);
        tree.insert(-271558100);
        tree.insert(43924717);
        tree.insert(673023163);
        tree.insert(-820611520);
        tree.insert(508668017);
        tree.insert(-172329175);
        tree.insert(-320917465);
        tree.insert(958209112);
        tree.insert(-66922129);
        tree.insert(812561854);
        tree.insert(982368354);
        tree.insert(-773928174);
        tree.insert(-756105415);
        tree.insert(-741867555);
        tree.insert(-319510102);
        tree.insert(-137178901);
        tree.insert(-650335253);
        tree.insert(-820388799);
        tree.insert(-770847954);
        tree.insert(363905560);
        tree.insert(876897846);
        tree.insert(-822232211);
        tree.insert(738464219);
        tree.insert(-394169311);
        tree.insert(118459467);
        tree.insert(-654592906);
        tree.insert(-223231428);
        tree.insert(-719551600);
        tree.insert(830319191);
        tree.insert(965963786);
        tree.insert(-233494244);
        tree.insert(942885532);
        tree.insert(-401224546);
        tree.insert(890447567);
        tree.insert(-233142710);
        tree.insert(-458806948);
        tree.insert(911621494);
        tree.insert(748419665);
        tree.insert(-71261925);
        tree.insert(-532757436);
        tree.insert(-839367663);
        tree.insert(477765503);
        tree.insert(36412537);
        tree.insert(724495155);
        tree.insert(133263831);
        tree.insert(-502970525);
        tree.insert(-670946632);
        tree.insert(410762619);
        tree.insert(-204976626);
        tree.insert(-228347155);
        tree.insert(-235578600);
        tree.insert(-333625066);
        tree.insert(-120827233);
        tree.insert(-629080589);
        tree.insert(-472117297);
        tree.insert(544977890);
        tree.insert(232344529);
        tree.insert(23548317);
        tree.insert(974778630);
        tree.insert(-110749319);
        tree.insert(251835814);
        tree.insert(86794824);
        tree.insert(359917145);
        tree.insert(290099540);
        tree.insert(717438229);
        tree.insert(-46248066);
        tree.insert(-571299102);
        tree.insert(423586085);
        tree.insert(668847673);
        tree.insert(-579771539);
        tree.insert(-208623432);
        tree.insert(62726764);
        tree.insert(-7415154);
        tree.insert(748558011);
        tree.insert(22668208);
        tree.insert(-323087656);
        tree.insert(-887023054);
        tree.insert(436728010);
        tree.insert(387255271);
        tree.insert(537138358);
        tree.insert(-973507162);
        tree.insert(503262088);
        tree.insert(-16665130);
        tree.insert(656555906);
        tree.insert(264231534);
        tree.insert(-854747689);
        tree.insert(553224928);
        tree.insert(-466858355);
        tree.insert(-928405954);
        tree.insert(395139007);
        tree.insert(-235200825);
        tree.insert(-125505586);
        tree.insert(26081121);
        tree.insert(245640374);
        tree.insert(724040529);
        tree.insert(906228119);
        tree.insert(-878452181);
        tree.insert(944586751);
        tree.insert(41729701);
        tree.insert(788866896);
        tree.insert(747438061);
        tree.insert(-324600184);
        Integer[] data = {-999166956, -998187581, -995979607, -993407700, -984022884, -973507162, -952432853, -928405954, -921431851, -916322863, -891088396, -888575410, -887023054, -884615307, -878452181, -854747689, -839367663, -838409565, -838109113, -832625828, -825950930, -822232211, -820611520, -820388799, -811886145, -794522075, -773928174, -770847954, -756105415, -741867555, -719551600, -710164605, -670946632, -655157665, -654652027, -654592906, -650335253, -629813506, -629080589, -624081093, -598162533, -591737376, -583261973, -579771539, -571299102, -543688196, -532757436, -530818072, -523539620, -504505585, -502970525, -478936705, -472117297, -466858355, -458806948, -447932448, -443803816, -425009477, -423366584, -401564555, -401224546, -396209090, -394169311, -357992673, -333625066, -324600184, -323087656, -320917465, -319510102, -290713556, -271558100, -235578600, -235200825, -233494244, -233142710, -228347155, -223231428, -208623432, -204976626, -203179202, -200685901, -186960732, -177076410, -172329175, -163518461, -137178901, -125505586, -120827233, -120261854, -110749319, -75750994, -75568822, -71261925, -66922129, -62351166, -46248066, -45389731, -16665130, -10872683, -9009379, -7415154, 22668208, 23548317, 26081121, 36412537, 41729701, 43924717, 62726764, 86794824, 118459467, 133263831, 193274306, 197753484, 208747370, 226339339, 228998149, 231801788, 232344529, 245640374, 251835814, 264231534, 269165545, 270520085, 273498885, 290099540, 340574914, 349024775, 359917145, 363905560, 387255271, 395139007, 410762619, 422430721, 423586085, 436413603, 436728010, 453533044, 471177695, 474689776, 477765503, 482982943, 500353885, 503262088, 508668017, 523948605, 537138358, 544977890, 548120977, 553224928, 560808754, 569684383, 570140545, 592764451, 596504997, 599739941, 602500408, 605076843, 611474333, 621492116, 622352210, 623636851, 656555906, 668847673, 673023163, 700038523, 717438229, 724040529, 724495155, 738464219, 742524239, 747438061, 748419665, 748558011, 749044483, 763972607, 788866896, 812561854, 830319191, 833342546, 860079248, 861938851, 868444222, 876897846, 890447567, 906228119, 911621494, 928175558, 941179454, 942885532, 944586751, 946452920, 949311809, 958209112, 965963786, 966444652, 974778630, 978257889, 978943119, 982368354, 998233629,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_32(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(211125805);
        tree.insert(159101424);
        tree.insert(-688297153);
        tree.insert(-776587924);
        tree.insert(-771235737);
        tree.insert(221932159);
        tree.insert(562725950);
        tree.insert(-716114976);
        tree.insert(304357707);
        tree.insert(-696939239);
        tree.insert(175268089);
        tree.insert(-431756026);
        tree.insert(437574609);
        tree.insert(640830046);
        tree.insert(-365271542);
        tree.insert(-558385002);
        tree.insert(-464424116);
        tree.insert(683660666);
        tree.insert(-176867067);
        tree.insert(328748071);
        tree.insert(994837281);
        tree.insert(514810812);
        tree.insert(-944448750);
        tree.insert(352038680);
        tree.insert(-342993304);
        tree.insert(-170295788);
        tree.insert(479660641);
        tree.insert(-193704530);
        tree.insert(-740328312);
        tree.insert(864231751);
        tree.insert(230724931);
        tree.insert(-269381401);
        tree.insert(606265986);
        tree.insert(-196193928);
        tree.insert(-850378867);
        tree.insert(-838641462);
        tree.insert(-210401343);
        tree.insert(-631515099);
        tree.insert(806447989);
        tree.insert(-949192849);
        tree.insert(695060657);
        tree.insert(725282316);
        tree.insert(646804481);
        tree.insert(-172550205);
        tree.insert(-292807425);
        tree.insert(936035778);
        tree.insert(-706749132);
        tree.insert(9943050);
        tree.insert(-377214050);
        tree.insert(113118174);
        tree.insert(-210835273);
        tree.insert(977560439);
        tree.insert(60145324);
        tree.insert(-414220094);
        tree.insert(-663411300);
        tree.insert(46878148);
        tree.insert(-1788681);
        tree.insert(651767777);
        tree.insert(491080052);
        tree.insert(-364095284);
        tree.insert(953530606);
        tree.insert(814862564);
        tree.insert(-745522465);
        tree.insert(-175760496);
        tree.insert(273932482);
        tree.insert(-753853807);
        tree.insert(-59675718);
        tree.insert(148668242);
        tree.insert(-483591067);
        tree.insert(-603372204);
        tree.insert(-279634556);
        tree.insert(-47829057);
        tree.insert(222370045);
        tree.insert(975697015);
        tree.insert(716602709);
        tree.insert(-232114779);
        tree.insert(-672801834);
        tree.insert(-285736174);
        tree.insert(-253404818);
        tree.insert(438314243);
        tree.insert(360199323);
        tree.insert(738750895);
        tree.insert(993763297);
        tree.insert(523616791);
        tree.insert(670678631);
        tree.insert(399728292);
        tree.insert(183254696);
        tree.insert(-44110601);
        tree.insert(-790826320);
        tree.insert(-566111418);
        tree.insert(661503596);
        tree.insert(39169550);
        tree.insert(419838766);
        tree.insert(-491250711);
        tree.insert(-225991325);
        tree.insert(-197709162);
        tree.insert(54097443);
        tree.insert(638749831);
        tree.insert(332923200);
        tree.insert(-233110060);
        tree.insert(944585082);
        tree.insert(828965447);
        tree.insert(-556525838);
        tree.insert(765477900);
        tree.insert(-119487080);
        tree.insert(-784989239);
        tree.insert(829912566);
        tree.insert(5780196);
        tree.insert(-194865384);
        tree.insert(659269654);
        tree.insert(128964366);
        tree.insert(-982558202);
        tree.insert(-854257056);
        tree.insert(637493626);
        tree.insert(-492513935);
        tree.insert(-677728703);
        tree.insert(-819759558);
        tree.insert(-106660163);
        tree.insert(762162816);
        tree.insert(-391497833);
        tree.insert(797343859);
        tree.insert(-851160293);
        tree.insert(805811067);
        tree.insert(380409423);
        tree.insert(-215397284);
        tree.insert(-292845137);
        tree.insert(-485466402);
        tree.insert(251669286);
        tree.insert(151568354);
        tree.insert(-578927368);
        tree.insert(-626652561);
        tree.insert(-196123604);
        tree.insert(-797420507);
        tree.insert(80971366);
        tree.insert(792269885);
        tree.insert(12969823);
        tree.insert(444057455);
        tree.insert(752661261);
        tree.insert(186634367);
        tree.insert(-973712188);
        tree.insert(233613141);
        tree.insert(562765336);
        tree.insert(-605187181);
        tree.insert(-166651184);
        tree.insert(533488563);
        tree.insert(-614130485);
        tree.insert(50188865);
        tree.insert(-273415001);
        tree.insert(-237026047);
        tree.insert(684518884);
        tree.insert(-217511387);
        tree.insert(-739977473);
        tree.insert(862352352);
        tree.insert(-325325417);
        tree.insert(386580280);
        tree.insert(-538270862);
        tree.insert(324328501);
        tree.insert(-324256908);
        tree.insert(-324142259);
        tree.insert(923406195);
        tree.insert(79023504);
        tree.insert(47060754);
        tree.insert(-90146024);
        tree.insert(583112559);
        tree.insert(-458505197);
        tree.insert(538075801);
        tree.insert(-456282943);
        tree.insert(-788901731);
        tree.insert(916951520);
        tree.insert(-944087211);
        tree.insert(39203741);
        tree.insert(-582086304);
        tree.insert(183475838);
        tree.insert(-72656117);
        tree.insert(-357254309);
        tree.insert(297351278);
        tree.insert(671473336);
        tree.insert(499862957);
        tree.insert(-783219362);
        tree.insert(691660931);
        tree.insert(420691364);
        tree.insert(-331496774);
        tree.insert(66811451);
        tree.insert(-174612673);
        tree.insert(27938109);
        tree.insert(638179809);
        tree.insert(-179148472);
        tree.insert(-233656548);
        tree.insert(826580697);
        tree.insert(690084007);
        tree.insert(277197416);
        tree.insert(-501528369);
        tree.insert(98175281);
        tree.insert(5485360);
        tree.insert(845749200);
        tree.insert(-759920409);
        tree.insert(74030735);
        tree.insert(462703653);
        tree.insert(-284445784);
        tree.insert(-568089646);
        Integer[] data = {-982558202, -973712188, -949192849, -944448750, -944087211, -854257056, -851160293, -850378867, -838641462, -819759558, -797420507, -790826320, -788901731, -784989239, -783219362, -776587924, -771235737, -759920409, -753853807, -745522465, -740328312, -739977473, -716114976, -706749132, -696939239, -688297153, -677728703, -672801834, -663411300, -631515099, -626652561, -614130485, -605187181, -603372204, -582086304, -578927368, -568089646, -566111418, -558385002, -556525838, -538270862, -501528369, -492513935, -491250711, -485466402, -483591067, -464424116, -458505197, -456282943, -431756026, -414220094, -391497833, -377214050, -365271542, -364095284, -357254309, -342993304, -331496774, -325325417, -324256908, -324142259, -292845137, -292807425, -285736174, -284445784, -279634556, -273415001, -269381401, -253404818, -237026047, -233656548, -233110060, -232114779, -225991325, -217511387, -215397284, -210835273, -210401343, -197709162, -196193928, -196123604, -194865384, -193704530, -179148472, -176867067, -175760496, -174612673, -172550205, -170295788, -166651184, -119487080, -106660163, -90146024, -72656117, -59675718, -47829057, -44110601, -1788681, 5485360, 5780196, 9943050, 12969823, 27938109, 39169550, 39203741, 46878148, 47060754, 50188865, 54097443, 60145324, 66811451, 74030735, 79023504, 80971366, 98175281, 113118174, 128964366, 148668242, 151568354, 159101424, 175268089, 183254696, 183475838, 186634367, 211125805, 221932159, 222370045, 230724931, 233613141, 251669286, 273932482, 277197416, 297351278, 304357707, 324328501, 328748071, 332923200, 352038680, 360199323, 380409423, 386580280, 399728292, 419838766, 420691364, 437574609, 438314243, 444057455, 462703653, 479660641, 491080052, 499862957, 514810812, 523616791, 533488563, 538075801, 562725950, 562765336, 583112559, 606265986, 637493626, 638179809, 638749831, 640830046, 646804481, 651767777, 659269654, 661503596, 670678631, 671473336, 683660666, 684518884, 690084007, 691660931, 695060657, 716602709, 725282316, 738750895, 752661261, 762162816, 765477900, 792269885, 797343859, 805811067, 806447989, 814862564, 826580697, 828965447, 829912566, 845749200, 862352352, 864231751, 916951520, 923406195, 936035778, 944585082, 953530606, 975697015, 977560439, 993763297, 994837281,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_33(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(657249005);
        tree.insert(-25281988);
        tree.insert(512929518);
        tree.insert(938559426);
        tree.insert(224161479);
        tree.insert(-8110215);
        tree.insert(312360593);
        tree.insert(666505501);
        tree.insert(-165626294);
        tree.insert(-695004246);
        tree.insert(-902058643);
        tree.insert(520799993);
        tree.insert(-577097857);
        tree.insert(-747396868);
        tree.insert(-27870560);
        tree.insert(-836758446);
        tree.insert(-340649815);
        tree.insert(-76395892);
        tree.insert(541179883);
        tree.insert(321891308);
        tree.insert(-635784313);
        tree.insert(779605732);
        tree.insert(-509850924);
        tree.insert(-507374297);
        tree.insert(545556687);
        tree.insert(-459073449);
        tree.insert(391112238);
        tree.insert(-129139773);
        tree.insert(-608946019);
        tree.insert(-124207059);
        tree.insert(201804217);
        tree.insert(129801932);
        tree.insert(473436444);
        tree.insert(757819698);
        tree.insert(-414767457);
        tree.insert(427274744);
        tree.insert(505965843);
        tree.insert(-124103584);
        tree.insert(38828511);
        tree.insert(92813045);
        tree.insert(777179695);
        tree.insert(-666256836);
        tree.insert(-113547754);
        tree.insert(275303153);
        tree.insert(805856204);
        tree.insert(-561719279);
        tree.insert(-532644499);
        tree.insert(728455966);
        tree.insert(-608310505);
        tree.insert(746682579);
        tree.insert(-998940169);
        tree.insert(-196867270);
        tree.insert(663063235);
        tree.insert(-243692854);
        tree.insert(-350112837);
        tree.insert(-320503264);
        tree.insert(977833702);
        tree.insert(244987674);
        tree.insert(288572029);
        tree.insert(174864959);
        tree.insert(-108637559);
        tree.insert(-679597535);
        tree.insert(-469836768);
        tree.insert(595863260);
        tree.insert(275739391);
        tree.insert(-44145357);
        tree.insert(-899202305);
        tree.insert(-489656270);
        tree.insert(495031866);
        tree.insert(-303421886);
        tree.insert(46587497);
        tree.insert(-348444322);
        tree.insert(128336640);
        tree.insert(680248496);
        tree.insert(348932731);
        tree.insert(-918423046);
        tree.insert(757129439);
        tree.insert(928022709);
        tree.insert(-621353686);
        tree.insert(549926095);
        tree.insert(209760170);
        tree.insert(567773525);
        tree.insert(542654781);
        tree.insert(620833123);
        tree.insert(-967136258);
        tree.insert(928457608);
        tree.insert(-604465650);
        tree.insert(769132557);
        tree.insert(-861031880);
        tree.insert(646584414);
        tree.insert(829110200);
        tree.insert(266763615);
        tree.insert(110413770);
        tree.insert(452361580);
        tree.insert(-874734205);
        tree.insert(-570709229);
        tree.insert(12806013);
        tree.insert(345798082);
        tree.insert(-234720851);
        tree.insert(-898767278);
        tree.insert(-318343663);
        tree.insert(654456310);
        tree.insert(406273060);
        tree.insert(-453013001);
        tree.insert(63135194);
        tree.insert(544572118);
        tree.insert(-754028597);
        tree.insert(-439850899);
        tree.insert(146871657);
        tree.insert(743688156);
        tree.insert(-701789453);
        tree.insert(-572055881);
        tree.insert(816490398);
        tree.insert(-329702390);
        tree.insert(-732574048);
        tree.insert(-139017897);
        tree.insert(-585162615);
        tree.insert(-824092696);
        tree.insert(565163678);
        tree.insert(24358894);
        tree.insert(394999904);
        tree.insert(-731878069);
        tree.insert(734682222);
        tree.insert(421927891);
        tree.insert(-881314157);
        tree.insert(617449310);
        tree.insert(268470842);
        tree.insert(-248702146);
        tree.insert(-96732429);
        tree.insert(521638315);
        tree.insert(547696579);
        tree.insert(135733209);
        tree.insert(270331421);
        tree.insert(-631389303);
        tree.insert(243123750);
        tree.insert(179062143);
        tree.insert(-889308573);
        tree.insert(-567160279);
        tree.insert(506536860);
        tree.insert(745938995);
        tree.insert(-890789250);
        tree.insert(608453621);
        tree.insert(-947121282);
        tree.insert(-372128627);
        tree.insert(-566406632);
        tree.insert(-891918667);
        tree.insert(233879990);
        tree.insert(157646804);
        tree.insert(-884101752);
        tree.insert(876192204);
        tree.insert(-677930041);
        tree.insert(-501354093);
        tree.insert(245267627);
        tree.insert(-8998956);
        tree.insert(58578670);
        tree.insert(547003628);
        tree.insert(757499185);
        tree.insert(-372914005);
        tree.insert(-250035214);
        tree.insert(-339740945);
        tree.insert(-109436256);
        tree.insert(984776451);
        tree.insert(-909143740);
        tree.insert(117844905);
        tree.insert(276231065);
        tree.insert(-799069104);
        tree.insert(-213718809);
        tree.insert(-783916164);
        tree.insert(599713704);
        tree.insert(985049542);
        tree.insert(-533248043);
        tree.insert(427376699);
        tree.insert(52568077);
        tree.insert(-994745608);
        tree.insert(-670623325);
        tree.insert(559490739);
        tree.insert(205154098);
        tree.insert(443162824);
        tree.insert(-151104207);
        tree.insert(-853548908);
        tree.insert(-222593550);
        tree.insert(240962253);
        tree.insert(744275686);
        tree.insert(-182272513);
        tree.insert(-126746294);
        tree.insert(-697855398);
        tree.insert(23722182);
        tree.insert(-409166176);
        tree.insert(-737540498);
        tree.insert(695834602);
        tree.insert(827135797);
        tree.insert(474924326);
        tree.insert(431746020);
        tree.insert(-132726055);
        tree.insert(-287466849);
        tree.insert(-498653250);
        tree.insert(-431462797);
        tree.insert(-935723610);
        tree.insert(-798235743);
        tree.insert(-382635257);
        Integer[] data = {-998940169, -994745608, -967136258, -947121282, -935723610, -918423046, -909143740, -902058643, -899202305, -898767278, -891918667, -890789250, -889308573, -884101752, -881314157, -874734205, -861031880, -853548908, -836758446, -824092696, -799069104, -798235743, -783916164, -754028597, -747396868, -737540498, -732574048, -731878069, -701789453, -697855398, -695004246, -679597535, -677930041, -670623325, -666256836, -635784313, -631389303, -621353686, -608946019, -608310505, -604465650, -585162615, -577097857, -572055881, -570709229, -567160279, -566406632, -561719279, -533248043, -532644499, -509850924, -507374297, -501354093, -498653250, -489656270, -469836768, -459073449, -453013001, -439850899, -431462797, -414767457, -409166176, -382635257, -372914005, -372128627, -350112837, -348444322, -340649815, -339740945, -329702390, -320503264, -318343663, -303421886, -287466849, -250035214, -248702146, -243692854, -234720851, -222593550, -213718809, -196867270, -182272513, -165626294, -151104207, -139017897, -132726055, -129139773, -126746294, -124207059, -124103584, -113547754, -109436256, -108637559, -96732429, -76395892, -44145357, -27870560, -25281988, -8998956, -8110215, 12806013, 23722182, 24358894, 38828511, 46587497, 52568077, 58578670, 63135194, 92813045, 110413770, 117844905, 128336640, 129801932, 135733209, 146871657, 157646804, 174864959, 179062143, 201804217, 205154098, 209760170, 224161479, 233879990, 240962253, 243123750, 244987674, 245267627, 266763615, 268470842, 270331421, 275303153, 275739391, 276231065, 288572029, 312360593, 321891308, 345798082, 348932731, 391112238, 394999904, 406273060, 421927891, 427274744, 427376699, 431746020, 443162824, 452361580, 473436444, 474924326, 495031866, 505965843, 506536860, 512929518, 520799993, 521638315, 541179883, 542654781, 544572118, 545556687, 547003628, 547696579, 549926095, 559490739, 565163678, 567773525, 595863260, 599713704, 608453621, 617449310, 620833123, 646584414, 654456310, 657249005, 663063235, 666505501, 680248496, 695834602, 728455966, 734682222, 743688156, 744275686, 745938995, 746682579, 757129439, 757499185, 757819698, 769132557, 777179695, 779605732, 805856204, 816490398, 827135797, 829110200, 876192204, 928022709, 928457608, 938559426, 977833702, 984776451, 985049542,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_34(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(164491014);
        tree.insert(331805603);
        tree.insert(-722221526);
        tree.insert(346850888);
        tree.insert(823305131);
        tree.insert(-291699244);
        tree.insert(61862373);
        tree.insert(-562320318);
        tree.insert(283502247);
        tree.insert(-519684895);
        tree.insert(-416347066);
        tree.insert(188322807);
        tree.insert(461459454);
        tree.insert(552478984);
        tree.insert(-997641094);
        tree.insert(966474349);
        tree.insert(-769960735);
        tree.insert(-883459356);
        tree.insert(-660691225);
        tree.insert(-516610271);
        tree.insert(783490913);
        tree.insert(3030435);
        tree.insert(-970842433);
        tree.insert(-677890720);
        tree.insert(-233781432);
        tree.insert(174174914);
        tree.insert(-383969269);
        tree.insert(332602682);
        tree.insert(-787270951);
        tree.insert(-682656850);
        tree.insert(834453474);
        tree.insert(-349033410);
        tree.insert(-785436197);
        tree.insert(-533456773);
        tree.insert(584913029);
        tree.insert(-980475782);
        tree.insert(974712071);
        tree.insert(-476788118);
        tree.insert(107849830);
        tree.insert(-520629248);
        tree.insert(738745328);
        tree.insert(-575669524);
        tree.insert(-954207954);
        tree.insert(-539747914);
        tree.insert(193313378);
        tree.insert(-478096706);
        tree.insert(661283665);
        tree.insert(-320712074);
        tree.insert(807155445);
        tree.insert(-272885620);
        tree.insert(580968434);
        tree.insert(-641626780);
        tree.insert(860996923);
        tree.insert(148078742);
        tree.insert(31658721);
        tree.insert(-911042603);
        tree.insert(-830530710);
        tree.insert(-737115127);
        tree.insert(-543333789);
        tree.insert(977078205);
        tree.insert(65123513);
        tree.insert(-950004278);
        tree.insert(-62206184);
        tree.insert(-207263939);
        tree.insert(-624868964);
        tree.insert(582610531);
        tree.insert(-135011917);
        tree.insert(242127326);
        tree.insert(345687524);
        tree.insert(-339545150);
        tree.insert(-286797996);
        tree.insert(-350916483);
        tree.insert(864251106);
        tree.insert(-948618046);
        tree.insert(925384942);
        tree.insert(-592957815);
        tree.insert(-716616136);
        tree.insert(564984278);
        tree.insert(-521631635);
        tree.insert(-822810304);
        tree.insert(357664002);
        tree.insert(-902406441);
        tree.insert(742604840);
        tree.insert(555523571);
        tree.insert(49656842);
        tree.insert(-634524792);
        tree.insert(-422460577);
        tree.insert(291018653);
        tree.insert(-40475167);
        tree.insert(771562706);
        tree.insert(-232839469);
        tree.insert(315214532);
        tree.insert(-419742588);
        tree.insert(651335284);
        tree.insert(-627629729);
        tree.insert(281216929);
        tree.insert(968577098);
        tree.insert(147009819);
        tree.insert(497345917);
        tree.insert(-848965525);
        tree.insert(765803245);
        tree.insert(-356385709);
        tree.insert(858406013);
        tree.insert(-1716325);
        tree.insert(343025903);
        tree.insert(-911714417);
        tree.insert(564304456);
        tree.insert(-433563533);
        tree.insert(554371472);
        tree.insert(81872655);
        tree.insert(562977376);
        tree.insert(456228845);
        tree.insert(-742207076);
        tree.insert(-61454005);
        tree.insert(-503338445);
        tree.insert(-605096367);
        tree.insert(894632801);
        tree.insert(-207461318);
        tree.insert(357375420);
        tree.insert(215179328);
        tree.insert(-669604287);
        tree.insert(32552020);
        tree.insert(-735158780);
        tree.insert(-560220299);
        tree.insert(58771423);
        tree.insert(-890317756);
        tree.insert(499148650);
        tree.insert(-411445230);
        tree.insert(654696426);
        tree.insert(-131482863);
        tree.insert(42297347);
        tree.insert(-45470090);
        tree.insert(-782145733);
        tree.insert(-986982148);
        tree.insert(-211787659);
        tree.insert(329407618);
        tree.insert(978198226);
        tree.insert(-247933466);
        tree.insert(-659509722);
        tree.insert(806021173);
        tree.insert(211333713);
        tree.insert(986013977);
        tree.insert(866344078);
        tree.insert(-283595422);
        tree.insert(878570851);
        tree.insert(-73717229);
        tree.insert(518561959);
        tree.insert(830032321);
        tree.insert(-588160345);
        tree.insert(-352717626);
        tree.insert(624057641);
        tree.insert(432751564);
        tree.insert(136973341);
        tree.insert(996514440);
        tree.insert(-206038758);
        tree.insert(196338765);
        tree.insert(201622182);
        tree.insert(-182736835);
        tree.insert(-299872225);
        tree.insert(733154809);
        tree.insert(-887088124);
        tree.insert(432057259);
        tree.insert(-498643430);
        tree.insert(-468281550);
        tree.insert(989711681);
        tree.insert(-765264448);
        tree.insert(-148826738);
        tree.insert(-708926250);
        tree.insert(-751711781);
        tree.insert(-896456497);
        tree.insert(-340564591);
        tree.insert(370493636);
        tree.insert(-174149069);
        tree.insert(280588254);
        tree.insert(-405519821);
        tree.insert(-117135929);
        tree.insert(-135874757);
        tree.insert(-911556007);
        tree.insert(588613178);
        tree.insert(14323263);
        tree.insert(-356106845);
        tree.insert(-407511065);
        tree.insert(938004350);
        tree.insert(-322941828);
        tree.insert(-348006672);
        tree.insert(475149763);
        tree.insert(671663052);
        tree.insert(-814299675);
        tree.insert(996798709);
        tree.insert(445578601);
        tree.insert(-615233518);
        tree.insert(611813505);
        tree.insert(344539439);
        tree.insert(-997494437);
        tree.insert(624542241);
        tree.insert(-49584720);
        tree.insert(-990491316);
        tree.insert(480875612);
        tree.insert(941955122);
        tree.insert(775892432);
        Integer[] data = {-997641094, -997494437, -990491316, -986982148, -980475782, -970842433, -954207954, -950004278, -948618046, -911714417, -911556007, -911042603, -902406441, -896456497, -890317756, -887088124, -883459356, -848965525, -830530710, -822810304, -814299675, -787270951, -785436197, -782145733, -769960735, -765264448, -751711781, -742207076, -737115127, -735158780, -722221526, -716616136, -708926250, -682656850, -677890720, -669604287, -660691225, -659509722, -641626780, -634524792, -627629729, -624868964, -615233518, -605096367, -592957815, -588160345, -575669524, -562320318, -560220299, -543333789, -539747914, -533456773, -521631635, -520629248, -519684895, -516610271, -503338445, -498643430, -478096706, -476788118, -468281550, -433563533, -422460577, -419742588, -416347066, -411445230, -407511065, -405519821, -383969269, -356385709, -356106845, -352717626, -350916483, -349033410, -348006672, -340564591, -339545150, -322941828, -320712074, -299872225, -291699244, -286797996, -283595422, -272885620, -247933466, -233781432, -232839469, -211787659, -207461318, -207263939, -206038758, -182736835, -174149069, -148826738, -135874757, -135011917, -131482863, -117135929, -73717229, -62206184, -61454005, -49584720, -45470090, -40475167, -1716325, 3030435, 14323263, 31658721, 32552020, 42297347, 49656842, 58771423, 61862373, 65123513, 81872655, 107849830, 136973341, 147009819, 148078742, 164491014, 174174914, 188322807, 193313378, 196338765, 201622182, 211333713, 215179328, 242127326, 280588254, 281216929, 283502247, 291018653, 315214532, 329407618, 331805603, 332602682, 343025903, 344539439, 345687524, 346850888, 357375420, 357664002, 370493636, 432057259, 432751564, 445578601, 456228845, 461459454, 475149763, 480875612, 497345917, 499148650, 518561959, 552478984, 554371472, 555523571, 562977376, 564304456, 564984278, 580968434, 582610531, 584913029, 588613178, 611813505, 624057641, 624542241, 651335284, 654696426, 661283665, 671663052, 733154809, 738745328, 742604840, 765803245, 771562706, 775892432, 783490913, 806021173, 807155445, 823305131, 830032321, 834453474, 858406013, 860996923, 864251106, 866344078, 878570851, 894632801, 925384942, 938004350, 941955122, 966474349, 968577098, 974712071, 977078205, 978198226, 986013977, 989711681, 996514440, 996798709,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_35(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-15484918);
        tree.insert(146762666);
        tree.insert(-52816157);
        tree.insert(-890285519);
        tree.insert(488173438);
        tree.insert(-737229240);
        tree.insert(-681393113);
        tree.insert(765082844);
        tree.insert(-800472655);
        tree.insert(-297084670);
        tree.insert(6596679);
        tree.insert(811394498);
        tree.insert(-738575314);
        tree.insert(-740831063);
        tree.insert(186057827);
        tree.insert(-306295138);
        tree.insert(265899843);
        tree.insert(-677380185);
        tree.insert(-315232534);
        tree.insert(973919957);
        tree.insert(45539221);
        tree.insert(-899664621);
        tree.insert(51571042);
        tree.insert(-62957621);
        tree.insert(856522066);
        tree.insert(21462102);
        tree.insert(483188263);
        tree.insert(-502352712);
        tree.insert(374828403);
        tree.insert(239193635);
        tree.insert(-828053325);
        tree.insert(344423596);
        tree.insert(150919344);
        tree.insert(836186567);
        tree.insert(-861977052);
        tree.insert(-504118099);
        tree.insert(898117656);
        tree.insert(852119367);
        tree.insert(471837868);
        tree.insert(38450829);
        tree.insert(-542864889);
        tree.insert(272856389);
        tree.insert(700611412);
        tree.insert(-111419305);
        tree.insert(-738053051);
        tree.insert(-819204528);
        tree.insert(470779526);
        tree.insert(-632391789);
        tree.insert(397594335);
        tree.insert(-987470407);
        tree.insert(162737880);
        tree.insert(978543853);
        tree.insert(110337168);
        tree.insert(961519249);
        tree.insert(-59977955);
        tree.insert(-486073008);
        tree.insert(-223706689);
        tree.insert(-876184768);
        tree.insert(-568823021);
        tree.insert(-894752824);
        tree.insert(287420423);
        tree.insert(839577262);
        tree.insert(940863316);
        tree.insert(-909923133);
        tree.insert(65262190);
        tree.insert(-852375846);
        tree.insert(-673005923);
        tree.insert(-9836554);
        tree.insert(232723609);
        tree.insert(-463312444);
        tree.insert(-483566249);
        tree.insert(877602892);
        tree.insert(-946745058);
        tree.insert(-43770712);
        tree.insert(-581637062);
        tree.insert(-465873327);
        tree.insert(46802830);
        tree.insert(720404329);
        tree.insert(482115373);
        tree.insert(-107091837);
        tree.insert(422433435);
        tree.insert(415433251);
        tree.insert(199649182);
        tree.insert(-421760204);
        tree.insert(304408304);
        tree.insert(692491102);
        tree.insert(-679012515);
        tree.insert(696619839);
        tree.insert(106645596);
        tree.insert(-632188881);
        tree.insert(320327217);
        tree.insert(-287236098);
        tree.insert(3686810);
        tree.insert(-387770091);
        tree.insert(439432610);
        tree.insert(47924051);
        tree.insert(312055252);
        tree.insert(-119348357);
        tree.insert(339378393);
        tree.insert(431153448);
        tree.insert(-738548856);
        tree.insert(442746582);
        tree.insert(-225453731);
        tree.insert(-678877545);
        tree.insert(817787349);
        tree.insert(-20888183);
        tree.insert(-315032100);
        tree.insert(-856522597);
        tree.insert(534718467);
        tree.insert(-141018083);
        tree.insert(-297347189);
        tree.insert(-794952327);
        tree.insert(335813786);
        tree.insert(73685680);
        tree.insert(-475588303);
        tree.insert(-773554510);
        tree.insert(-361431784);
        tree.insert(-787120564);
        tree.insert(474729509);
        tree.insert(-167916433);
        tree.insert(456937131);
        tree.insert(-542740355);
        tree.insert(-898490917);
        tree.insert(-194359104);
        tree.insert(182836058);
        tree.insert(-678105696);
        tree.insert(-783832228);
        tree.insert(-656106971);
        tree.insert(144312182);
        tree.insert(-302765092);
        tree.insert(-333038053);
        tree.insert(153533245);
        tree.insert(825112775);
        tree.insert(932903928);
        tree.insert(-243980987);
        tree.insert(-722808022);
        tree.insert(-466355328);
        tree.insert(-265329380);
        tree.insert(-823957726);
        tree.insert(-783635271);
        tree.insert(959402787);
        tree.insert(524041926);
        tree.insert(-301881490);
        tree.insert(-253986047);
        tree.insert(193307415);
        tree.insert(38086114);
        tree.insert(272553435);
        tree.insert(-178432838);
        tree.insert(474794964);
        tree.insert(758650635);
        tree.insert(-123364792);
        tree.insert(645890880);
        tree.insert(-992386372);
        tree.insert(-860237314);
        tree.insert(-241314413);
        tree.insert(-129404020);
        tree.insert(729972537);
        tree.insert(576203371);
        tree.insert(-712596393);
        tree.insert(-642601219);
        tree.insert(939105391);
        tree.insert(380313985);
        tree.insert(271262675);
        tree.insert(-66149830);
        tree.insert(-844098604);
        tree.insert(776113991);
        tree.insert(-963356002);
        tree.insert(-201050377);
        tree.insert(-796552255);
        tree.insert(-44740134);
        tree.insert(283950039);
        tree.insert(-170477400);
        tree.insert(-846759591);
        tree.insert(-758053984);
        tree.insert(855764877);
        tree.insert(-598894515);
        tree.insert(477989226);
        tree.insert(516656242);
        tree.insert(-777776268);
        tree.insert(909509940);
        tree.insert(-42081874);
        tree.insert(585604962);
        tree.insert(371527612);
        tree.insert(289051465);
        tree.insert(899703154);
        tree.insert(-219203072);
        tree.insert(428208188);
        tree.insert(-913678851);
        tree.insert(-945125899);
        tree.insert(-387309766);
        tree.insert(-505530125);
        tree.insert(547326114);
        tree.insert(301660521);
        tree.insert(-664712894);
        tree.insert(-457560562);
        tree.insert(345021540);
        tree.insert(874106344);
        tree.insert(859239709);
        tree.insert(646605788);
        tree.insert(-846286949);
        Integer[] data = {-992386372, -987470407, -963356002, -946745058, -945125899, -913678851, -909923133, -899664621, -898490917, -894752824, -890285519, -876184768, -861977052, -860237314, -856522597, -852375846, -846759591, -846286949, -844098604, -828053325, -823957726, -819204528, -800472655, -796552255, -794952327, -787120564, -783832228, -783635271, -777776268, -773554510, -758053984, -740831063, -738575314, -738548856, -738053051, -737229240, -722808022, -712596393, -681393113, -679012515, -678877545, -678105696, -677380185, -673005923, -664712894, -656106971, -642601219, -632391789, -632188881, -598894515, -581637062, -568823021, -542864889, -542740355, -505530125, -504118099, -502352712, -486073008, -483566249, -475588303, -466355328, -465873327, -463312444, -457560562, -421760204, -387770091, -387309766, -361431784, -333038053, -315232534, -315032100, -306295138, -302765092, -301881490, -297347189, -297084670, -287236098, -265329380, -253986047, -243980987, -241314413, -225453731, -223706689, -219203072, -201050377, -194359104, -178432838, -170477400, -167916433, -141018083, -129404020, -123364792, -119348357, -111419305, -107091837, -66149830, -62957621, -59977955, -52816157, -44740134, -43770712, -42081874, -20888183, -15484918, -9836554, 3686810, 6596679, 21462102, 38086114, 38450829, 45539221, 46802830, 47924051, 51571042, 65262190, 73685680, 106645596, 110337168, 144312182, 146762666, 150919344, 153533245, 162737880, 182836058, 186057827, 193307415, 199649182, 232723609, 239193635, 265899843, 271262675, 272553435, 272856389, 283950039, 287420423, 289051465, 301660521, 304408304, 312055252, 320327217, 335813786, 339378393, 344423596, 345021540, 371527612, 374828403, 380313985, 397594335, 415433251, 422433435, 428208188, 431153448, 439432610, 442746582, 456937131, 470779526, 471837868, 474729509, 474794964, 477989226, 482115373, 483188263, 488173438, 516656242, 524041926, 534718467, 547326114, 576203371, 585604962, 645890880, 646605788, 692491102, 696619839, 700611412, 720404329, 729972537, 758650635, 765082844, 776113991, 811394498, 817787349, 825112775, 836186567, 839577262, 852119367, 855764877, 856522066, 859239709, 874106344, 877602892, 898117656, 899703154, 909509940, 932903928, 939105391, 940863316, 959402787, 961519249, 973919957, 978543853,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_36(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(917392604);
        tree.insert(-740771646);
        tree.insert(429396524);
        tree.insert(181328450);
        tree.insert(-193284706);
        tree.insert(331319525);
        tree.insert(692730673);
        tree.insert(362717214);
        tree.insert(189734797);
        tree.insert(-431253889);
        tree.insert(-168422124);
        tree.insert(805028475);
        tree.insert(-49798234);
        tree.insert(-400441839);
        tree.insert(996460794);
        tree.insert(402138548);
        tree.insert(181422882);
        tree.insert(61046334);
        tree.insert(452666);
        tree.insert(517365323);
        tree.insert(-449396806);
        tree.insert(-427144634);
        tree.insert(434876252);
        tree.insert(-924637060);
        tree.insert(544132348);
        tree.insert(-638913902);
        tree.insert(-396053248);
        tree.insert(-944738544);
        tree.insert(243007471);
        tree.insert(-344242297);
        tree.insert(615133769);
        tree.insert(-903360883);
        tree.insert(513366132);
        tree.insert(527876219);
        tree.insert(-626310365);
        tree.insert(686188387);
        tree.insert(-742515802);
        tree.insert(-744666215);
        tree.insert(-428818304);
        tree.insert(146117402);
        tree.insert(-237571502);
        tree.insert(-484935632);
        tree.insert(91463157);
        tree.insert(327921202);
        tree.insert(453935224);
        tree.insert(-175553282);
        tree.insert(-229617767);
        tree.insert(938402950);
        tree.insert(-487408166);
        tree.insert(607853430);
        tree.insert(257194726);
        tree.insert(-484555314);
        tree.insert(424915869);
        tree.insert(-211296234);
        tree.insert(177624302);
        tree.insert(921278556);
        tree.insert(-833430271);
        tree.insert(274699456);
        tree.insert(-931121217);
        tree.insert(847283329);
        tree.insert(-944072895);
        tree.insert(198763215);
        tree.insert(397682703);
        tree.insert(268137238);
        tree.insert(-500547904);
        tree.insert(192897135);
        tree.insert(-637331013);
        tree.insert(-34114436);
        tree.insert(520436040);
        tree.insert(989084440);
        tree.insert(-678915052);
        tree.insert(888977436);
        tree.insert(-445666199);
        tree.insert(751374555);
        tree.insert(347482715);
        tree.insert(156556290);
        tree.insert(-203296097);
        tree.insert(475952006);
        tree.insert(-203752932);
        tree.insert(718601391);
        tree.insert(32705821);
        tree.insert(-825869044);
        tree.insert(805389625);
        tree.insert(626578610);
        tree.insert(247962410);
        tree.insert(605245363);
        tree.insert(406781109);
        tree.insert(249235932);
        tree.insert(850695660);
        tree.insert(-56585673);
        tree.insert(-512767768);
        tree.insert(-58515994);
        tree.insert(-337818526);
        tree.insert(-878191612);
        tree.insert(-327174586);
        tree.insert(310942067);
        tree.insert(207421673);
        tree.insert(-659329035);
        tree.insert(186814468);
        tree.insert(-459163619);
        tree.insert(221287379);
        tree.insert(-306430001);
        tree.insert(-519813195);
        tree.insert(702818154);
        tree.insert(527845279);
        tree.insert(-778497429);
        tree.insert(162060092);
        tree.insert(938252209);
        tree.insert(435572435);
        tree.insert(-154478738);
        tree.insert(445610968);
        tree.insert(-998684029);
        tree.insert(-195905804);
        tree.insert(843158213);
        tree.insert(-701241493);
        tree.insert(969057439);
        tree.insert(363430626);
        tree.insert(-404132409);
        tree.insert(-289002567);
        tree.insert(-871167638);
        tree.insert(146831654);
        tree.insert(-408526919);
        tree.insert(95857777);
        tree.insert(652603121);
        tree.insert(-782918713);
        tree.insert(-29275404);
        tree.insert(-341086712);
        tree.insert(419141470);
        tree.insert(-706708861);
        tree.insert(-707913655);
        tree.insert(-14075168);
        tree.insert(-27618831);
        tree.insert(-295794625);
        tree.insert(235439519);
        tree.insert(-200921151);
        tree.insert(734991840);
        tree.insert(392753665);
        tree.insert(514483746);
        tree.insert(682808993);
        tree.insert(-121383190);
        tree.insert(-992548836);
        tree.insert(47597630);
        tree.insert(-476977553);
        tree.insert(11548051);
        tree.insert(323802935);
        tree.insert(-554370960);
        tree.insert(-920393134);
        tree.insert(39252554);
        tree.insert(-847986130);
        tree.insert(-342546831);
        tree.insert(-479388895);
        tree.insert(730530903);
        tree.insert(414470425);
        tree.insert(377751421);
        tree.insert(-806383838);
        tree.insert(-6659457);
        tree.insert(-311963054);
        tree.insert(299612332);
        tree.insert(109257699);
        tree.insert(90530915);
        tree.insert(-641528952);
        tree.insert(341901670);
        tree.insert(77351750);
        tree.insert(363127983);
        tree.insert(-964003558);
        tree.insert(953975716);
        tree.insert(12943497);
        tree.insert(-379615705);
        tree.insert(313715980);
        tree.insert(336602447);
        tree.insert(-363218150);
        tree.insert(442939681);
        tree.insert(-771135649);
        tree.insert(207292893);
        tree.insert(-911043814);
        tree.insert(-30773819);
        tree.insert(-106507714);
        tree.insert(750254180);
        tree.insert(589579097);
        tree.insert(-661578268);
        tree.insert(-815488600);
        tree.insert(693941722);
        tree.insert(-793883653);
        tree.insert(285173054);
        tree.insert(479003354);
        tree.insert(-411264311);
        tree.insert(-65563444);
        tree.insert(714660399);
        tree.insert(640780909);
        tree.insert(286887516);
        tree.insert(-360265492);
        tree.insert(-839186406);
        tree.insert(-692812411);
        tree.insert(-651970250);
        tree.insert(-755934077);
        tree.insert(748013097);
        tree.insert(213528899);
        tree.insert(310880005);
        tree.insert(-946800499);
        tree.insert(-538695557);
        Integer[] data = {-998684029, -992548836, -964003558, -946800499, -944738544, -944072895, -931121217, -924637060, -920393134, -911043814, -903360883, -878191612, -871167638, -847986130, -839186406, -833430271, -825869044, -815488600, -806383838, -793883653, -782918713, -778497429, -771135649, -755934077, -744666215, -742515802, -740771646, -707913655, -706708861, -701241493, -692812411, -678915052, -661578268, -659329035, -651970250, -641528952, -638913902, -637331013, -626310365, -554370960, -538695557, -519813195, -512767768, -500547904, -487408166, -484935632, -484555314, -479388895, -476977553, -459163619, -449396806, -445666199, -431253889, -428818304, -427144634, -411264311, -408526919, -404132409, -400441839, -396053248, -379615705, -363218150, -360265492, -344242297, -342546831, -341086712, -337818526, -327174586, -311963054, -306430001, -295794625, -289002567, -237571502, -229617767, -211296234, -203752932, -203296097, -200921151, -195905804, -193284706, -175553282, -168422124, -154478738, -121383190, -106507714, -65563444, -58515994, -56585673, -49798234, -34114436, -30773819, -29275404, -27618831, -14075168, -6659457, 452666, 11548051, 12943497, 32705821, 39252554, 47597630, 61046334, 77351750, 90530915, 91463157, 95857777, 109257699, 146117402, 146831654, 156556290, 162060092, 177624302, 181328450, 181422882, 186814468, 189734797, 192897135, 198763215, 207292893, 207421673, 213528899, 221287379, 235439519, 243007471, 247962410, 249235932, 257194726, 268137238, 274699456, 285173054, 286887516, 299612332, 310880005, 310942067, 313715980, 323802935, 327921202, 331319525, 336602447, 341901670, 347482715, 362717214, 363127983, 363430626, 377751421, 392753665, 397682703, 402138548, 406781109, 414470425, 419141470, 424915869, 429396524, 434876252, 435572435, 442939681, 445610968, 453935224, 475952006, 479003354, 513366132, 514483746, 517365323, 520436040, 527845279, 527876219, 544132348, 589579097, 605245363, 607853430, 615133769, 626578610, 640780909, 652603121, 682808993, 686188387, 692730673, 693941722, 702818154, 714660399, 718601391, 730530903, 734991840, 748013097, 750254180, 751374555, 805028475, 805389625, 843158213, 847283329, 850695660, 888977436, 917392604, 921278556, 938252209, 938402950, 953975716, 969057439, 989084440, 996460794,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_37(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-436001634);
        tree.insert(-917304438);
        tree.insert(-31742885);
        tree.insert(328341317);
        tree.insert(692198315);
        tree.insert(-4925042);
        tree.insert(-18539892);
        tree.insert(236038585);
        tree.insert(-381852094);
        tree.insert(206500967);
        tree.insert(760220345);
        tree.insert(-736542105);
        tree.insert(35463856);
        tree.insert(-278919889);
        tree.insert(-628102596);
        tree.insert(-945625658);
        tree.insert(376951821);
        tree.insert(950508347);
        tree.insert(-112821412);
        tree.insert(710286456);
        tree.insert(119848752);
        tree.insert(994852339);
        tree.insert(242688110);
        tree.insert(-142485201);
        tree.insert(114086499);
        tree.insert(-494192685);
        tree.insert(-872353553);
        tree.insert(652643541);
        tree.insert(152669598);
        tree.insert(549867229);
        tree.insert(599421531);
        tree.insert(675456998);
        tree.insert(389949651);
        tree.insert(-882258);
        tree.insert(-281305301);
        tree.insert(-425115187);
        tree.insert(-492350072);
        tree.insert(-553815948);
        tree.insert(472906808);
        tree.insert(-153134741);
        tree.insert(-594477444);
        tree.insert(262972745);
        tree.insert(903111983);
        tree.insert(592557748);
        tree.insert(-913610034);
        tree.insert(-661852513);
        tree.insert(640333667);
        tree.insert(677463010);
        tree.insert(792049503);
        tree.insert(422657415);
        tree.insert(-309923272);
        tree.insert(671504396);
        tree.insert(357588517);
        tree.insert(329174332);
        tree.insert(-522601964);
        tree.insert(922317976);
        tree.insert(-44246140);
        tree.insert(-20793694);
        tree.insert(686200316);
        tree.insert(279560160);
        tree.insert(176598751);
        tree.insert(492586223);
        tree.insert(-782667397);
        tree.insert(740165719);
        tree.insert(-246460759);
        tree.insert(809518054);
        tree.insert(-202111877);
        tree.insert(651931156);
        tree.insert(-895964941);
        tree.insert(-264221344);
        tree.insert(-922336465);
        tree.insert(-709880121);
        tree.insert(756989948);
        tree.insert(-884766947);
        tree.insert(897073713);
        tree.insert(-573009306);
        tree.insert(135218912);
        tree.insert(-488050205);
        tree.insert(-987929559);
        tree.insert(-26584490);
        tree.insert(304162449);
        tree.insert(681644863);
        tree.insert(-181718577);
        tree.insert(-250890778);
        tree.insert(716956517);
        tree.insert(-999580279);
        tree.insert(-578195383);
        tree.insert(269651749);
        tree.insert(241444647);
        tree.insert(-916759492);
        tree.insert(167393505);
        tree.insert(292050601);
        tree.insert(579057509);
        tree.insert(865803562);
        tree.insert(-749761437);
        tree.insert(516872822);
        tree.insert(610098289);
        tree.insert(-547281940);
        tree.insert(304643370);
        tree.insert(-333928761);
        tree.insert(324660420);
        tree.insert(-827824038);
        tree.insert(850502473);
        tree.insert(-799537193);
        tree.insert(963456483);
        tree.insert(149372350);
        tree.insert(493099115);
        tree.insert(480847190);
        tree.insert(85031157);
        tree.insert(309823062);
        tree.insert(562475386);
        tree.insert(871261344);
        tree.insert(623994523);
        tree.insert(-588413143);
        tree.insert(-37438737);
        tree.insert(-674047737);
        tree.insert(-313716980);
        tree.insert(-417577162);
        tree.insert(-922027959);
        tree.insert(-403308922);
        tree.insert(-112955384);
        tree.insert(428502045);
        tree.insert(-846354565);
        tree.insert(571260669);
        tree.insert(-715847220);
        tree.insert(934139120);
        tree.insert(728093404);
        tree.insert(935936051);
        tree.insert(-838226791);
        tree.insert(-972016555);
        tree.insert(-259276593);
        tree.insert(-859409739);
        tree.insert(305194255);
        tree.insert(915106060);
        tree.insert(-647154819);
        tree.insert(570172766);
        tree.insert(344522700);
        tree.insert(-255723644);
        tree.insert(930225931);
        tree.insert(-400291163);
        tree.insert(381553910);
        tree.insert(-446697645);
        tree.insert(37797025);
        tree.insert(-65700951);
        tree.insert(807965210);
        tree.insert(141233888);
        tree.insert(-8714605);
        tree.insert(740388374);
        tree.insert(-860238123);
        tree.insert(712785089);
        tree.insert(-414469414);
        tree.insert(238250129);
        tree.insert(415694536);
        tree.insert(-948069278);
        tree.insert(-861810970);
        tree.insert(-102131376);
        tree.insert(37962415);
        tree.insert(-779760357);
        tree.insert(401005148);
        tree.insert(755696951);
        tree.insert(-940778142);
        tree.insert(-905979956);
        tree.insert(-596825109);
        tree.insert(103909315);
        tree.insert(627407133);
        tree.insert(-601318940);
        tree.insert(648978833);
        tree.insert(-59019389);
        tree.insert(-752966974);
        tree.insert(628938613);
        tree.insert(201517205);
        tree.insert(841445015);
        tree.insert(-363524437);
        tree.insert(491503464);
        tree.insert(308647603);
        tree.insert(-284937791);
        tree.insert(-906924950);
        tree.insert(-463964364);
        tree.insert(316515550);
        tree.insert(-584354115);
        tree.insert(643169554);
        tree.insert(805516087);
        tree.insert(-60958827);
        tree.insert(-270010584);
        tree.insert(400182808);
        tree.insert(-557210822);
        tree.insert(-529808308);
        tree.insert(738990175);
        tree.insert(-492060226);
        tree.insert(-973905744);
        tree.insert(907273343);
        tree.insert(347035957);
        tree.insert(937357144);
        tree.insert(-947550716);
        tree.insert(-872672131);
        tree.insert(414034244);
        tree.insert(-421212449);
        tree.insert(-142117703);
        tree.insert(-44072143);
        tree.insert(-983838459);
        Integer[] data = {-999580279, -987929559, -983838459, -973905744, -972016555, -948069278, -947550716, -945625658, -940778142, -922336465, -922027959, -917304438, -916759492, -913610034, -906924950, -905979956, -895964941, -884766947, -872672131, -872353553, -861810970, -860238123, -859409739, -846354565, -838226791, -827824038, -799537193, -782667397, -779760357, -752966974, -749761437, -736542105, -715847220, -709880121, -674047737, -661852513, -647154819, -628102596, -601318940, -596825109, -594477444, -588413143, -584354115, -578195383, -573009306, -557210822, -553815948, -547281940, -529808308, -522601964, -494192685, -492350072, -492060226, -488050205, -463964364, -446697645, -436001634, -425115187, -421212449, -417577162, -414469414, -403308922, -400291163, -381852094, -363524437, -333928761, -313716980, -309923272, -284937791, -281305301, -278919889, -270010584, -264221344, -259276593, -255723644, -250890778, -246460759, -202111877, -181718577, -153134741, -142485201, -142117703, -112955384, -112821412, -102131376, -65700951, -60958827, -59019389, -44246140, -44072143, -37438737, -31742885, -26584490, -20793694, -18539892, -8714605, -4925042, -882258, 35463856, 37797025, 37962415, 85031157, 103909315, 114086499, 119848752, 135218912, 141233888, 149372350, 152669598, 167393505, 176598751, 201517205, 206500967, 236038585, 238250129, 241444647, 242688110, 262972745, 269651749, 279560160, 292050601, 304162449, 304643370, 305194255, 308647603, 309823062, 316515550, 324660420, 328341317, 329174332, 344522700, 347035957, 357588517, 376951821, 381553910, 389949651, 400182808, 401005148, 414034244, 415694536, 422657415, 428502045, 472906808, 480847190, 491503464, 492586223, 493099115, 516872822, 549867229, 562475386, 570172766, 571260669, 579057509, 592557748, 599421531, 610098289, 623994523, 627407133, 628938613, 640333667, 643169554, 648978833, 651931156, 652643541, 671504396, 675456998, 677463010, 681644863, 686200316, 692198315, 710286456, 712785089, 716956517, 728093404, 738990175, 740165719, 740388374, 755696951, 756989948, 760220345, 792049503, 805516087, 807965210, 809518054, 841445015, 850502473, 865803562, 871261344, 897073713, 903111983, 907273343, 915106060, 922317976, 930225931, 934139120, 935936051, 937357144, 950508347, 963456483, 994852339,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_38(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(374321202);
        tree.insert(-430301584);
        tree.insert(143906171);
        tree.insert(196930962);
        tree.insert(-293098712);
        tree.insert(-254640896);
        tree.insert(-557632333);
        tree.insert(-865836060);
        tree.insert(4013251);
        tree.insert(555015719);
        tree.insert(-475473067);
        tree.insert(-807437350);
        tree.insert(-255016088);
        tree.insert(567827627);
        tree.insert(-373606995);
        tree.insert(406932286);
        tree.insert(-681626616);
        tree.insert(-526923263);
        tree.insert(-844316906);
        tree.insert(-484495924);
        tree.insert(687369023);
        tree.insert(596303176);
        tree.insert(-809998117);
        tree.insert(517850558);
        tree.insert(97715138);
        tree.insert(-870458427);
        tree.insert(295584559);
        tree.insert(950660090);
        tree.insert(3802659);
        tree.insert(122918496);
        tree.insert(15128241);
        tree.insert(972868519);
        tree.insert(815520015);
        tree.insert(-197698247);
        tree.insert(673518382);
        tree.insert(193958592);
        tree.insert(-520904878);
        tree.insert(174174072);
        tree.insert(-227944989);
        tree.insert(815016990);
        tree.insert(609003266);
        tree.insert(439663790);
        tree.insert(-50069254);
        tree.insert(102919024);
        tree.insert(368980676);
        tree.insert(555235643);
        tree.insert(-79831127);
        tree.insert(-265023880);
        tree.insert(813442781);
        tree.insert(901755352);
        tree.insert(640577850);
        tree.insert(52023171);
        tree.insert(498370532);
        tree.insert(-43898069);
        tree.insert(854056285);
        tree.insert(114252370);
        tree.insert(707562214);
        tree.insert(840591811);
        tree.insert(-376004926);
        tree.insert(-141212123);
        tree.insert(787455106);
        tree.insert(66967944);
        tree.insert(509476481);
        tree.insert(-702234908);
        tree.insert(-903066072);
        tree.insert(963347551);
        tree.insert(-107005571);
        tree.insert(238220395);
        tree.insert(-100010592);
        tree.insert(393193413);
        tree.insert(769109258);
        tree.insert(333002246);
        tree.insert(434644225);
        tree.insert(773807984);
        tree.insert(992548203);
        tree.insert(-568160740);
        tree.insert(970536973);
        tree.insert(358292768);
        tree.insert(-104198999);
        tree.insert(150996271);
        tree.insert(-923467628);
        tree.insert(-777792680);
        tree.insert(920993593);
        tree.insert(607044445);
        tree.insert(-769602796);
        tree.insert(-763906610);
        tree.insert(-702299079);
        tree.insert(-273311591);
        tree.insert(-654338419);
        tree.insert(-185956913);
        tree.insert(908534224);
        tree.insert(-994519333);
        tree.insert(493900383);
        tree.insert(755602514);
        tree.insert(-102212570);
        tree.insert(669213946);
        tree.insert(933844721);
        tree.insert(-826504691);
        tree.insert(880215982);
        tree.insert(884466086);
        tree.insert(925558512);
        tree.insert(134948983);
        tree.insert(-202353842);
        tree.insert(775395086);
        tree.insert(-776201117);
        tree.insert(87584456);
        tree.insert(452228558);
        tree.insert(-944327525);
        tree.insert(73697846);
        tree.insert(-959890566);
        tree.insert(-57998279);
        tree.insert(-679262530);
        tree.insert(-736903229);
        tree.insert(-94634229);
        tree.insert(433491337);
        tree.insert(-150965370);
        tree.insert(410498836);
        tree.insert(-517589318);
        tree.insert(-887130487);
        tree.insert(474456046);
        tree.insert(137565135);
        tree.insert(-220818731);
        tree.insert(-619072710);
        tree.insert(-528172538);
        tree.insert(201388844);
        tree.insert(-237029347);
        tree.insert(-464903363);
        tree.insert(120672731);
        tree.insert(309690245);
        tree.insert(-884313060);
        tree.insert(-514386180);
        tree.insert(982892200);
        tree.insert(649349005);
        tree.insert(638779750);
        tree.insert(-43401028);
        tree.insert(-105178899);
        tree.insert(676284415);
        tree.insert(-434725681);
        tree.insert(481729683);
        tree.insert(702787237);
        tree.insert(469482255);
        tree.insert(511372189);
        tree.insert(-193068009);
        tree.insert(549606261);
        tree.insert(706904779);
        tree.insert(-260183226);
        tree.insert(-129860231);
        tree.insert(-344592805);
        tree.insert(977228108);
        tree.insert(896467724);
        tree.insert(668448875);
        tree.insert(-947096869);
        tree.insert(899396800);
        tree.insert(-901530274);
        tree.insert(558627018);
        tree.insert(564804389);
        tree.insert(-553323666);
        tree.insert(6431540);
        tree.insert(372394502);
        tree.insert(-819645898);
        tree.insert(-630239647);
        tree.insert(603446134);
        tree.insert(277247801);
        tree.insert(520579077);
        tree.insert(-184925426);
        tree.insert(624333849);
        tree.insert(995057399);
        tree.insert(-339788752);
        tree.insert(-742416518);
        tree.insert(-870457308);
        tree.insert(258479736);
        tree.insert(-542715264);
        tree.insert(-394987145);
        tree.insert(973236119);
        tree.insert(100699039);
        tree.insert(-423844225);
        tree.insert(211642456);
        tree.insert(434809554);
        tree.insert(618591058);
        tree.insert(-24433777);
        tree.insert(540384570);
        tree.insert(-146085874);
        tree.insert(999180307);
        tree.insert(775114997);
        tree.insert(299068660);
        tree.insert(621087994);
        tree.insert(-165992102);
        tree.insert(321949660);
        tree.insert(498135332);
        tree.insert(381436538);
        tree.insert(-984016800);
        tree.insert(179952933);
        tree.insert(-428458791);
        tree.insert(-264091960);
        tree.insert(-306648564);
        tree.insert(-886685921);
        tree.insert(-967843301);
        tree.insert(-710071660);
        tree.insert(-13267106);
        tree.insert(-631128888);
        Integer[] data = {-994519333, -984016800, -967843301, -959890566, -947096869, -944327525, -923467628, -903066072, -901530274, -887130487, -886685921, -884313060, -870458427, -870457308, -865836060, -844316906, -826504691, -819645898, -809998117, -807437350, -777792680, -776201117, -769602796, -763906610, -742416518, -736903229, -710071660, -702299079, -702234908, -681626616, -679262530, -654338419, -631128888, -630239647, -619072710, -568160740, -557632333, -553323666, -542715264, -528172538, -526923263, -520904878, -517589318, -514386180, -484495924, -475473067, -464903363, -434725681, -430301584, -428458791, -423844225, -394987145, -376004926, -373606995, -344592805, -339788752, -306648564, -293098712, -273311591, -265023880, -264091960, -260183226, -255016088, -254640896, -237029347, -227944989, -220818731, -202353842, -197698247, -193068009, -185956913, -184925426, -165992102, -150965370, -146085874, -141212123, -129860231, -107005571, -105178899, -104198999, -102212570, -100010592, -94634229, -79831127, -57998279, -50069254, -43898069, -43401028, -24433777, -13267106, 3802659, 4013251, 6431540, 15128241, 52023171, 66967944, 73697846, 87584456, 97715138, 100699039, 102919024, 114252370, 120672731, 122918496, 134948983, 137565135, 143906171, 150996271, 174174072, 179952933, 193958592, 196930962, 201388844, 211642456, 238220395, 258479736, 277247801, 295584559, 299068660, 309690245, 321949660, 333002246, 358292768, 368980676, 372394502, 374321202, 381436538, 393193413, 406932286, 410498836, 433491337, 434644225, 434809554, 439663790, 452228558, 469482255, 474456046, 481729683, 493900383, 498135332, 498370532, 509476481, 511372189, 517850558, 520579077, 540384570, 549606261, 555015719, 555235643, 558627018, 564804389, 567827627, 596303176, 603446134, 607044445, 609003266, 618591058, 621087994, 624333849, 638779750, 640577850, 649349005, 668448875, 669213946, 673518382, 676284415, 687369023, 702787237, 706904779, 707562214, 755602514, 769109258, 773807984, 775114997, 775395086, 787455106, 813442781, 815016990, 815520015, 840591811, 854056285, 880215982, 884466086, 896467724, 899396800, 901755352, 908534224, 920993593, 925558512, 933844721, 950660090, 963347551, 970536973, 972868519, 973236119, 977228108, 982892200, 992548203, 995057399, 999180307,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_39(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(82605627);
        tree.insert(605133552);
        tree.insert(-946933223);
        tree.insert(982531114);
        tree.insert(-76630470);
        tree.insert(-610335497);
        tree.insert(241995714);
        tree.insert(-765768910);
        tree.insert(965580945);
        tree.insert(-561895373);
        tree.insert(890300321);
        tree.insert(-364446474);
        tree.insert(-709283520);
        tree.insert(-291619752);
        tree.insert(746023569);
        tree.insert(-583848196);
        tree.insert(-732634782);
        tree.insert(-299410035);
        tree.insert(645394650);
        tree.insert(194818645);
        tree.insert(-595946159);
        tree.insert(780306739);
        tree.insert(16595597);
        tree.insert(279522846);
        tree.insert(221407864);
        tree.insert(-762286223);
        tree.insert(431705625);
        tree.insert(-980761466);
        tree.insert(-611054071);
        tree.insert(569204730);
        tree.insert(252349023);
        tree.insert(270031215);
        tree.insert(194218452);
        tree.insert(-661000046);
        tree.insert(-795549464);
        tree.insert(-39474303);
        tree.insert(793893159);
        tree.insert(514508293);
        tree.insert(462806832);
        tree.insert(591835347);
        tree.insert(524842164);
        tree.insert(-133985930);
        tree.insert(-668983529);
        tree.insert(733799723);
        tree.insert(-988791587);
        tree.insert(969423209);
        tree.insert(503457910);
        tree.insert(532093196);
        tree.insert(-682006123);
        tree.insert(53564040);
        tree.insert(960675906);
        tree.insert(519969523);
        tree.insert(17349964);
        tree.insert(858694095);
        tree.insert(-905515625);
        tree.insert(-910636344);
        tree.insert(-149820786);
        tree.insert(-506408202);
        tree.insert(226697311);
        tree.insert(967236435);
        tree.insert(-73719523);
        tree.insert(-64638413);
        tree.insert(-129057807);
        tree.insert(790737227);
        tree.insert(-93920370);
        tree.insert(-925798067);
        tree.insert(-94619320);
        tree.insert(-878438734);
        tree.insert(-158170640);
        tree.insert(-912125323);
        tree.insert(-815099436);
        tree.insert(241996826);
        tree.insert(-102765387);
        tree.insert(667729847);
        tree.insert(-295870360);
        tree.insert(-410030318);
        tree.insert(-461927905);
        tree.insert(860035420);
        tree.insert(-43394796);
        tree.insert(756405275);
        tree.insert(-821802311);
        tree.insert(-909145368);
        tree.insert(326843903);
        tree.insert(-241981575);
        tree.insert(885380839);
        tree.insert(450744309);
        tree.insert(-866413869);
        tree.insert(388522428);
        tree.insert(-293833956);
        tree.insert(858682305);
        tree.insert(-346977097);
        tree.insert(191536416);
        tree.insert(-82151215);
        tree.insert(897082854);
        tree.insert(-671181300);
        tree.insert(-554119052);
        tree.insert(-730581527);
        tree.insert(-571439888);
        tree.insert(663265809);
        tree.insert(717240736);
        tree.insert(-435572417);
        tree.insert(-855950888);
        tree.insert(194847307);
        tree.insert(-316508218);
        tree.insert(210329150);
        tree.insert(528575353);
        tree.insert(25004436);
        tree.insert(-191549812);
        tree.insert(675399031);
        tree.insert(596785845);
        tree.insert(-784391560);
        tree.insert(-831011236);
        tree.insert(118275383);
        tree.insert(-21824646);
        tree.insert(577140304);
        tree.insert(-194713065);
        tree.insert(137056547);
        tree.insert(-346366489);
        tree.insert(862489462);
        tree.insert(790247557);
        tree.insert(699919635);
        tree.insert(-928920992);
        tree.insert(313559504);
        tree.insert(928593393);
        tree.insert(-871526412);
        tree.insert(-406497597);
        tree.insert(572515849);
        tree.insert(-658994617);
        tree.insert(-895911587);
        tree.insert(-391115292);
        tree.insert(-315637377);
        tree.insert(-496054751);
        tree.insert(406822315);
        tree.insert(-222397226);
        tree.insert(296278289);
        tree.insert(842761719);
        tree.insert(535956511);
        tree.insert(-368006694);
        tree.insert(698217584);
        tree.insert(-641450390);
        tree.insert(52251873);
        tree.insert(513509185);
        tree.insert(38614224);
        tree.insert(12904038);
        tree.insert(-953022789);
        tree.insert(-992427676);
        tree.insert(907724225);
        tree.insert(-416221244);
        tree.insert(617163528);
        tree.insert(-341106813);
        tree.insert(94298084);
        tree.insert(-825788982);
        tree.insert(-20854524);
        tree.insert(40448188);
        tree.insert(-800993219);
        tree.insert(524316728);
        tree.insert(412678387);
        tree.insert(-107498105);
        tree.insert(919725162);
        tree.insert(-390530004);
        tree.insert(880855485);
        tree.insert(-30201202);
        tree.insert(-947861710);
        tree.insert(-22197957);
        tree.insert(-671427557);
        tree.insert(211924628);
        tree.insert(802165361);
        tree.insert(-117116738);
        tree.insert(-935686253);
        tree.insert(874377013);
        tree.insert(-921456738);
        tree.insert(-308973003);
        tree.insert(-515205229);
        tree.insert(32792693);
        tree.insert(-292102489);
        tree.insert(-293896669);
        tree.insert(979135995);
        tree.insert(-411588837);
        tree.insert(706805938);
        tree.insert(689393953);
        tree.insert(580975133);
        tree.insert(998018923);
        tree.insert(-928981954);
        tree.insert(215804813);
        tree.insert(-455223992);
        tree.insert(-789324380);
        tree.insert(782926118);
        tree.insert(-321143289);
        tree.insert(791620780);
        tree.insert(612170897);
        tree.insert(640373878);
        tree.insert(-336528982);
        tree.insert(-343683078);
        tree.insert(866037507);
        tree.insert(-576661367);
        tree.insert(663980591);
        tree.insert(642994368);
        tree.insert(-862493298);
        tree.insert(821902175);
        tree.insert(918375545);
        Integer[] data = {-992427676, -988791587, -980761466, -953022789, -947861710, -946933223, -935686253, -928981954, -928920992, -925798067, -921456738, -912125323, -910636344, -909145368, -905515625, -895911587, -878438734, -871526412, -866413869, -862493298, -855950888, -831011236, -825788982, -821802311, -815099436, -800993219, -795549464, -789324380, -784391560, -765768910, -762286223, -732634782, -730581527, -709283520, -682006123, -671427557, -671181300, -668983529, -661000046, -658994617, -641450390, -611054071, -610335497, -595946159, -583848196, -576661367, -571439888, -561895373, -554119052, -515205229, -506408202, -496054751, -461927905, -455223992, -435572417, -416221244, -411588837, -410030318, -406497597, -391115292, -390530004, -368006694, -364446474, -346977097, -346366489, -343683078, -341106813, -336528982, -321143289, -316508218, -315637377, -308973003, -299410035, -295870360, -293896669, -293833956, -292102489, -291619752, -241981575, -222397226, -194713065, -191549812, -158170640, -149820786, -133985930, -129057807, -117116738, -107498105, -102765387, -94619320, -93920370, -82151215, -76630470, -73719523, -64638413, -43394796, -39474303, -30201202, -22197957, -21824646, -20854524, 12904038, 16595597, 17349964, 25004436, 32792693, 38614224, 40448188, 52251873, 53564040, 82605627, 94298084, 118275383, 137056547, 191536416, 194218452, 194818645, 194847307, 210329150, 211924628, 215804813, 221407864, 226697311, 241995714, 241996826, 252349023, 270031215, 279522846, 296278289, 313559504, 326843903, 388522428, 406822315, 412678387, 431705625, 450744309, 462806832, 503457910, 513509185, 514508293, 519969523, 524316728, 524842164, 528575353, 532093196, 535956511, 569204730, 572515849, 577140304, 580975133, 591835347, 596785845, 605133552, 612170897, 617163528, 640373878, 642994368, 645394650, 663265809, 663980591, 667729847, 675399031, 689393953, 698217584, 699919635, 706805938, 717240736, 733799723, 746023569, 756405275, 780306739, 782926118, 790247557, 790737227, 791620780, 793893159, 802165361, 821902175, 842761719, 858682305, 858694095, 860035420, 862489462, 866037507, 874377013, 880855485, 885380839, 890300321, 897082854, 907724225, 918375545, 919725162, 928593393, 960675906, 965580945, 967236435, 969423209, 979135995, 982531114, 998018923,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_40(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(148404289);
        tree.insert(428646416);
        tree.insert(-709626926);
        tree.insert(719324359);
        tree.insert(941561632);
        tree.insert(-98897948);
        tree.insert(783218646);
        tree.insert(-640247332);
        tree.insert(520071568);
        tree.insert(-543370283);
        tree.insert(-531502290);
        tree.insert(769123384);
        tree.insert(111673324);
        tree.insert(-227831098);
        tree.insert(912047188);
        tree.insert(-741382491);
        tree.insert(-197957989);
        tree.insert(862652988);
        tree.insert(-239249718);
        tree.insert(-681717388);
        tree.insert(304008984);
        tree.insert(121528583);
        tree.insert(855783049);
        tree.insert(-885564358);
        tree.insert(-686721302);
        tree.insert(355320093);
        tree.insert(-130746532);
        tree.insert(7765606);
        tree.insert(672503874);
        tree.insert(-305265205);
        tree.insert(-422536056);
        tree.insert(-377961536);
        tree.insert(-826142944);
        tree.insert(-730533428);
        tree.insert(116906210);
        tree.insert(-595547954);
        tree.insert(599996309);
        tree.insert(-714388187);
        tree.insert(7586004);
        tree.insert(369348940);
        tree.insert(489712023);
        tree.insert(515367033);
        tree.insert(426033352);
        tree.insert(-238140446);
        tree.insert(-316042941);
        tree.insert(-635676541);
        tree.insert(23468588);
        tree.insert(552510420);
        tree.insert(591354506);
        tree.insert(602887481);
        tree.insert(-150798241);
        tree.insert(695270386);
        tree.insert(138636811);
        tree.insert(667994807);
        tree.insert(566700785);
        tree.insert(-930150490);
        tree.insert(524723286);
        tree.insert(923009333);
        tree.insert(851960229);
        tree.insert(-245242010);
        tree.insert(260686101);
        tree.insert(965457673);
        tree.insert(219257257);
        tree.insert(-638044175);
        tree.insert(272211951);
        tree.insert(-384578503);
        tree.insert(-780175827);
        tree.insert(450584799);
        tree.insert(-877208741);
        tree.insert(317330977);
        tree.insert(-682743515);
        tree.insert(564571193);
        tree.insert(756931055);
        tree.insert(-862407900);
        tree.insert(594226878);
        tree.insert(-874489099);
        tree.insert(-813087907);
        tree.insert(624162354);
        tree.insert(-566821777);
        tree.insert(-934109590);
        tree.insert(786631873);
        tree.insert(-948493433);
        tree.insert(76077014);
        tree.insert(45724908);
        tree.insert(619371058);
        tree.insert(-481177977);
        tree.insert(-577920348);
        tree.insert(-501148071);
        tree.insert(939388237);
        tree.insert(444561657);
        tree.insert(866305315);
        tree.insert(850848506);
        tree.insert(216788251);
        tree.insert(351482909);
        tree.insert(782767789);
        tree.insert(79410160);
        tree.insert(184906199);
        tree.insert(-339452556);
        tree.insert(-438191928);
        tree.insert(-458185155);
        tree.insert(569137263);
        tree.insert(-180259135);
        tree.insert(-426772408);
        tree.insert(230973616);
        tree.insert(635517441);
        tree.insert(161386829);
        tree.insert(276534665);
        tree.insert(-338813914);
        tree.insert(470653437);
        tree.insert(-89257241);
        tree.insert(-52832296);
        tree.insert(53186673);
        tree.insert(-766622023);
        tree.insert(-140304010);
        tree.insert(-26920722);
        tree.insert(-504187538);
        tree.insert(-180142803);
        tree.insert(-795810018);
        tree.insert(-200231299);
        tree.insert(-573383084);
        tree.insert(-149028241);
        tree.insert(-35202835);
        tree.insert(-192049776);
        tree.insert(-597279797);
        tree.insert(-153205806);
        tree.insert(530040314);
        tree.insert(34209323);
        tree.insert(769289000);
        tree.insert(-933980431);
        tree.insert(505693352);
        tree.insert(-293229178);
        tree.insert(-479375020);
        tree.insert(745145147);
        tree.insert(-719338332);
        tree.insert(869542372);
        tree.insert(888236297);
        tree.insert(-629654297);
        tree.insert(245018003);
        tree.insert(-106958912);
        tree.insert(611419774);
        tree.insert(-690873097);
        tree.insert(-978085083);
        tree.insert(610932189);
        tree.insert(-610555438);
        tree.insert(-672129546);
        tree.insert(181201223);
        tree.insert(99129153);
        tree.insert(694467181);
        tree.insert(-530897372);
        tree.insert(661948652);
        tree.insert(866295366);
        tree.insert(488463229);
        tree.insert(-985065879);
        tree.insert(871107248);
        tree.insert(730642132);
        tree.insert(-617702666);
        tree.insert(-760187981);
        tree.insert(-329801661);
        tree.insert(-250609224);
        tree.insert(100646070);
        tree.insert(-228979793);
        tree.insert(-466950851);
        tree.insert(-364682826);
        tree.insert(-965355909);
        tree.insert(443350252);
        tree.insert(-490951267);
        tree.insert(-153623850);
        tree.insert(832965593);
        tree.insert(-720065119);
        tree.insert(826556152);
        tree.insert(-406229781);
        tree.insert(-811424361);
        tree.insert(200584125);
        tree.insert(-376942223);
        tree.insert(42712436);
        tree.insert(325936533);
        tree.insert(78685970);
        tree.insert(81900966);
        tree.insert(857273142);
        tree.insert(806904280);
        tree.insert(823353469);
        tree.insert(-521417120);
        tree.insert(42242601);
        tree.insert(-152443051);
        tree.insert(329068798);
        tree.insert(997530626);
        tree.insert(-127637591);
        tree.insert(653652274);
        tree.insert(-995205668);
        tree.insert(-343453432);
        tree.insert(-371390316);
        tree.insert(619267313);
        tree.insert(660531880);
        tree.insert(343445588);
        tree.insert(636534585);
        tree.insert(884902758);
        tree.insert(606398414);
        tree.insert(961348831);
        tree.insert(284249015);
        tree.insert(-53510170);
        Integer[] data = {-995205668, -985065879, -978085083, -965355909, -948493433, -934109590, -933980431, -930150490, -885564358, -877208741, -874489099, -862407900, -826142944, -813087907, -811424361, -795810018, -780175827, -766622023, -760187981, -741382491, -730533428, -720065119, -719338332, -714388187, -709626926, -690873097, -686721302, -682743515, -681717388, -672129546, -640247332, -638044175, -635676541, -629654297, -617702666, -610555438, -597279797, -595547954, -577920348, -573383084, -566821777, -543370283, -531502290, -530897372, -521417120, -504187538, -501148071, -490951267, -481177977, -479375020, -466950851, -458185155, -438191928, -426772408, -422536056, -406229781, -384578503, -377961536, -376942223, -371390316, -364682826, -343453432, -339452556, -338813914, -329801661, -316042941, -305265205, -293229178, -250609224, -245242010, -239249718, -238140446, -228979793, -227831098, -200231299, -197957989, -192049776, -180259135, -180142803, -153623850, -153205806, -152443051, -150798241, -149028241, -140304010, -130746532, -127637591, -106958912, -98897948, -89257241, -53510170, -52832296, -35202835, -26920722, 7586004, 7765606, 23468588, 34209323, 42242601, 42712436, 45724908, 53186673, 76077014, 78685970, 79410160, 81900966, 99129153, 100646070, 111673324, 116906210, 121528583, 138636811, 148404289, 161386829, 181201223, 184906199, 200584125, 216788251, 219257257, 230973616, 245018003, 260686101, 272211951, 276534665, 284249015, 304008984, 317330977, 325936533, 329068798, 343445588, 351482909, 355320093, 369348940, 426033352, 428646416, 443350252, 444561657, 450584799, 470653437, 488463229, 489712023, 505693352, 515367033, 520071568, 524723286, 530040314, 552510420, 564571193, 566700785, 569137263, 591354506, 594226878, 599996309, 602887481, 606398414, 610932189, 611419774, 619267313, 619371058, 624162354, 635517441, 636534585, 653652274, 660531880, 661948652, 667994807, 672503874, 694467181, 695270386, 719324359, 730642132, 745145147, 756931055, 769123384, 769289000, 782767789, 783218646, 786631873, 806904280, 823353469, 826556152, 832965593, 850848506, 851960229, 855783049, 857273142, 862652988, 866295366, 866305315, 869542372, 871107248, 884902758, 888236297, 912047188, 923009333, 939388237, 941561632, 961348831, 965457673, 997530626,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_41(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(6593493);
        tree.insert(955476185);
        tree.insert(-70767840);
        tree.insert(-619715878);
        tree.insert(-926922999);
        tree.insert(-501743443);
        tree.insert(-95096010);
        tree.insert(-708611408);
        tree.insert(610650504);
        tree.insert(735486675);
        tree.insert(-809108339);
        tree.insert(-661126027);
        tree.insert(541333185);
        tree.insert(915458925);
        tree.insert(280556721);
        tree.insert(-826543344);
        tree.insert(-49113970);
        tree.insert(36013152);
        tree.insert(691007534);
        tree.insert(328152222);
        tree.insert(611425180);
        tree.insert(-767315451);
        tree.insert(-41725408);
        tree.insert(119208651);
        tree.insert(482408688);
        tree.insert(793425770);
        tree.insert(827218665);
        tree.insert(275434940);
        tree.insert(-168285894);
        tree.insert(351564812);
        tree.insert(112761558);
        tree.insert(939003842);
        tree.insert(-405325193);
        tree.insert(-889502819);
        tree.insert(-927953077);
        tree.insert(-557626477);
        tree.insert(-234625848);
        tree.insert(-492402746);
        tree.insert(-5269255);
        tree.insert(712729446);
        tree.insert(-122264512);
        tree.insert(-926116282);
        tree.insert(-437871470);
        tree.insert(585665371);
        tree.insert(-463552357);
        tree.insert(-159106660);
        tree.insert(397280370);
        tree.insert(-253961375);
        tree.insert(450404189);
        tree.insert(-776125695);
        tree.insert(360677401);
        tree.insert(-614851388);
        tree.insert(-556426533);
        tree.insert(29180585);
        tree.insert(977619166);
        tree.insert(-14491486);
        tree.insert(-776553824);
        tree.insert(360696627);
        tree.insert(244720613);
        tree.insert(-937685219);
        tree.insert(-167392401);
        tree.insert(307740636);
        tree.insert(-738674512);
        tree.insert(50085935);
        tree.insert(-334574237);
        tree.insert(-373184351);
        tree.insert(78942801);
        tree.insert(691073602);
        tree.insert(-640927222);
        tree.insert(310861207);
        tree.insert(419361558);
        tree.insert(-998711115);
        tree.insert(-799988952);
        tree.insert(909721938);
        tree.insert(805538011);
        tree.insert(258558711);
        tree.insert(-630716024);
        tree.insert(-406016489);
        tree.insert(12838097);
        tree.insert(692167517);
        tree.insert(-311656559);
        tree.insert(936002834);
        tree.insert(-109778172);
        tree.insert(642473217);
        tree.insert(-479776449);
        tree.insert(-18292492);
        tree.insert(-619281318);
        tree.insert(-757549900);
        tree.insert(417038659);
        tree.insert(780303202);
        tree.insert(-91655638);
        tree.insert(320693995);
        tree.insert(-41094510);
        tree.insert(-219989423);
        tree.insert(-656086851);
        tree.insert(810473853);
        tree.insert(-24611372);
        tree.insert(345279486);
        tree.insert(-130583836);
        tree.insert(-563704303);
        tree.insert(549356142);
        tree.insert(-778236709);
        tree.insert(-655055533);
        tree.insert(604402033);
        tree.insert(-703832774);
        tree.insert(886185685);
        tree.insert(-530117737);
        tree.insert(-267327529);
        tree.insert(-947745595);
        tree.insert(443777727);
        tree.insert(334229705);
        tree.insert(706447065);
        tree.insert(-842384564);
        tree.insert(487112548);
        tree.insert(764904358);
        tree.insert(-571490562);
        tree.insert(214525578);
        tree.insert(-923574692);
        tree.insert(-899572281);
        tree.insert(-824363720);
        tree.insert(767839995);
        tree.insert(972892428);
        tree.insert(341333256);
        tree.insert(589904634);
        tree.insert(-288316158);
        tree.insert(-298494929);
        tree.insert(675630812);
        tree.insert(380861921);
        tree.insert(-602385337);
        tree.insert(740842226);
        tree.insert(-620196566);
        tree.insert(-135109056);
        tree.insert(-161098296);
        tree.insert(651584505);
        tree.insert(954395611);
        tree.insert(609750462);
        tree.insert(540773037);
        tree.insert(371849856);
        tree.insert(-573205001);
        tree.insert(571652598);
        tree.insert(-43655102);
        tree.insert(-723744194);
        tree.insert(728235959);
        tree.insert(-499421561);
        tree.insert(82513218);
        tree.insert(-828358216);
        tree.insert(-688062980);
        tree.insert(493835199);
        tree.insert(-916594031);
        tree.insert(-616091595);
        tree.insert(45511614);
        tree.insert(-933936088);
        tree.insert(-287913063);
        tree.insert(674750748);
        tree.insert(-907281529);
        tree.insert(97234349);
        tree.insert(412494961);
        tree.insert(-223180165);
        tree.insert(83586170);
        tree.insert(-550611010);
        tree.insert(306831157);
        tree.insert(249923965);
        tree.insert(-108540322);
        tree.insert(294132197);
        tree.insert(871139794);
        tree.insert(-740810948);
        tree.insert(-62032256);
        tree.insert(322344348);
        tree.insert(-84789);
        tree.insert(908911158);
        tree.insert(-332110321);
        tree.insert(148116655);
        tree.insert(122654609);
        tree.insert(247497010);
        tree.insert(-865971778);
        tree.insert(817841675);
        tree.insert(606347253);
        tree.insert(-198042116);
        tree.insert(762591288);
        tree.insert(171129603);
        tree.insert(538456791);
        tree.insert(308232644);
        tree.insert(984956997);
        tree.insert(700186363);
        tree.insert(-438167398);
        tree.insert(-907493659);
        tree.insert(605170297);
        tree.insert(-965927354);
        tree.insert(-883928610);
        tree.insert(-483398137);
        tree.insert(141466387);
        tree.insert(-367084287);
        tree.insert(679135460);
        tree.insert(-976184832);
        tree.insert(-661137512);
        tree.insert(75710442);
        tree.insert(-229631466);
        tree.insert(401381112);
        tree.insert(321885236);
        tree.insert(-32471900);
        Integer[] data = {-998711115, -976184832, -965927354, -947745595, -937685219, -933936088, -927953077, -926922999, -926116282, -923574692, -916594031, -907493659, -907281529, -899572281, -889502819, -883928610, -865971778, -842384564, -828358216, -826543344, -824363720, -809108339, -799988952, -778236709, -776553824, -776125695, -767315451, -757549900, -740810948, -738674512, -723744194, -708611408, -703832774, -688062980, -661137512, -661126027, -656086851, -655055533, -640927222, -630716024, -620196566, -619715878, -619281318, -616091595, -614851388, -602385337, -573205001, -571490562, -563704303, -557626477, -556426533, -550611010, -530117737, -501743443, -499421561, -492402746, -483398137, -479776449, -463552357, -438167398, -437871470, -406016489, -405325193, -373184351, -367084287, -334574237, -332110321, -311656559, -298494929, -288316158, -287913063, -267327529, -253961375, -234625848, -229631466, -223180165, -219989423, -198042116, -168285894, -167392401, -161098296, -159106660, -135109056, -130583836, -122264512, -109778172, -108540322, -95096010, -91655638, -70767840, -62032256, -49113970, -43655102, -41725408, -41094510, -32471900, -24611372, -18292492, -14491486, -5269255, -84789, 6593493, 12838097, 29180585, 36013152, 45511614, 50085935, 75710442, 78942801, 82513218, 83586170, 97234349, 112761558, 119208651, 122654609, 141466387, 148116655, 171129603, 214525578, 244720613, 247497010, 249923965, 258558711, 275434940, 280556721, 294132197, 306831157, 307740636, 308232644, 310861207, 320693995, 321885236, 322344348, 328152222, 334229705, 341333256, 345279486, 351564812, 360677401, 360696627, 371849856, 380861921, 397280370, 401381112, 412494961, 417038659, 419361558, 443777727, 450404189, 482408688, 487112548, 493835199, 538456791, 540773037, 541333185, 549356142, 571652598, 585665371, 589904634, 604402033, 605170297, 606347253, 609750462, 610650504, 611425180, 642473217, 651584505, 674750748, 675630812, 679135460, 691007534, 691073602, 692167517, 700186363, 706447065, 712729446, 728235959, 735486675, 740842226, 762591288, 764904358, 767839995, 780303202, 793425770, 805538011, 810473853, 817841675, 827218665, 871139794, 886185685, 908911158, 909721938, 915458925, 936002834, 939003842, 954395611, 955476185, 972892428, 977619166, 984956997,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_42(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(705855608);
        tree.insert(457595269);
        tree.insert(-211509144);
        tree.insert(-782916399);
        tree.insert(576560647);
        tree.insert(136409624);
        tree.insert(76721771);
        tree.insert(-45595594);
        tree.insert(625091068);
        tree.insert(800631561);
        tree.insert(-226860092);
        tree.insert(254081626);
        tree.insert(-202975959);
        tree.insert(-855706236);
        tree.insert(-607912887);
        tree.insert(-40231112);
        tree.insert(328655955);
        tree.insert(261659216);
        tree.insert(-946636146);
        tree.insert(-132473783);
        tree.insert(824574503);
        tree.insert(-847390228);
        tree.insert(53888978);
        tree.insert(447926393);
        tree.insert(-625598437);
        tree.insert(-287258797);
        tree.insert(134804729);
        tree.insert(504328470);
        tree.insert(385199818);
        tree.insert(-225440804);
        tree.insert(801703738);
        tree.insert(-817690767);
        tree.insert(908116190);
        tree.insert(748429412);
        tree.insert(883179010);
        tree.insert(-837951168);
        tree.insert(135444095);
        tree.insert(633259255);
        tree.insert(-572559611);
        tree.insert(-200727370);
        tree.insert(-239366496);
        tree.insert(125747997);
        tree.insert(-982076914);
        tree.insert(-634144441);
        tree.insert(633193975);
        tree.insert(-751453004);
        tree.insert(-751782828);
        tree.insert(-602210354);
        tree.insert(185886194);
        tree.insert(-369327401);
        tree.insert(43591440);
        tree.insert(366659679);
        tree.insert(-394063663);
        tree.insert(-547044520);
        tree.insert(-175824973);
        tree.insert(820744511);
        tree.insert(-300210565);
        tree.insert(-924404120);
        tree.insert(24277064);
        tree.insert(231475609);
        tree.insert(-667813380);
        tree.insert(-185253320);
        tree.insert(-834548067);
        tree.insert(-897371039);
        tree.insert(442514584);
        tree.insert(-283011911);
        tree.insert(-610674651);
        tree.insert(-244930108);
        tree.insert(-180995179);
        tree.insert(573166972);
        tree.insert(882737273);
        tree.insert(-591613876);
        tree.insert(-519000764);
        tree.insert(-666443090);
        tree.insert(291792863);
        tree.insert(-903412372);
        tree.insert(-465230324);
        tree.insert(-798764390);
        tree.insert(20634006);
        tree.insert(92200009);
        tree.insert(-86506396);
        tree.insert(175064906);
        tree.insert(-187053271);
        tree.insert(843699159);
        tree.insert(-831044878);
        tree.insert(436327813);
        tree.insert(-276128623);
        tree.insert(155341520);
        tree.insert(-659842742);
        tree.insert(-531775375);
        tree.insert(-379242386);
        tree.insert(-193203972);
        tree.insert(-443087981);
        tree.insert(972843514);
        tree.insert(361430550);
        tree.insert(-903389985);
        tree.insert(-126515275);
        tree.insert(154905472);
        tree.insert(-565672050);
        tree.insert(-29038632);
        tree.insert(919416197);
        tree.insert(-325465153);
        tree.insert(-567915182);
        tree.insert(-431658913);
        tree.insert(747642618);
        tree.insert(55425177);
        tree.insert(-306327005);
        tree.insert(532794761);
        tree.insert(-580591408);
        tree.insert(841824593);
        tree.insert(870403820);
        tree.insert(866423534);
        tree.insert(905042311);
        tree.insert(726017929);
        tree.insert(-215582009);
        tree.insert(352830059);
        tree.insert(940045507);
        tree.insert(-942617490);
        tree.insert(305988408);
        tree.insert(917663689);
        tree.insert(-936909904);
        tree.insert(385945096);
        tree.insert(19518505);
        tree.insert(-368005214);
        tree.insert(901235137);
        tree.insert(-965937931);
        tree.insert(449478913);
        tree.insert(-887808724);
        tree.insert(-596767719);
        tree.insert(-863446150);
        tree.insert(428559236);
        tree.insert(-528363473);
        tree.insert(-458868537);
        tree.insert(460402163);
        tree.insert(768828407);
        tree.insert(-197654537);
        tree.insert(-166617327);
        tree.insert(571129585);
        tree.insert(698214784);
        tree.insert(490384035);
        tree.insert(451753786);
        tree.insert(-790631610);
        tree.insert(-496286314);
        tree.insert(549475077);
        tree.insert(87905644);
        tree.insert(639744442);
        tree.insert(490959321);
        tree.insert(299099080);
        tree.insert(232817455);
        tree.insert(118027875);
        tree.insert(-373785693);
        tree.insert(-916078072);
        tree.insert(325576681);
        tree.insert(644757844);
        tree.insert(192839266);
        tree.insert(-103920309);
        tree.insert(899189866);
        tree.insert(-361281783);
        tree.insert(934362243);
        tree.insert(-476669640);
        tree.insert(827439760);
        tree.insert(-410887130);
        tree.insert(-722234300);
        tree.insert(-399413643);
        tree.insert(639434468);
        tree.insert(499588115);
        tree.insert(-635075624);
        tree.insert(-452503573);
        tree.insert(-961194728);
        tree.insert(332682056);
        tree.insert(886708448);
        tree.insert(-972220069);
        tree.insert(-246291390);
        tree.insert(-665853455);
        tree.insert(-692905713);
        tree.insert(-417447073);
        tree.insert(33173241);
        tree.insert(758568030);
        tree.insert(-60498367);
        tree.insert(775562152);
        tree.insert(804487119);
        tree.insert(-485883177);
        tree.insert(-817974200);
        tree.insert(-131456620);
        tree.insert(225983168);
        tree.insert(-798754553);
        tree.insert(586115988);
        tree.insert(707882908);
        tree.insert(438652523);
        tree.insert(-564890862);
        tree.insert(-993996251);
        tree.insert(-362681252);
        tree.insert(747302369);
        tree.insert(733897309);
        tree.insert(997435976);
        tree.insert(-152223351);
        tree.insert(531981140);
        tree.insert(-896068329);
        tree.insert(-941495903);
        tree.insert(136972392);
        Integer[] data = {-993996251, -982076914, -972220069, -965937931, -961194728, -946636146, -942617490, -941495903, -936909904, -924404120, -916078072, -903412372, -903389985, -897371039, -896068329, -887808724, -863446150, -855706236, -847390228, -837951168, -834548067, -831044878, -817974200, -817690767, -798764390, -798754553, -790631610, -782916399, -751782828, -751453004, -722234300, -692905713, -667813380, -666443090, -665853455, -659842742, -635075624, -634144441, -625598437, -610674651, -607912887, -602210354, -596767719, -591613876, -580591408, -572559611, -567915182, -565672050, -564890862, -547044520, -531775375, -528363473, -519000764, -496286314, -485883177, -476669640, -465230324, -458868537, -452503573, -443087981, -431658913, -417447073, -410887130, -399413643, -394063663, -379242386, -373785693, -369327401, -368005214, -362681252, -361281783, -325465153, -306327005, -300210565, -287258797, -283011911, -276128623, -246291390, -244930108, -239366496, -226860092, -225440804, -215582009, -211509144, -202975959, -200727370, -197654537, -193203972, -187053271, -185253320, -180995179, -175824973, -166617327, -152223351, -132473783, -131456620, -126515275, -103920309, -86506396, -60498367, -45595594, -40231112, -29038632, 19518505, 20634006, 24277064, 33173241, 43591440, 53888978, 55425177, 76721771, 87905644, 92200009, 118027875, 125747997, 134804729, 135444095, 136409624, 136972392, 154905472, 155341520, 175064906, 185886194, 192839266, 225983168, 231475609, 232817455, 254081626, 261659216, 291792863, 299099080, 305988408, 325576681, 328655955, 332682056, 352830059, 361430550, 366659679, 385199818, 385945096, 428559236, 436327813, 438652523, 442514584, 447926393, 449478913, 451753786, 457595269, 460402163, 490384035, 490959321, 499588115, 504328470, 531981140, 532794761, 549475077, 571129585, 573166972, 576560647, 586115988, 625091068, 633193975, 633259255, 639434468, 639744442, 644757844, 698214784, 705855608, 707882908, 726017929, 733897309, 747302369, 747642618, 748429412, 758568030, 768828407, 775562152, 800631561, 801703738, 804487119, 820744511, 824574503, 827439760, 841824593, 843699159, 866423534, 870403820, 882737273, 883179010, 886708448, 899189866, 901235137, 905042311, 908116190, 917663689, 919416197, 934362243, 940045507, 972843514, 997435976,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_43(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(952645913);
        tree.insert(202627279);
        tree.insert(358379597);
        tree.insert(910712815);
        tree.insert(-235255709);
        tree.insert(-80906094);
        tree.insert(1717233);
        tree.insert(448551032);
        tree.insert(376207698);
        tree.insert(227996734);
        tree.insert(512382888);
        tree.insert(144243711);
        tree.insert(932590966);
        tree.insert(-650010186);
        tree.insert(-502568121);
        tree.insert(433543411);
        tree.insert(782680940);
        tree.insert(-80429647);
        tree.insert(617298262);
        tree.insert(-23365791);
        tree.insert(-826016341);
        tree.insert(183167926);
        tree.insert(423499178);
        tree.insert(364788253);
        tree.insert(-767294359);
        tree.insert(-767690723);
        tree.insert(689638381);
        tree.insert(902085645);
        tree.insert(757802835);
        tree.insert(-135569074);
        tree.insert(840667841);
        tree.insert(-871586978);
        tree.insert(497399431);
        tree.insert(54211407);
        tree.insert(-495905194);
        tree.insert(184449708);
        tree.insert(-341101867);
        tree.insert(-101282705);
        tree.insert(-924836298);
        tree.insert(-366599729);
        tree.insert(-691812122);
        tree.insert(316838815);
        tree.insert(312816212);
        tree.insert(-458121564);
        tree.insert(891412588);
        tree.insert(412635039);
        tree.insert(-187573326);
        tree.insert(333058271);
        tree.insert(-993310233);
        tree.insert(-68730544);
        tree.insert(-557705946);
        tree.insert(306312663);
        tree.insert(-90488830);
        tree.insert(820758426);
        tree.insert(472914537);
        tree.insert(-147709264);
        tree.insert(-71404547);
        tree.insert(693058609);
        tree.insert(-699982981);
        tree.insert(421168101);
        tree.insert(-900847237);
        tree.insert(165223043);
        tree.insert(-932808058);
        tree.insert(579214073);
        tree.insert(383744151);
        tree.insert(-457196448);
        tree.insert(-719156572);
        tree.insert(800387227);
        tree.insert(-186125871);
        tree.insert(-639439423);
        tree.insert(-786499959);
        tree.insert(839218723);
        tree.insert(47954558);
        tree.insert(-394530210);
        tree.insert(-693229989);
        tree.insert(302345305);
        tree.insert(790723742);
        tree.insert(-780535086);
        tree.insert(-771628030);
        tree.insert(711678643);
        tree.insert(768495832);
        tree.insert(-334023289);
        tree.insert(-783293861);
        tree.insert(778951561);
        tree.insert(-388568276);
        tree.insert(23905531);
        tree.insert(-120275896);
        tree.insert(-792671689);
        tree.insert(-719106740);
        tree.insert(52490221);
        tree.insert(402051530);
        tree.insert(-373939276);
        tree.insert(-76101701);
        tree.insert(-710059744);
        tree.insert(963792608);
        tree.insert(-844302579);
        tree.insert(-909429228);
        tree.insert(107124571);
        tree.insert(-91262919);
        tree.insert(-570397702);
        tree.insert(876639193);
        tree.insert(-938662431);
        tree.insert(784401286);
        tree.insert(-316147460);
        tree.insert(540571533);
        tree.insert(-850820558);
        tree.insert(-898101234);
        tree.insert(130475201);
        tree.insert(-572082220);
        tree.insert(76157477);
        tree.insert(-333536160);
        tree.insert(918811299);
        tree.insert(-405957183);
        tree.insert(-515351954);
        tree.insert(122926768);
        tree.insert(-277339645);
        tree.insert(-188017983);
        tree.insert(609263167);
        tree.insert(-927222301);
        tree.insert(-431936874);
        tree.insert(-994081341);
        tree.insert(-61698093);
        tree.insert(-762248845);
        tree.insert(-282224457);
        tree.insert(-121416567);
        tree.insert(740769662);
        tree.insert(971827227);
        tree.insert(-972864943);
        tree.insert(956918705);
        tree.insert(-743413183);
        tree.insert(703463720);
        tree.insert(222463952);
        tree.insert(-224095130);
        tree.insert(-255357009);
        tree.insert(-646320919);
        tree.insert(282780251);
        tree.insert(36059797);
        tree.insert(729448295);
        tree.insert(-44081367);
        tree.insert(392826177);
        tree.insert(290614808);
        tree.insert(-125371422);
        tree.insert(-91958856);
        tree.insert(260315724);
        tree.insert(61921786);
        tree.insert(-275567531);
        tree.insert(-947249208);
        tree.insert(-259331623);
        tree.insert(474061019);
        tree.insert(-602117197);
        tree.insert(-980825420);
        tree.insert(382445012);
        tree.insert(-279957067);
        tree.insert(-529526409);
        tree.insert(-442035092);
        tree.insert(-897199385);
        tree.insert(-82331572);
        tree.insert(583144608);
        tree.insert(409729744);
        tree.insert(394399793);
        tree.insert(-287443008);
        tree.insert(705230092);
        tree.insert(160315485);
        tree.insert(784255625);
        tree.insert(-25466158);
        tree.insert(-423120585);
        tree.insert(966433261);
        tree.insert(665865928);
        tree.insert(-350649788);
        tree.insert(466248243);
        tree.insert(447376545);
        tree.insert(-913803620);
        tree.insert(-137196572);
        tree.insert(-185918164);
        tree.insert(-433834365);
        tree.insert(-940721844);
        tree.insert(-471216347);
        tree.insert(917501125);
        tree.insert(567786148);
        tree.insert(-112999165);
        tree.insert(444887905);
        tree.insert(-108831733);
        tree.insert(924181095);
        tree.insert(-167688218);
        tree.insert(-973015522);
        tree.insert(255098131);
        tree.insert(59800146);
        tree.insert(-981931316);
        tree.insert(882191778);
        tree.insert(452638008);
        tree.insert(-474832200);
        tree.insert(164842585);
        tree.insert(421743601);
        tree.insert(736078185);
        tree.insert(-237562734);
        tree.insert(-345408939);
        tree.insert(596284304);
        tree.insert(635808391);
        tree.insert(388675212);
        tree.insert(-412784369);
        Integer[] data = {-994081341, -993310233, -981931316, -980825420, -973015522, -972864943, -947249208, -940721844, -938662431, -932808058, -927222301, -924836298, -913803620, -909429228, -900847237, -898101234, -897199385, -871586978, -850820558, -844302579, -826016341, -792671689, -786499959, -783293861, -780535086, -771628030, -767690723, -767294359, -762248845, -743413183, -719156572, -719106740, -710059744, -699982981, -693229989, -691812122, -650010186, -646320919, -639439423, -602117197, -572082220, -570397702, -557705946, -529526409, -515351954, -502568121, -495905194, -474832200, -471216347, -458121564, -457196448, -442035092, -433834365, -431936874, -423120585, -412784369, -405957183, -394530210, -388568276, -373939276, -366599729, -350649788, -345408939, -341101867, -334023289, -333536160, -316147460, -287443008, -282224457, -279957067, -277339645, -275567531, -259331623, -255357009, -237562734, -235255709, -224095130, -188017983, -187573326, -186125871, -185918164, -167688218, -147709264, -137196572, -135569074, -125371422, -121416567, -120275896, -112999165, -108831733, -101282705, -91958856, -91262919, -90488830, -82331572, -80906094, -80429647, -76101701, -71404547, -68730544, -61698093, -44081367, -25466158, -23365791, 1717233, 23905531, 36059797, 47954558, 52490221, 54211407, 59800146, 61921786, 76157477, 107124571, 122926768, 130475201, 144243711, 160315485, 164842585, 165223043, 183167926, 184449708, 202627279, 222463952, 227996734, 255098131, 260315724, 282780251, 290614808, 302345305, 306312663, 312816212, 316838815, 333058271, 358379597, 364788253, 376207698, 382445012, 383744151, 388675212, 392826177, 394399793, 402051530, 409729744, 412635039, 421168101, 421743601, 423499178, 433543411, 444887905, 447376545, 448551032, 452638008, 466248243, 472914537, 474061019, 497399431, 512382888, 540571533, 567786148, 579214073, 583144608, 596284304, 609263167, 617298262, 635808391, 665865928, 689638381, 693058609, 703463720, 705230092, 711678643, 729448295, 736078185, 740769662, 757802835, 768495832, 778951561, 782680940, 784255625, 784401286, 790723742, 800387227, 820758426, 839218723, 840667841, 876639193, 882191778, 891412588, 902085645, 910712815, 917501125, 918811299, 924181095, 932590966, 952645913, 956918705, 963792608, 966433261, 971827227,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_44(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(727002516);
        tree.insert(-768326750);
        tree.insert(839289780);
        tree.insert(997608668);
        tree.insert(529854359);
        tree.insert(-37518594);
        tree.insert(-127645207);
        tree.insert(-737221206);
        tree.insert(377131461);
        tree.insert(-487366123);
        tree.insert(309534417);
        tree.insert(86753204);
        tree.insert(302841130);
        tree.insert(551470108);
        tree.insert(527509934);
        tree.insert(402990201);
        tree.insert(-438213887);
        tree.insert(-691035422);
        tree.insert(-364500613);
        tree.insert(-24850153);
        tree.insert(-421140131);
        tree.insert(-880053096);
        tree.insert(302236315);
        tree.insert(-710411929);
        tree.insert(523441389);
        tree.insert(576791555);
        tree.insert(-142163879);
        tree.insert(-253691316);
        tree.insert(-29810511);
        tree.insert(232170391);
        tree.insert(-800499078);
        tree.insert(870161677);
        tree.insert(603937929);
        tree.insert(-764884869);
        tree.insert(275090640);
        tree.insert(-103691374);
        tree.insert(-770695485);
        tree.insert(27882091);
        tree.insert(235304044);
        tree.insert(-371733014);
        tree.insert(-487079817);
        tree.insert(863038568);
        tree.insert(-202769991);
        tree.insert(987661607);
        tree.insert(-311915402);
        tree.insert(-251190190);
        tree.insert(-959200624);
        tree.insert(-132789309);
        tree.insert(-778569612);
        tree.insert(574590484);
        tree.insert(740663831);
        tree.insert(103375062);
        tree.insert(-249259450);
        tree.insert(942290872);
        tree.insert(254069379);
        tree.insert(-784864999);
        tree.insert(-140747979);
        tree.insert(-57757251);
        tree.insert(-448559107);
        tree.insert(560597636);
        tree.insert(-768507716);
        tree.insert(144130705);
        tree.insert(411336574);
        tree.insert(74825089);
        tree.insert(254705662);
        tree.insert(-188330853);
        tree.insert(-707947422);
        tree.insert(507382848);
        tree.insert(221409635);
        tree.insert(-403580548);
        tree.insert(-507345445);
        tree.insert(-386501926);
        tree.insert(843022150);
        tree.insert(-875994638);
        tree.insert(447807566);
        tree.insert(781541909);
        tree.insert(-732693545);
        tree.insert(-59943196);
        tree.insert(-350595018);
        tree.insert(-32926444);
        tree.insert(-510185527);
        tree.insert(-790011753);
        tree.insert(-298278833);
        tree.insert(219100078);
        tree.insert(-128027643);
        tree.insert(-24231459);
        tree.insert(294735471);
        tree.insert(-359916838);
        tree.insert(942119042);
        tree.insert(424006948);
        tree.insert(-355609723);
        tree.insert(649745414);
        tree.insert(-475982506);
        tree.insert(-148859691);
        tree.insert(13858820);
        tree.insert(-884707466);
        tree.insert(-749164534);
        tree.insert(486427849);
        tree.insert(449530656);
        tree.insert(695207758);
        tree.insert(-303452199);
        tree.insert(956465852);
        tree.insert(-893612503);
        tree.insert(-44044020);
        tree.insert(220109093);
        tree.insert(-959855695);
        tree.insert(415420913);
        tree.insert(-170928306);
        tree.insert(-476655508);
        tree.insert(-521493449);
        tree.insert(-67971767);
        tree.insert(-317897597);
        tree.insert(278787972);
        tree.insert(-808565577);
        tree.insert(-807523969);
        tree.insert(-973557848);
        tree.insert(-953704458);
        tree.insert(-246717596);
        tree.insert(2425219);
        tree.insert(-779404676);
        tree.insert(454906293);
        tree.insert(-464659134);
        tree.insert(336238425);
        tree.insert(853362337);
        tree.insert(139760321);
        tree.insert(-607205792);
        tree.insert(650979258);
        tree.insert(458327557);
        tree.insert(805232234);
        tree.insert(-727107931);
        tree.insert(-781411444);
        tree.insert(580594725);
        tree.insert(59660375);
        tree.insert(528402932);
        tree.insert(-878377563);
        tree.insert(787057574);
        tree.insert(-505334831);
        tree.insert(982803535);
        tree.insert(-687942502);
        tree.insert(240129553);
        tree.insert(-136684908);
        tree.insert(-946080903);
        tree.insert(-268267516);
        tree.insert(828379007);
        tree.insert(708661464);
        tree.insert(480978692);
        tree.insert(437948619);
        tree.insert(-360204223);
        tree.insert(-611914593);
        tree.insert(214615782);
        tree.insert(869836353);
        tree.insert(344108948);
        tree.insert(759888476);
        tree.insert(778081195);
        tree.insert(350567549);
        tree.insert(-965167028);
        tree.insert(-565789027);
        tree.insert(-892439040);
        tree.insert(522594272);
        tree.insert(811808592);
        tree.insert(-271838112);
        tree.insert(-998530399);
        tree.insert(-50489005);
        tree.insert(82198738);
        tree.insert(-941448105);
        tree.insert(706958867);
        tree.insert(400452631);
        tree.insert(481934835);
        tree.insert(591599469);
        tree.insert(-23877795);
        tree.insert(771425451);
        tree.insert(964423597);
        tree.insert(-829689608);
        tree.insert(-826589031);
        tree.insert(938178593);
        tree.insert(143173767);
        tree.insert(894257376);
        tree.insert(-564446824);
        tree.insert(309166516);
        tree.insert(529965376);
        tree.insert(-999940219);
        tree.insert(-402465426);
        tree.insert(721619188);
        tree.insert(-34690849);
        tree.insert(697722281);
        tree.insert(625099669);
        tree.insert(82967312);
        tree.insert(-566177970);
        tree.insert(737510008);
        tree.insert(286409191);
        tree.insert(-142251776);
        tree.insert(554152767);
        tree.insert(-243189728);
        tree.insert(637325446);
        tree.insert(-934617387);
        tree.insert(-592264890);
        tree.insert(-569566772);
        tree.insert(666270297);
        tree.insert(831957287);
        tree.insert(795331232);
        Integer[] data = {-999940219, -998530399, -973557848, -965167028, -959855695, -959200624, -953704458, -946080903, -941448105, -934617387, -893612503, -892439040, -884707466, -880053096, -878377563, -875994638, -829689608, -826589031, -808565577, -807523969, -800499078, -790011753, -784864999, -781411444, -779404676, -778569612, -770695485, -768507716, -768326750, -764884869, -749164534, -737221206, -732693545, -727107931, -710411929, -707947422, -691035422, -687942502, -611914593, -607205792, -592264890, -569566772, -566177970, -565789027, -564446824, -521493449, -510185527, -507345445, -505334831, -487366123, -487079817, -476655508, -475982506, -464659134, -448559107, -438213887, -421140131, -403580548, -402465426, -386501926, -371733014, -364500613, -360204223, -359916838, -355609723, -350595018, -317897597, -311915402, -303452199, -298278833, -271838112, -268267516, -253691316, -251190190, -249259450, -246717596, -243189728, -202769991, -188330853, -170928306, -148859691, -142251776, -142163879, -140747979, -136684908, -132789309, -128027643, -127645207, -103691374, -67971767, -59943196, -57757251, -50489005, -44044020, -37518594, -34690849, -32926444, -29810511, -24850153, -24231459, -23877795, 2425219, 13858820, 27882091, 59660375, 74825089, 82198738, 82967312, 86753204, 103375062, 139760321, 143173767, 144130705, 214615782, 219100078, 220109093, 221409635, 232170391, 235304044, 240129553, 254069379, 254705662, 275090640, 278787972, 286409191, 294735471, 302236315, 302841130, 309166516, 309534417, 336238425, 344108948, 350567549, 377131461, 400452631, 402990201, 411336574, 415420913, 424006948, 437948619, 447807566, 449530656, 454906293, 458327557, 480978692, 481934835, 486427849, 507382848, 522594272, 523441389, 527509934, 528402932, 529854359, 529965376, 551470108, 554152767, 560597636, 574590484, 576791555, 580594725, 591599469, 603937929, 625099669, 637325446, 649745414, 650979258, 666270297, 695207758, 697722281, 706958867, 708661464, 721619188, 727002516, 737510008, 740663831, 759888476, 771425451, 778081195, 781541909, 787057574, 795331232, 805232234, 811808592, 828379007, 831957287, 839289780, 843022150, 853362337, 863038568, 869836353, 870161677, 894257376, 938178593, 942119042, 942290872, 956465852, 964423597, 982803535, 987661607, 997608668,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_45(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(306009825);
        tree.insert(-747108730);
        tree.insert(-193004563);
        tree.insert(-536537336);
        tree.insert(398241873);
        tree.insert(-514203432);
        tree.insert(-138390937);
        tree.insert(952559752);
        tree.insert(399964720);
        tree.insert(-564094938);
        tree.insert(630318600);
        tree.insert(702599802);
        tree.insert(913953257);
        tree.insert(-731879882);
        tree.insert(-917586126);
        tree.insert(-338151765);
        tree.insert(-170420487);
        tree.insert(176120728);
        tree.insert(472712924);
        tree.insert(-539237009);
        tree.insert(528538975);
        tree.insert(383699141);
        tree.insert(891091554);
        tree.insert(90339748);
        tree.insert(-324267034);
        tree.insert(823006101);
        tree.insert(872935963);
        tree.insert(-381653488);
        tree.insert(127410945);
        tree.insert(130586593);
        tree.insert(555264766);
        tree.insert(-49347191);
        tree.insert(173314249);
        tree.insert(-922685788);
        tree.insert(456852334);
        tree.insert(-349869062);
        tree.insert(982535333);
        tree.insert(200411156);
        tree.insert(-995236722);
        tree.insert(-163300179);
        tree.insert(-771479425);
        tree.insert(713033207);
        tree.insert(-582551415);
        tree.insert(-863547691);
        tree.insert(-211697922);
        tree.insert(444730065);
        tree.insert(43805229);
        tree.insert(195315667);
        tree.insert(-864748041);
        tree.insert(-928514672);
        tree.insert(10043782);
        tree.insert(621253905);
        tree.insert(-777207127);
        tree.insert(889310712);
        tree.insert(832529300);
        tree.insert(187136592);
        tree.insert(366033374);
        tree.insert(-90922333);
        tree.insert(216432947);
        tree.insert(254682941);
        tree.insert(420578183);
        tree.insert(604718551);
        tree.insert(628975626);
        tree.insert(-467166800);
        tree.insert(-26226912);
        tree.insert(-845737067);
        tree.insert(417034985);
        tree.insert(516771532);
        tree.insert(-343593121);
        tree.insert(-318309236);
        tree.insert(-148195153);
        tree.insert(-560152424);
        tree.insert(-236728211);
        tree.insert(-268411713);
        tree.insert(-123608586);
        tree.insert(-845856217);
        tree.insert(502262644);
        tree.insert(412917467);
        tree.insert(-213177613);
        tree.insert(-604689000);
        tree.insert(-268477933);
        tree.insert(-249539177);
        tree.insert(897905056);
        tree.insert(-191969133);
        tree.insert(168810975);
        tree.insert(-928834433);
        tree.insert(-277605788);
        tree.insert(-353257239);
        tree.insert(-602159558);
        tree.insert(-859647888);
        tree.insert(-654136059);
        tree.insert(846078228);
        tree.insert(93226613);
        tree.insert(385120784);
        tree.insert(596170538);
        tree.insert(128983167);
        tree.insert(-599010674);
        tree.insert(2458942);
        tree.insert(909535699);
        tree.insert(290222914);
        tree.insert(288553807);
        tree.insert(-320053485);
        tree.insert(-171638138);
        tree.insert(-699221401);
        tree.insert(-266614331);
        tree.insert(84726743);
        tree.insert(138653761);
        tree.insert(-989432293);
        tree.insert(419572052);
        tree.insert(-706807515);
        tree.insert(-263945316);
        tree.insert(-762910972);
        tree.insert(300011772);
        tree.insert(-382889976);
        tree.insert(-744662257);
        tree.insert(120680978);
        tree.insert(400081893);
        tree.insert(-801683972);
        tree.insert(511053426);
        tree.insert(596898767);
        tree.insert(-540818909);
        tree.insert(-779649796);
        tree.insert(47573965);
        tree.insert(462750962);
        tree.insert(-130503510);
        tree.insert(-953825927);
        tree.insert(545471589);
        tree.insert(-216705586);
        tree.insert(-495852954);
        tree.insert(734043836);
        tree.insert(-696075258);
        tree.insert(-275306329);
        tree.insert(624811909);
        tree.insert(671323301);
        tree.insert(423621748);
        tree.insert(516575119);
        tree.insert(-390131321);
        tree.insert(-296138525);
        tree.insert(107371242);
        tree.insert(-232980219);
        tree.insert(-608877230);
        tree.insert(568092431);
        tree.insert(582864553);
        tree.insert(-103522839);
        tree.insert(727171837);
        tree.insert(-703809761);
        tree.insert(337663970);
        tree.insert(92993231);
        tree.insert(-373450513);
        tree.insert(-569229013);
        tree.insert(310575016);
        tree.insert(757067659);
        tree.insert(-175007577);
        tree.insert(779220800);
        tree.insert(133389290);
        tree.insert(893789052);
        tree.insert(126693987);
        tree.insert(-738233284);
        tree.insert(611805088);
        tree.insert(482947480);
        tree.insert(437193002);
        tree.insert(101767523);
        tree.insert(-275699706);
        tree.insert(66523800);
        tree.insert(528158669);
        tree.insert(236065594);
        tree.insert(750182241);
        tree.insert(-531520803);
        tree.insert(144159328);
        tree.insert(-482784005);
        tree.insert(-832011182);
        tree.insert(742169064);
        tree.insert(-77962377);
        tree.insert(-838564311);
        tree.insert(444937126);
        tree.insert(592008360);
        tree.insert(-930199447);
        tree.insert(-822318940);
        tree.insert(149105362);
        tree.insert(118779590);
        tree.insert(-175904702);
        tree.insert(-49861800);
        tree.insert(-946688056);
        tree.insert(319025259);
        tree.insert(-541414364);
        tree.insert(528351932);
        tree.insert(142296183);
        tree.insert(-97757409);
        tree.insert(-650920915);
        tree.insert(-580751781);
        tree.insert(-665458770);
        tree.insert(699313973);
        tree.insert(-908819027);
        tree.insert(420501654);
        tree.insert(-118293303);
        tree.insert(-987664750);
        tree.insert(941390225);
        tree.insert(89723354);
        tree.insert(212754183);
        tree.insert(871330586);
        Integer[] data = {-995236722, -989432293, -987664750, -953825927, -946688056, -930199447, -928834433, -928514672, -922685788, -917586126, -908819027, -864748041, -863547691, -859647888, -845856217, -845737067, -838564311, -832011182, -822318940, -801683972, -779649796, -777207127, -771479425, -762910972, -747108730, -744662257, -738233284, -731879882, -706807515, -703809761, -699221401, -696075258, -665458770, -654136059, -650920915, -608877230, -604689000, -602159558, -599010674, -582551415, -580751781, -569229013, -564094938, -560152424, -541414364, -540818909, -539237009, -536537336, -531520803, -514203432, -495852954, -482784005, -467166800, -390131321, -382889976, -381653488, -373450513, -353257239, -349869062, -343593121, -338151765, -324267034, -320053485, -318309236, -296138525, -277605788, -275699706, -275306329, -268477933, -268411713, -266614331, -263945316, -249539177, -236728211, -232980219, -216705586, -213177613, -211697922, -193004563, -191969133, -175904702, -175007577, -171638138, -170420487, -163300179, -148195153, -138390937, -130503510, -123608586, -118293303, -103522839, -97757409, -90922333, -77962377, -49861800, -49347191, -26226912, 2458942, 10043782, 43805229, 47573965, 66523800, 84726743, 89723354, 90339748, 92993231, 93226613, 101767523, 107371242, 118779590, 120680978, 126693987, 127410945, 128983167, 130586593, 133389290, 138653761, 142296183, 144159328, 149105362, 168810975, 173314249, 176120728, 187136592, 195315667, 200411156, 212754183, 216432947, 236065594, 254682941, 288553807, 290222914, 300011772, 306009825, 310575016, 319025259, 337663970, 366033374, 383699141, 385120784, 398241873, 399964720, 400081893, 412917467, 417034985, 419572052, 420501654, 420578183, 423621748, 437193002, 444730065, 444937126, 456852334, 462750962, 472712924, 482947480, 502262644, 511053426, 516575119, 516771532, 528158669, 528351932, 528538975, 545471589, 555264766, 568092431, 582864553, 592008360, 596170538, 596898767, 604718551, 611805088, 621253905, 624811909, 628975626, 630318600, 671323301, 699313973, 702599802, 713033207, 727171837, 734043836, 742169064, 750182241, 757067659, 779220800, 823006101, 832529300, 846078228, 871330586, 872935963, 889310712, 891091554, 893789052, 897905056, 909535699, 913953257, 941390225, 952559752, 982535333,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_46(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(-798324948);
        tree.insert(963962147);
        tree.insert(-208725780);
        tree.insert(130393006);
        tree.insert(839659829);
        tree.insert(147697964);
        tree.insert(535350291);
        tree.insert(-734041719);
        tree.insert(534523715);
        tree.insert(288940230);
        tree.insert(-852751799);
        tree.insert(960990481);
        tree.insert(-927809739);
        tree.insert(-906326170);
        tree.insert(287687860);
        tree.insert(-924512642);
        tree.insert(428685386);
        tree.insert(649997672);
        tree.insert(394985242);
        tree.insert(396987750);
        tree.insert(511601814);
        tree.insert(144242812);
        tree.insert(208093252);
        tree.insert(-505646076);
        tree.insert(-426141566);
        tree.insert(-634559514);
        tree.insert(677161840);
        tree.insert(222349539);
        tree.insert(-821920645);
        tree.insert(-850691718);
        tree.insert(-425448012);
        tree.insert(217409024);
        tree.insert(915170924);
        tree.insert(634055946);
        tree.insert(-680293110);
        tree.insert(-109814595);
        tree.insert(92741341);
        tree.insert(-614437627);
        tree.insert(156211560);
        tree.insert(794733808);
        tree.insert(191567552);
        tree.insert(-294119249);
        tree.insert(-223494562);
        tree.insert(585166041);
        tree.insert(-851006678);
        tree.insert(-195085523);
        tree.insert(613191083);
        tree.insert(170888597);
        tree.insert(458926229);
        tree.insert(14489152);
        tree.insert(484201135);
        tree.insert(-31613114);
        tree.insert(-849684632);
        tree.insert(72441605);
        tree.insert(302075516);
        tree.insert(160973369);
        tree.insert(-474864931);
        tree.insert(391527247);
        tree.insert(443821807);
        tree.insert(487895369);
        tree.insert(645181681);
        tree.insert(23830087);
        tree.insert(-872377126);
        tree.insert(-874465874);
        tree.insert(-947567629);
        tree.insert(-417746647);
        tree.insert(493561857);
        tree.insert(268977600);
        tree.insert(928662294);
        tree.insert(-586548951);
        tree.insert(639688055);
        tree.insert(756356641);
        tree.insert(566937052);
        tree.insert(591355567);
        tree.insert(-460114950);
        tree.insert(-172803543);
        tree.insert(-701168504);
        tree.insert(908516107);
        tree.insert(285252189);
        tree.insert(-921564257);
        tree.insert(795022306);
        tree.insert(-542580044);
        tree.insert(-545371389);
        tree.insert(-67954117);
        tree.insert(-12956593);
        tree.insert(959562145);
        tree.insert(170133740);
        tree.insert(-94832093);
        tree.insert(782020300);
        tree.insert(259588377);
        tree.insert(-894333246);
        tree.insert(-373786759);
        tree.insert(-495892631);
        tree.insert(-350592710);
        tree.insert(-538743600);
        tree.insert(-600943195);
        tree.insert(338106953);
        tree.insert(966536206);
        tree.insert(-406687838);
        tree.insert(-881592000);
        tree.insert(-552710318);
        tree.insert(92416028);
        tree.insert(188503031);
        tree.insert(716684822);
        tree.insert(240483674);
        tree.insert(169038142);
        tree.insert(-530820255);
        tree.insert(-644159713);
        tree.insert(-655221729);
        tree.insert(879899176);
        tree.insert(563649863);
        tree.insert(52276618);
        tree.insert(-678829649);
        tree.insert(816580645);
        tree.insert(511515378);
        tree.insert(989650617);
        tree.insert(152851258);
        tree.insert(-307282045);
        tree.insert(967248871);
        tree.insert(170941761);
        tree.insert(-739991712);
        tree.insert(519968584);
        tree.insert(289219128);
        tree.insert(-720998963);
        tree.insert(-638428533);
        tree.insert(-68060158);
        tree.insert(940380483);
        tree.insert(799893110);
        tree.insert(-619107104);
        tree.insert(344891484);
        tree.insert(439818303);
        tree.insert(474027400);
        tree.insert(701812865);
        tree.insert(-818902994);
        tree.insert(702044388);
        tree.insert(4378318);
        tree.insert(-521273402);
        tree.insert(914207770);
        tree.insert(939636833);
        tree.insert(476565154);
        tree.insert(289829418);
        tree.insert(618347613);
        tree.insert(-537423281);
        tree.insert(394480454);
        tree.insert(-863921633);
        tree.insert(-770111359);
        tree.insert(-636897475);
        tree.insert(-790432435);
        tree.insert(-559963727);
        tree.insert(426175532);
        tree.insert(-287035183);
        tree.insert(-960322002);
        tree.insert(-134922151);
        tree.insert(277965770);
        tree.insert(-881055550);
        tree.insert(-777435714);
        tree.insert(-447352375);
        tree.insert(-371813255);
        tree.insert(895278054);
        tree.insert(-424041017);
        tree.insert(-797353510);
        tree.insert(-917786090);
        tree.insert(737168165);
        tree.insert(637617854);
        tree.insert(-421572862);
        tree.insert(-480494130);
        tree.insert(385772006);
        tree.insert(604204716);
        tree.insert(-686993863);
        tree.insert(-957966999);
        tree.insert(-196756206);
        tree.insert(-244299694);
        tree.insert(-120794688);
        tree.insert(-435932871);
        tree.insert(-928282027);
        tree.insert(-363184427);
        tree.insert(240515843);
        tree.insert(395849548);
        tree.insert(-812568110);
        tree.insert(557444865);
        tree.insert(348738025);
        tree.insert(-728970323);
        tree.insert(-837210540);
        tree.insert(-373234291);
        tree.insert(117625479);
        tree.insert(119461394);
        tree.insert(925384281);
        tree.insert(-583560943);
        tree.insert(-684822177);
        tree.insert(-930256560);
        tree.insert(-812711826);
        tree.insert(717827770);
        tree.insert(625197949);
        tree.insert(-137861311);
        tree.insert(-179327048);
        tree.insert(337356659);
        tree.insert(115058524);
        tree.insert(-835715651);
        tree.insert(80781030);
        tree.insert(181071636);
        Integer[] data = {-960322002, -957966999, -947567629, -930256560, -928282027, -927809739, -924512642, -921564257, -917786090, -906326170, -894333246, -881592000, -881055550, -874465874, -872377126, -863921633, -852751799, -851006678, -850691718, -849684632, -837210540, -835715651, -821920645, -818902994, -812711826, -812568110, -798324948, -797353510, -790432435, -777435714, -770111359, -739991712, -734041719, -728970323, -720998963, -701168504, -686993863, -684822177, -680293110, -678829649, -655221729, -644159713, -638428533, -636897475, -634559514, -619107104, -614437627, -600943195, -586548951, -583560943, -559963727, -552710318, -545371389, -542580044, -538743600, -537423281, -530820255, -521273402, -505646076, -495892631, -480494130, -474864931, -460114950, -447352375, -435932871, -426141566, -425448012, -424041017, -421572862, -417746647, -406687838, -373786759, -373234291, -371813255, -363184427, -350592710, -307282045, -294119249, -287035183, -244299694, -223494562, -208725780, -196756206, -195085523, -179327048, -172803543, -137861311, -134922151, -120794688, -109814595, -94832093, -68060158, -67954117, -31613114, -12956593, 4378318, 14489152, 23830087, 52276618, 72441605, 80781030, 92416028, 92741341, 115058524, 117625479, 119461394, 130393006, 144242812, 147697964, 152851258, 156211560, 160973369, 169038142, 170133740, 170888597, 170941761, 181071636, 188503031, 191567552, 208093252, 217409024, 222349539, 240483674, 240515843, 259588377, 268977600, 277965770, 285252189, 287687860, 288940230, 289219128, 289829418, 302075516, 337356659, 338106953, 344891484, 348738025, 385772006, 391527247, 394480454, 394985242, 395849548, 396987750, 426175532, 428685386, 439818303, 443821807, 458926229, 474027400, 476565154, 484201135, 487895369, 493561857, 511515378, 511601814, 519968584, 534523715, 535350291, 557444865, 563649863, 566937052, 585166041, 591355567, 604204716, 613191083, 618347613, 625197949, 634055946, 637617854, 639688055, 645181681, 649997672, 677161840, 701812865, 702044388, 716684822, 717827770, 737168165, 756356641, 782020300, 794733808, 795022306, 799893110, 816580645, 839659829, 879899176, 895278054, 908516107, 914207770, 915170924, 925384281, 928662294, 939636833, 940380483, 959562145, 960990481, 963962147, 966536206, 967248871, 989650617,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_47(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(183036280);
        tree.insert(-774590815);
        tree.insert(997607358);
        tree.insert(708503463);
        tree.insert(417998134);
        tree.insert(912452125);
        tree.insert(-781820841);
        tree.insert(-572524900);
        tree.insert(153076359);
        tree.insert(592379568);
        tree.insert(-981612957);
        tree.insert(-41756427);
        tree.insert(-946179838);
        tree.insert(-891492096);
        tree.insert(-803836446);
        tree.insert(978969970);
        tree.insert(126444537);
        tree.insert(829945875);
        tree.insert(733340747);
        tree.insert(473144030);
        tree.insert(190891062);
        tree.insert(385228660);
        tree.insert(-193381574);
        tree.insert(-818810650);
        tree.insert(-101820904);
        tree.insert(-745368108);
        tree.insert(170354699);
        tree.insert(-88338139);
        tree.insert(720155627);
        tree.insert(746484257);
        tree.insert(-431401267);
        tree.insert(943491209);
        tree.insert(-228874501);
        tree.insert(461969769);
        tree.insert(494663995);
        tree.insert(170588727);
        tree.insert(165055248);
        tree.insert(-490511512);
        tree.insert(-330464578);
        tree.insert(-607352937);
        tree.insert(543312024);
        tree.insert(958212760);
        tree.insert(954338943);
        tree.insert(981489645);
        tree.insert(-229360849);
        tree.insert(-579896659);
        tree.insert(539044125);
        tree.insert(-171556391);
        tree.insert(795430768);
        tree.insert(-54040067);
        tree.insert(-248663070);
        tree.insert(-968971953);
        tree.insert(430475152);
        tree.insert(-875923804);
        tree.insert(-405432367);
        tree.insert(-447611336);
        tree.insert(-144444792);
        tree.insert(-917035598);
        tree.insert(-924051095);
        tree.insert(-343995156);
        tree.insert(373985557);
        tree.insert(267594125);
        tree.insert(-489553223);
        tree.insert(292778729);
        tree.insert(253881407);
        tree.insert(281441720);
        tree.insert(-971323608);
        tree.insert(534247977);
        tree.insert(-627982957);
        tree.insert(-351763668);
        tree.insert(248929369);
        tree.insert(-565186294);
        tree.insert(-451854354);
        tree.insert(192577054);
        tree.insert(-688143781);
        tree.insert(-380205327);
        tree.insert(27933217);
        tree.insert(978501577);
        tree.insert(-408922937);
        tree.insert(-189994880);
        tree.insert(280092946);
        tree.insert(-431897407);
        tree.insert(499718897);
        tree.insert(-786115874);
        tree.insert(-176293967);
        tree.insert(928517113);
        tree.insert(974846316);
        tree.insert(257712095);
        tree.insert(-168228606);
        tree.insert(-331844174);
        tree.insert(96596650);
        tree.insert(922286245);
        tree.insert(-970751075);
        tree.insert(71839837);
        tree.insert(775499084);
        tree.insert(790248665);
        tree.insert(835956077);
        tree.insert(303488574);
        tree.insert(-755879031);
        tree.insert(397928525);
        tree.insert(-706571123);
        tree.insert(40248523);
        tree.insert(899341289);
        tree.insert(792298814);
        tree.insert(-219603259);
        tree.insert(284718411);
        tree.insert(-980709852);
        tree.insert(534927110);
        tree.insert(-993259904);
        tree.insert(656551334);
        tree.insert(866362299);
        tree.insert(-215366514);
        tree.insert(960814906);
        tree.insert(-1306276);
        tree.insert(-632140831);
        tree.insert(809473875);
        tree.insert(-839013176);
        tree.insert(-216612986);
        tree.insert(299510276);
        tree.insert(588675400);
        tree.insert(-382992998);
        tree.insert(335069022);
        tree.insert(-140525844);
        tree.insert(731244282);
        tree.insert(728994645);
        tree.insert(542392677);
        tree.insert(-835910858);
        tree.insert(420300143);
        tree.insert(-106181373);
        tree.insert(-196872678);
        tree.insert(376948495);
        tree.insert(956841550);
        tree.insert(-1326764);
        tree.insert(-373757639);
        tree.insert(-102028248);
        tree.insert(-880173118);
        tree.insert(72845637);
        tree.insert(-634577646);
        tree.insert(-929860675);
        tree.insert(411531588);
        tree.insert(823205156);
        tree.insert(-992678386);
        tree.insert(-144543218);
        tree.insert(-207308887);
        tree.insert(641178123);
        tree.insert(396332317);
        tree.insert(890521517);
        tree.insert(366847702);
        tree.insert(-151431369);
        tree.insert(-404065769);
        tree.insert(-949244996);
        tree.insert(728919605);
        tree.insert(-124077704);
        tree.insert(64957680);
        tree.insert(804655093);
        tree.insert(-456746730);
        tree.insert(592264584);
        tree.insert(-848340966);
        tree.insert(518200259);
        tree.insert(-828481191);
        tree.insert(-306684141);
        tree.insert(-718493223);
        tree.insert(-200139926);
        tree.insert(973652713);
        tree.insert(759261289);
        tree.insert(620016794);
        tree.insert(584928795);
        tree.insert(939057718);
        tree.insert(406212248);
        tree.insert(962570995);
        tree.insert(740955192);
        tree.insert(-599986196);
        tree.insert(612303151);
        tree.insert(894059998);
        tree.insert(-568875524);
        tree.insert(-366031152);
        tree.insert(410508389);
        tree.insert(-219997654);
        tree.insert(-506784661);
        tree.insert(-458066504);
        tree.insert(163022963);
        tree.insert(-409930046);
        tree.insert(-596941005);
        tree.insert(726454832);
        tree.insert(413141343);
        tree.insert(-433390097);
        tree.insert(-753648578);
        tree.insert(-70977983);
        tree.insert(-748577663);
        tree.insert(-98509526);
        tree.insert(-91614814);
        tree.insert(-663067752);
        tree.insert(-734073381);
        tree.insert(630539044);
        tree.insert(-163037894);
        tree.insert(929302673);
        tree.insert(-332498553);
        tree.insert(44279641);
        tree.insert(165174781);
        tree.insert(92160238);
        Integer[] data = {-993259904, -992678386, -981612957, -980709852, -971323608, -970751075, -968971953, -949244996, -946179838, -929860675, -924051095, -917035598, -891492096, -880173118, -875923804, -848340966, -839013176, -835910858, -828481191, -818810650, -803836446, -786115874, -781820841, -774590815, -755879031, -753648578, -748577663, -745368108, -734073381, -718493223, -706571123, -688143781, -663067752, -634577646, -632140831, -627982957, -607352937, -599986196, -596941005, -579896659, -572524900, -568875524, -565186294, -506784661, -490511512, -489553223, -458066504, -456746730, -451854354, -447611336, -433390097, -431897407, -431401267, -409930046, -408922937, -405432367, -404065769, -382992998, -380205327, -373757639, -366031152, -351763668, -343995156, -332498553, -331844174, -330464578, -306684141, -248663070, -229360849, -228874501, -219997654, -219603259, -216612986, -215366514, -207308887, -200139926, -196872678, -193381574, -189994880, -176293967, -171556391, -168228606, -163037894, -151431369, -144543218, -144444792, -140525844, -124077704, -106181373, -102028248, -101820904, -98509526, -91614814, -88338139, -70977983, -54040067, -41756427, -1326764, -1306276, 27933217, 40248523, 44279641, 64957680, 71839837, 72845637, 92160238, 96596650, 126444537, 153076359, 163022963, 165055248, 165174781, 170354699, 170588727, 183036280, 190891062, 192577054, 248929369, 253881407, 257712095, 267594125, 280092946, 281441720, 284718411, 292778729, 299510276, 303488574, 335069022, 366847702, 373985557, 376948495, 385228660, 396332317, 397928525, 406212248, 410508389, 411531588, 413141343, 417998134, 420300143, 430475152, 461969769, 473144030, 494663995, 499718897, 518200259, 534247977, 534927110, 539044125, 542392677, 543312024, 584928795, 588675400, 592264584, 592379568, 612303151, 620016794, 630539044, 641178123, 656551334, 708503463, 720155627, 726454832, 728919605, 728994645, 731244282, 733340747, 740955192, 746484257, 759261289, 775499084, 790248665, 792298814, 795430768, 804655093, 809473875, 823205156, 829945875, 835956077, 866362299, 890521517, 894059998, 899341289, 912452125, 922286245, 928517113, 929302673, 939057718, 943491209, 954338943, 956841550, 958212760, 960814906, 962570995, 973652713, 974846316, 978501577, 978969970, 981489645, 997607358,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_48(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(356370458);
        tree.insert(-404222553);
        tree.insert(-797568240);
        tree.insert(-93284485);
        tree.insert(161072940);
        tree.insert(-237524337);
        tree.insert(-26677404);
        tree.insert(-694569981);
        tree.insert(-410851145);
        tree.insert(-317922567);
        tree.insert(721771935);
        tree.insert(-70730815);
        tree.insert(92238169);
        tree.insert(-374401798);
        tree.insert(-918367154);
        tree.insert(743635445);
        tree.insert(578908626);
        tree.insert(154165401);
        tree.insert(-950879799);
        tree.insert(-802708680);
        tree.insert(181884315);
        tree.insert(96403044);
        tree.insert(723149813);
        tree.insert(-484266452);
        tree.insert(-999525205);
        tree.insert(796784645);
        tree.insert(832121732);
        tree.insert(127496888);
        tree.insert(-820649784);
        tree.insert(894320058);
        tree.insert(53962775);
        tree.insert(-922112298);
        tree.insert(103850728);
        tree.insert(-129399703);
        tree.insert(243452428);
        tree.insert(-750385223);
        tree.insert(-163236679);
        tree.insert(274863441);
        tree.insert(-754599158);
        tree.insert(-450155043);
        tree.insert(-275451061);
        tree.insert(346991647);
        tree.insert(122410833);
        tree.insert(82054545);
        tree.insert(-780780284);
        tree.insert(511587374);
        tree.insert(161919829);
        tree.insert(-628519749);
        tree.insert(-719062818);
        tree.insert(-653385009);
        tree.insert(679042580);
        tree.insert(-895679720);
        tree.insert(512511978);
        tree.insert(-551201250);
        tree.insert(768694203);
        tree.insert(389917242);
        tree.insert(342030554);
        tree.insert(-613097623);
        tree.insert(-765200252);
        tree.insert(-893706679);
        tree.insert(-589814112);
        tree.insert(-576640785);
        tree.insert(690737205);
        tree.insert(-688665752);
        tree.insert(-182678245);
        tree.insert(539900154);
        tree.insert(887485235);
        tree.insert(591150088);
        tree.insert(-404153265);
        tree.insert(422420491);
        tree.insert(-726738246);
        tree.insert(-984650724);
        tree.insert(-507966074);
        tree.insert(197084448);
        tree.insert(-344514095);
        tree.insert(-379846491);
        tree.insert(391228718);
        tree.insert(-760122948);
        tree.insert(344813848);
        tree.insert(-54123652);
        tree.insert(276702644);
        tree.insert(-882475613);
        tree.insert(616355980);
        tree.insert(91298892);
        tree.insert(-175466686);
        tree.insert(-349192144);
        tree.insert(-498810597);
        tree.insert(-868310959);
        tree.insert(-834804603);
        tree.insert(-588046130);
        tree.insert(470252370);
        tree.insert(-675918731);
        tree.insert(-336570056);
        tree.insert(-959308942);
        tree.insert(984680898);
        tree.insert(801916605);
        tree.insert(85327526);
        tree.insert(554887475);
        tree.insert(-673755348);
        tree.insert(-815114346);
        tree.insert(-99954126);
        tree.insert(-730053456);
        tree.insert(-397488652);
        tree.insert(-911716139);
        tree.insert(255787488);
        tree.insert(681961226);
        tree.insert(510892461);
        tree.insert(798144675);
        tree.insert(-517788907);
        tree.insert(306599086);
        tree.insert(341230826);
        tree.insert(218854239);
        tree.insert(-348272536);
        tree.insert(848232215);
        tree.insert(962790992);
        tree.insert(870537371);
        tree.insert(-867645884);
        tree.insert(766400090);
        tree.insert(-810635859);
        tree.insert(-89536738);
        tree.insert(-215368144);
        tree.insert(1047155);
        tree.insert(-469834861);
        tree.insert(762222418);
        tree.insert(-538001800);
        tree.insert(-264237669);
        tree.insert(771498165);
        tree.insert(420990647);
        tree.insert(-300473538);
        tree.insert(597824502);
        tree.insert(-904898182);
        tree.insert(191704368);
        tree.insert(417483037);
        tree.insert(518577123);
        tree.insert(-726028409);
        tree.insert(429989038);
        tree.insert(426078079);
        tree.insert(-925308654);
        tree.insert(141175815);
        tree.insert(-237233078);
        tree.insert(-214086262);
        tree.insert(478016934);
        tree.insert(-326724399);
        tree.insert(-886308178);
        tree.insert(-284588652);
        tree.insert(-770111889);
        tree.insert(891243130);
        tree.insert(584356557);
        tree.insert(-983613548);
        tree.insert(-344061925);
        tree.insert(717124675);
        tree.insert(866488633);
        tree.insert(-685243548);
        tree.insert(-150593725);
        tree.insert(-749792644);
        tree.insert(862266444);
        tree.insert(-814656590);
        tree.insert(1553221);
        tree.insert(7994015);
        tree.insert(-310139449);
        tree.insert(-285292724);
        tree.insert(854337714);
        tree.insert(849753320);
        tree.insert(254247904);
        tree.insert(789686214);
        tree.insert(324097410);
        tree.insert(311544849);
        tree.insert(756912997);
        tree.insert(876548396);
        tree.insert(-314068237);
        tree.insert(878483106);
        tree.insert(-382576963);
        tree.insert(-752274009);
        tree.insert(320805881);
        tree.insert(409792415);
        tree.insert(476229277);
        tree.insert(-33127241);
        tree.insert(837778872);
        tree.insert(97564854);
        tree.insert(964937972);
        tree.insert(353000702);
        tree.insert(840675667);
        tree.insert(616430913);
        tree.insert(15548915);
        tree.insert(947577780);
        tree.insert(34571118);
        tree.insert(971970291);
        tree.insert(571493392);
        tree.insert(940690288);
        tree.insert(149672236);
        tree.insert(-207560584);
        tree.insert(652936025);
        tree.insert(544228421);
        tree.insert(139982069);
        tree.insert(-863047552);
        tree.insert(332695970);
        tree.insert(-738154080);
        tree.insert(-56799787);
        tree.insert(619368402);
        tree.insert(468542084);
        Integer[] data = {-999525205, -984650724, -983613548, -959308942, -950879799, -925308654, -922112298, -918367154, -911716139, -904898182, -895679720, -893706679, -886308178, -882475613, -868310959, -867645884, -863047552, -834804603, -820649784, -815114346, -814656590, -810635859, -802708680, -797568240, -780780284, -770111889, -765200252, -760122948, -754599158, -752274009, -750385223, -749792644, -738154080, -730053456, -726738246, -726028409, -719062818, -694569981, -688665752, -685243548, -675918731, -673755348, -653385009, -628519749, -613097623, -589814112, -588046130, -576640785, -551201250, -538001800, -517788907, -507966074, -498810597, -484266452, -469834861, -450155043, -410851145, -404222553, -404153265, -397488652, -382576963, -379846491, -374401798, -349192144, -348272536, -344514095, -344061925, -336570056, -326724399, -317922567, -314068237, -310139449, -300473538, -285292724, -284588652, -275451061, -264237669, -237524337, -237233078, -215368144, -214086262, -207560584, -182678245, -175466686, -163236679, -150593725, -129399703, -99954126, -93284485, -89536738, -70730815, -56799787, -54123652, -33127241, -26677404, 1047155, 1553221, 7994015, 15548915, 34571118, 53962775, 82054545, 85327526, 91298892, 92238169, 96403044, 97564854, 103850728, 122410833, 127496888, 139982069, 141175815, 149672236, 154165401, 161072940, 161919829, 181884315, 191704368, 197084448, 218854239, 243452428, 254247904, 255787488, 274863441, 276702644, 306599086, 311544849, 320805881, 324097410, 332695970, 341230826, 342030554, 344813848, 346991647, 353000702, 356370458, 389917242, 391228718, 409792415, 417483037, 420990647, 422420491, 426078079, 429989038, 468542084, 470252370, 476229277, 478016934, 510892461, 511587374, 512511978, 518577123, 539900154, 544228421, 554887475, 571493392, 578908626, 584356557, 591150088, 597824502, 616355980, 616430913, 619368402, 652936025, 679042580, 681961226, 690737205, 717124675, 721771935, 723149813, 743635445, 756912997, 762222418, 766400090, 768694203, 771498165, 789686214, 796784645, 798144675, 801916605, 832121732, 837778872, 840675667, 848232215, 849753320, 854337714, 862266444, 866488633, 870537371, 876548396, 878483106, 887485235, 891243130, 894320058, 940690288, 947577780, 962790992, 964937972, 971970291, 984680898,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }

    @Test
    public void random_testcase_49(){
// Random testcase generated using python
        RB_Tree<Integer> tree = new RB_Tree<Integer>();
        tree.insert(437237584);
        tree.insert(564910699);
        tree.insert(237905983);
        tree.insert(-86318551);
        tree.insert(884659840);
        tree.insert(-227442666);
        tree.insert(-641196874);
        tree.insert(827233808);
        tree.insert(616015837);
        tree.insert(-313802622);
        tree.insert(-526376098);
        tree.insert(160591716);
        tree.insert(-478036223);
        tree.insert(-613652084);
        tree.insert(-184068046);
        tree.insert(-624461486);
        tree.insert(-81867476);
        tree.insert(879562549);
        tree.insert(-182741877);
        tree.insert(-619742704);
        tree.insert(146444904);
        tree.insert(134067903);
        tree.insert(69930710);
        tree.insert(-527187972);
        tree.insert(-893479546);
        tree.insert(615864434);
        tree.insert(507196330);
        tree.insert(683190376);
        tree.insert(-544806439);
        tree.insert(258533079);
        tree.insert(662329909);
        tree.insert(424767712);
        tree.insert(768855652);
        tree.insert(266326246);
        tree.insert(-875043991);
        tree.insert(-722069128);
        tree.insert(-356665839);
        tree.insert(-378059506);
        tree.insert(-959122709);
        tree.insert(-242656627);
        tree.insert(463275324);
        tree.insert(-145167109);
        tree.insert(-283913506);
        tree.insert(-880058928);
        tree.insert(774224624);
        tree.insert(186126317);
        tree.insert(-324994164);
        tree.insert(620060269);
        tree.insert(905289609);
        tree.insert(-435392952);
        tree.insert(628345501);
        tree.insert(223486880);
        tree.insert(42752119);
        tree.insert(514500473);
        tree.insert(-970112038);
        tree.insert(39351671);
        tree.insert(377840932);
        tree.insert(-696374866);
        tree.insert(-716673016);
        tree.insert(937046085);
        tree.insert(774342801);
        tree.insert(302493264);
        tree.insert(797295716);
        tree.insert(384568889);
        tree.insert(-158114864);
        tree.insert(-717222841);
        tree.insert(270390210);
        tree.insert(67654208);
        tree.insert(-318183171);
        tree.insert(45552092);
        tree.insert(-711673532);
        tree.insert(-275547685);
        tree.insert(206494146);
        tree.insert(574883777);
        tree.insert(753103602);
        tree.insert(377647061);
        tree.insert(515506735);
        tree.insert(359833822);
        tree.insert(917878907);
        tree.insert(-281506072);
        tree.insert(-781899659);
        tree.insert(-46246575);
        tree.insert(442186738);
        tree.insert(927146256);
        tree.insert(-969300101);
        tree.insert(-916185596);
        tree.insert(902383721);
        tree.insert(8262747);
        tree.insert(-442013358);
        tree.insert(893781497);
        tree.insert(-943096400);
        tree.insert(-836126883);
        tree.insert(396549753);
        tree.insert(-811743054);
        tree.insert(131770875);
        tree.insert(-924492227);
        tree.insert(599465664);
        tree.insert(-649117721);
        tree.insert(-663095997);
        tree.insert(-255027083);
        tree.insert(-302019948);
        tree.insert(-94974934);
        tree.insert(-806814914);
        tree.insert(-567663652);
        tree.insert(991503655);
        tree.insert(-32386803);
        tree.insert(442555342);
        tree.insert(-562667750);
        tree.insert(-892122030);
        tree.insert(712964512);
        tree.insert(-941688840);
        tree.insert(331170058);
        tree.insert(206719297);
        tree.insert(524032215);
        tree.insert(-706760826);
        tree.insert(390282231);
        tree.insert(178118647);
        tree.insert(805380680);
        tree.insert(-110153686);
        tree.insert(692369363);
        tree.insert(537838053);
        tree.insert(492312435);
        tree.insert(-306361719);
        tree.insert(151105461);
        tree.insert(-62727404);
        tree.insert(-125296747);
        tree.insert(503532620);
        tree.insert(-662124430);
        tree.insert(-457270412);
        tree.insert(765631500);
        tree.insert(-997582629);
        tree.insert(-973162503);
        tree.insert(314800903);
        tree.insert(-384862357);
        tree.insert(-82997599);
        tree.insert(618174686);
        tree.insert(-996627422);
        tree.insert(-277121650);
        tree.insert(-702147918);
        tree.insert(23732726);
        tree.insert(-53040552);
        tree.insert(42434519);
        tree.insert(212010823);
        tree.insert(53435079);
        tree.insert(-158780162);
        tree.insert(376510037);
        tree.insert(-259167261);
        tree.insert(-666709726);
        tree.insert(707237523);
        tree.insert(915879362);
        tree.insert(891370653);
        tree.insert(448610467);
        tree.insert(732623718);
        tree.insert(450487835);
        tree.insert(-131446024);
        tree.insert(-448653950);
        tree.insert(636085274);
        tree.insert(889607217);
        tree.insert(-924164974);
        tree.insert(808733428);
        tree.insert(880417502);
        tree.insert(815145488);
        tree.insert(207303019);
        tree.insert(485132501);
        tree.insert(38732965);
        tree.insert(-634848549);
        tree.insert(-239062645);
        tree.insert(112610102);
        tree.insert(458876260);
        tree.insert(-414150959);
        tree.insert(-799406088);
        tree.insert(101700526);
        tree.insert(740812924);
        tree.insert(-121310212);
        tree.insert(-535022654);
        tree.insert(695321403);
        tree.insert(423962351);
        tree.insert(-163243164);
        tree.insert(43916177);
        tree.insert(-413813010);
        tree.insert(993169285);
        tree.insert(690909649);
        tree.insert(766857814);
        tree.insert(323819870);
        tree.insert(-979827191);
        tree.insert(-406966550);
        tree.insert(-819682320);
        tree.insert(-685101629);
        tree.insert(-374926322);
        tree.insert(-737454751);
        tree.insert(-964022628);
        tree.insert(-90796644);
        tree.insert(190972486);
        tree.insert(382192677);
        tree.insert(-496416463);
        tree.insert(287146452);
        tree.insert(-204761994);
        tree.insert(-122029998);
        tree.insert(116863514);
        tree.insert(852168426);
        Integer[] data = {-997582629, -996627422, -979827191, -973162503, -970112038, -969300101, -964022628, -959122709, -943096400, -941688840, -924492227, -924164974, -916185596, -893479546, -892122030, -880058928, -875043991, -836126883, -819682320, -811743054, -806814914, -799406088, -781899659, -737454751, -722069128, -717222841, -716673016, -711673532, -706760826, -702147918, -696374866, -685101629, -666709726, -663095997, -662124430, -649117721, -641196874, -634848549, -624461486, -619742704, -613652084, -567663652, -562667750, -544806439, -535022654, -527187972, -526376098, -496416463, -478036223, -457270412, -448653950, -442013358, -435392952, -414150959, -413813010, -406966550, -384862357, -378059506, -374926322, -356665839, -324994164, -318183171, -313802622, -306361719, -302019948, -283913506, -281506072, -277121650, -275547685, -259167261, -255027083, -242656627, -239062645, -227442666, -204761994, -184068046, -182741877, -163243164, -158780162, -158114864, -145167109, -131446024, -125296747, -122029998, -121310212, -110153686, -94974934, -90796644, -86318551, -82997599, -81867476, -62727404, -53040552, -46246575, -32386803, 8262747, 23732726, 38732965, 39351671, 42434519, 42752119, 43916177, 45552092, 53435079, 67654208, 69930710, 101700526, 112610102, 116863514, 131770875, 134067903, 146444904, 151105461, 160591716, 178118647, 186126317, 190972486, 206494146, 206719297, 207303019, 212010823, 223486880, 237905983, 258533079, 266326246, 270390210, 287146452, 302493264, 314800903, 323819870, 331170058, 359833822, 376510037, 377647061, 377840932, 382192677, 384568889, 390282231, 396549753, 423962351, 424767712, 437237584, 442186738, 442555342, 448610467, 450487835, 458876260, 463275324, 485132501, 492312435, 503532620, 507196330, 514500473, 515506735, 524032215, 537838053, 564910699, 574883777, 599465664, 615864434, 616015837, 618174686, 620060269, 628345501, 636085274, 662329909, 683190376, 690909649, 692369363, 695321403, 707237523, 712964512, 732623718, 740812924, 753103602, 765631500, 766857814, 768855652, 774224624, 774342801, 797295716, 805380680, 808733428, 815145488, 827233808, 852168426, 879562549, 880417502, 884659840, 889607217, 891370653, 893781497, 902383721, 905289609, 915879362, 917878907, 927146256, 937046085, 991503655, 993169285,  };
        assertEquals(tree.filter(tree.convert_to_list()), Arrays.asList(data));
        assertTrue(tree.validateTree());
        assertTrue(tree.getHeight() <= 2 * tree.getBlackHeight());
        assertEquals(tree.getSize(), 200);
    }



}
